webpackJsonp([5],{197:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function l(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var c=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),u=n(3),a=o(u),f=n(7),s=n(8),p=n(198),y=function(e){function t(e){return r(this,t),i(this,Object.getPrototypeOf(t).call(this,e))}return l(t,e),c(t,[{key:"componentDidMount",value:function(){this.props.fetchCollections()}},{key:"render",value:function(){var e=this.props.newestCollections,t=e.map(function(e){return{name:e.name,id:e.id,bookCovers:e.items.map(function(e){return e.cover}),description:e.description}});return a["default"].createElement("div",{className:"page-collections"},a["default"].createElement("div",{style:{maxWidth:800,margin:"0 auto"}},a["default"].createElement("h2",{className:"page-title"},"往期书单")),a["default"].createElement(p.CollectionList,{maxWidth:800,style:"dark",list:t}))}}]),t}(u.Component);t["default"]=(0,f.connect)(function(e){return{newestCollections:e.pagination.bookCollections.newest?e.pagination.bookCollections.newest.ids.map(function(t){return e.entities.bookCollections[t]}):[]}},{fetchCollections:s.fetchCollections})(y)},198:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.CollectionSection=t.CollectionList=t.CollectionItem=void 0;var r=n(199),i=o(r),l=n(201),c=o(l),u=n(200),a=o(u);t.CollectionItem=c["default"],t.CollectionList=a["default"],t.CollectionSection=i["default"],t["default"]=i["default"]},199:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function l(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var c=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},a=n(3),f=o(a),s=n(82),p=o(s),y=n(4),d=n(104),m=n(200),b=o(m),h=function(e,t,n,o){var r,i=arguments.length,l=3>i?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"===("undefined"==typeof Reflect?"undefined":u(Reflect))&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,n,o);else for(var c=e.length-1;c>=0;c--)(r=e[c])&&(l=(3>i?r(l):i>3?r(t,n,l):r(t,n))||l);return i>3&&l&&Object.defineProperty(t,n,l),l},v=n(202),O=function(e){function t(e){return r(this,t),i(this,Object.getPrototypeOf(t).call(this,e))}return l(t,e),c(t,[{key:"componentDidMount",value:function(){}},{key:"render",value:function(){var e=this.props,t=e.list,n=e.title;return f["default"].createElement("div",{styleName:"section"},f["default"].createElement(d.Container,null,f["default"].createElement("h2",{styleName:"title"},n),f["default"].createElement(b["default"],{list:t}),f["default"].createElement(y.Link,{styleName:"view-more",to:"/collections"},"浏览更多书单")))}}]),t}(a.Component);O=h([(0,p["default"])(v)],O),t["default"]=O},200:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function l(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var c=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},a=n(3),f=o(a),s=n(82),p=o(s),y=n(201),d=o(y),m=Object.assign||function(e){for(var t,n=1,o=arguments.length;o>n;n++){t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},b=function(e,t,n,o){var r,i=arguments.length,l=3>i?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"===("undefined"==typeof Reflect?"undefined":u(Reflect))&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,n,o);else for(var c=e.length-1;c>=0;c--)(r=e[c])&&(l=(3>i?r(l):i>3?r(t,n,l):r(t,n))||l);return i>3&&l&&Object.defineProperty(t,n,l),l},h=n(202),v=function(e){function t(e){return r(this,t),i(this,Object.getPrototypeOf(t).call(this,e))}return l(t,e),c(t,[{key:"componentDidMount",value:function(){}},{key:"render",value:function(){var e=this.props,t=e.list,n=e.style,o=e.maxWidth;return f["default"].createElement("div",{styleName:"list",className:"clearfix"},t.map(function(e,t){return f["default"].createElement(d["default"],m({maxWidth:o,style:n,key:t},e))}))}}]),t}(a.Component);v=b([(0,p["default"])(h)],v),t["default"]=v},201:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function l(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var c=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},a=n(3),f=o(a),s=n(82),p=o(s),y=n(4),d=function(e,t,n,o){var r,i=arguments.length,l=3>i?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"===("undefined"==typeof Reflect?"undefined":u(Reflect))&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,n,o);else for(var c=e.length-1;c>=0;c--)(r=e[c])&&(l=(3>i?r(l):i>3?r(t,n,l):r(t,n))||l);return i>3&&l&&Object.defineProperty(t,n,l),l},m=n(202),b=function(e){function t(e){return r(this,t),i(this,Object.getPrototypeOf(t).call(this,e))}return l(t,e),c(t,[{key:"componentDidMount",value:function(){}},{key:"render",value:function(){var e=this.props,t=e.description,n=e.name,o=e.id,r=e.bookCovers,i=e.style,l=e.maxWidth;return f["default"].createElement("div",{className:"collection-item",styleName:"dark"===i?"item--dark":"item--light"},f["default"].createElement("div",{style:{maxWidth:l||"100%",margin:"0 auto"}},f["default"].createElement("div",{className:"row"},f["default"].createElement("div",{className:"col-md-6"},f["default"].createElement("h2",{styleName:"name"},f["default"].createElement(y.Link,{styleName:"link",to:"collections/"+o},n)),f["default"].createElement("div",{styleName:"desc"},t)),f["default"].createElement("div",{className:"col-md-6"},f["default"].createElement("ul",{styleName:"covers"},r.map(function(e,t){return f["default"].createElement("li",{key:t},f["default"].createElement("img",{src:e}))}))))))}}]),t}(a.Component);b=d([(0,p["default"])(m)],b),t["default"]=b},202:function(e,t){e.exports={item:"item_23Tis","item--light":"item--light_2o150 item_23Tis",section:"section_1Bdj3",covers:"covers_l92ZZ",name:"name_jeo6l",link:"link_1OO-g",desc:"desc_MOBvr",title:"title_bDgfw",list:"list_1p40A","view-more":"view-more_QQcb3 link_1OO-g","item--dark":"item--dark_1cOX3 item_23Tis"}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vNS41LmpzIiwid2VicGFjazovLy9zcmMvaXNvbW9ycGhpYy9yb3V0ZXMvQ29sbGVjdGlvbnMvQ29sbGVjdGlvbnMudHN4Iiwid2VicGFjazovLy9zcmMvaXNvbW9ycGhpYy9jb21wb25lbnRzL0NvbGxlY3Rpb25TZWN0aW9uL2luZGV4LnRzIiwid2VicGFjazovLy9zcmMvaXNvbW9ycGhpYy9jb21wb25lbnRzL0NvbGxlY3Rpb25TZWN0aW9uL0NvbGxlY3Rpb25TZWN0aW9uLnRzeCIsIndlYnBhY2s6Ly8vc3JjL2lzb21vcnBoaWMvY29tcG9uZW50cy9Db2xsZWN0aW9uU2VjdGlvbi9Db2xsZWN0aW9uTGlzdC50c3giLCJ3ZWJwYWNrOi8vL3NyYy9pc29tb3JwaGljL2NvbXBvbmVudHMvQ29sbGVjdGlvblNlY3Rpb24vQ29sbGVjdGlvbkl0ZW0udHN4Iiwid2VicGFjazovLy8uL3NyYy9pc29tb3JwaGljL2NvbXBvbmVudHMvQ29sbGVjdGlvblNlY3Rpb24vQ29sbGVjdGlvbi5jc3MiXSwibmFtZXMiOlsid2VicGFja0pzb25wIiwxOTcsIm1vZHVsZSIsImV4cG9ydHMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic2VsZiIsImNhbGwiLCJSZWZlcmVuY2VFcnJvciIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImRlZmluZVByb3BlcnR5IiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJrZXkiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfcmVhY3QiLCJfcmVhY3QyIiwiX3JlYWN0UmVkdXgiLCJfYWN0aW9ucyIsIl9Db2xsZWN0aW9uU2VjdGlvbiIsIkNvbGxlY3Rpb25zIiwiX0NvbXBvbmVudCIsInRoaXMiLCJnZXRQcm90b3R5cGVPZiIsImZldGNoQ29sbGVjdGlvbnMiLCJuZXdlc3RDb2xsZWN0aW9ucyIsImxpc3QiLCJtYXAiLCJpdGVtIiwibmFtZSIsImlkIiwiYm9va0NvdmVycyIsIml0ZW1zIiwiYm9vayIsImNvdmVyIiwiZGVzY3JpcHRpb24iLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwic3R5bGUiLCJtYXhXaWR0aCIsIm1hcmdpbiIsIkNvbGxlY3Rpb25MaXN0IiwiQ29tcG9uZW50IiwiY29ubmVjdCIsInN0YXRlIiwicGFnaW5hdGlvbiIsImJvb2tDb2xsZWN0aW9ucyIsIm5ld2VzdCIsImlkcyIsImVudGl0aWVzIiwxOTgsIkNvbGxlY3Rpb25TZWN0aW9uIiwiQ29sbGVjdGlvbkl0ZW0iLCJ1bmRlZmluZWQiLCJfQ29sbGVjdGlvblNlY3Rpb24yIiwiX0NvbGxlY3Rpb25JdGVtIiwiX0NvbGxlY3Rpb25JdGVtMiIsIl9Db2xsZWN0aW9uTGlzdCIsIl9Db2xsZWN0aW9uTGlzdDIiLDE5OSwiX3R5cGVvZiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiX3JlYWN0Q3NzTW9kdWxlcyIsIl9yZWFjdENzc01vZHVsZXMyIiwiX3JlYWN0Um91dGVyIiwiX2xheW91dCIsIl9fZGVjb3JhdGUiLCJkZWNvcmF0b3JzIiwiZGVzYyIsImQiLCJjIiwiYXJndW1lbnRzIiwiciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlJlZmxlY3QiLCJkZWNvcmF0ZSIsInN0eWxlcyIsIl9wcm9wcyIsInRpdGxlIiwic3R5bGVOYW1lIiwiQ29udGFpbmVyIiwiTGluayIsInRvIiwyMDAsIl9fYXNzaWduIiwiYXNzaWduIiwidCIsInMiLCJuIiwicCIsImhhc093blByb3BlcnR5IiwiaW5kZXgiLDIwMSwiYm9va0NvdmVyIiwic3JjIiwyMDIsIml0ZW0tLWxpZ2h0Iiwic2VjdGlvbiIsImNvdmVycyIsImxpbmsiLCJ2aWV3LW1vcmUiLCJpdGVtLS1kYXJrIl0sIm1hcHBpbmdzIjoiQUFBQUEsY0FBYyxJQUVSQyxJQUNBLFNBQVNDLEVBQVFDLEVBQVNDLEdBRS9CLFlBa0JBLFNBQVNDLEdBQXVCQyxHQUFPLE1BQU9BLElBQU9BLEVBQUlDLFdBQWFELEdBQVFFLFVBQVNGLEdBRXZGLFFBQVNHLEdBQWdCQyxFQUFVQyxHQUFlLEtBQU1ELFlBQW9CQyxJQUFnQixLQUFNLElBQUlDLFdBQVUscUNBRWhILFFBQVNDLEdBQTJCQyxFQUFNQyxHQUFRLElBQUtELEVBQVEsS0FBTSxJQUFJRSxnQkFBZSw0REFBZ0UsUUFBT0QsR0FBeUIsZ0JBQVRBLElBQXFDLGtCQUFUQSxHQUE4QkQsRUFBUEMsRUFFbE8sUUFBU0UsR0FBVUMsRUFBVUMsR0FBYyxHQUEwQixrQkFBZkEsSUFBNEMsT0FBZkEsRUFBdUIsS0FBTSxJQUFJUCxXQUFVLGlFQUFvRU8sR0FBZUQsR0FBU0UsVUFBWUMsT0FBT0MsT0FBT0gsR0FBY0EsRUFBV0MsV0FBYUcsYUFBZUMsTUFBT04sRUFBVU8sWUFBWSxFQUFPQyxVQUFVLEVBQU1DLGNBQWMsS0FBZVIsSUFBWUUsT0FBT08sZUFBaUJQLE9BQU9PLGVBQWVWLEVBQVVDLEdBQWNELEVBQVNXLFVBQVlWLEdBdEJqZUUsT0FBT1MsZUFBZTNCLEVBQVMsY0FDM0JxQixPQUFPLEdBR1gsSUFBSU8sR0FBZSxXQUFjLFFBQVNDLEdBQWlCQyxFQUFRQyxHQUFTLElBQUssR0FBSUMsR0FBSSxFQUFHQSxFQUFJRCxFQUFNRSxPQUFRRCxJQUFLLENBQUUsR0FBSUUsR0FBYUgsRUFBTUMsRUFBSUUsR0FBV1osV0FBYVksRUFBV1osYUFBYyxFQUFPWSxFQUFXVixjQUFlLEVB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Y2tKc29ucChbNV0se1xuXG4vKioqLyAxOTc6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHRcblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cdFxuXHR2YXIgX3JlYWN0UmVkdXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXHRcblx0dmFyIF9hY3Rpb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0XG5cdHZhciBfQ29sbGVjdGlvblNlY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5OCk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblx0XG5cdGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXHRcblx0ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cdFxuXHR2YXIgQ29sbGVjdGlvbnMgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuXHQgICAgX2luaGVyaXRzKENvbGxlY3Rpb25zLCBfQ29tcG9uZW50KTtcblx0XG5cdCAgICBmdW5jdGlvbiBDb2xsZWN0aW9ucyhwcm9wcykge1xuXHQgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb2xsZWN0aW9ucyk7XG5cdFxuXHQgICAgICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ29sbGVjdGlvbnMpLmNhbGwodGhpcywgcHJvcHMpKTtcblx0ICAgIH1cblx0XG5cdCAgICBfY3JlYXRlQ2xhc3MoQ29sbGVjdGlvbnMsIFt7XG5cdCAgICAgICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcblx0ICAgICAgICAgICAgdGhpcy5wcm9wcy5mZXRjaENvbGxlY3Rpb25zKCk7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ3JlbmRlcicsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblx0ICAgICAgICAgICAgdmFyIG5ld2VzdENvbGxlY3Rpb25zID0gdGhpcy5wcm9wcy5uZXdlc3RDb2xsZWN0aW9ucztcblx0XG5cdCAgICAgICAgICAgIHZhciBsaXN0ID0gbmV3ZXN0Q29sbGVjdGlvbnMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICAgICAgICAgIG5hbWU6IGl0ZW0ubmFtZSxcblx0ICAgICAgICAgICAgICAgICAgICBpZDogaXRlbS5pZCxcblx0ICAgICAgICAgICAgICAgICAgICBib29rQ292ZXJzOiBpdGVtLml0ZW1zLm1hcChmdW5jdGlvbiAoYm9vaykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYm9vay5jb3Zlcjtcblx0ICAgICAgICAgICAgICAgICAgICB9KSxcblx0ICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogaXRlbS5kZXNjcmlwdGlvblxuXHQgICAgICAgICAgICAgICAgfTtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJwYWdlLWNvbGxlY3Rpb25zXCIgfSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBzdHlsZTogeyBtYXhXaWR0aDogODAwLCBtYXJnaW46ICcwIGF1dG8nIH0gfSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJoMlwiLCB7IGNsYXNzTmFtZTogXCJwYWdlLXRpdGxlXCIgfSwgXCLlvoDmnJ/kuabljZVcIikpLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfQ29sbGVjdGlvblNlY3Rpb24uQ29sbGVjdGlvbkxpc3QsIHsgbWF4V2lkdGg6IDgwMCwgc3R5bGU6IFwiZGFya1wiLCBsaXN0OiBsaXN0IH0pKTtcblx0ICAgICAgICB9XG5cdCAgICB9XSk7XG5cdFxuXHQgICAgcmV0dXJuIENvbGxlY3Rpb25zO1xuXHR9KF9yZWFjdC5Db21wb25lbnQpO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9yZWFjdFJlZHV4LmNvbm5lY3QpKGZ1bmN0aW9uIChzdGF0ZSkge1xuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgICBuZXdlc3RDb2xsZWN0aW9uczogc3RhdGUucGFnaW5hdGlvbi5ib29rQ29sbGVjdGlvbnMubmV3ZXN0ID8gc3RhdGUucGFnaW5hdGlvbi5ib29rQ29sbGVjdGlvbnMubmV3ZXN0Lmlkcy5tYXAoZnVuY3Rpb24gKGlkKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBzdGF0ZS5lbnRpdGllcy5ib29rQ29sbGVjdGlvbnNbaWRdO1xuXHQgICAgICAgIH0pIDogW11cblx0ICAgIH07XG5cdH0sIHsgZmV0Y2hDb2xsZWN0aW9uczogX2FjdGlvbnMuZmV0Y2hDb2xsZWN0aW9ucyB9KShDb2xsZWN0aW9ucyk7XG5cbi8qKiovIH0sXG5cbi8qKiovIDE5ODpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLkNvbGxlY3Rpb25TZWN0aW9uID0gZXhwb3J0cy5Db2xsZWN0aW9uTGlzdCA9IGV4cG9ydHMuQ29sbGVjdGlvbkl0ZW0gPSB1bmRlZmluZWQ7XG5cdFxuXHR2YXIgX0NvbGxlY3Rpb25TZWN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOTkpO1xuXHRcblx0dmFyIF9Db2xsZWN0aW9uU2VjdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Db2xsZWN0aW9uU2VjdGlvbik7XG5cdFxuXHR2YXIgX0NvbGxlY3Rpb25JdGVtID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMDEpO1xuXHRcblx0dmFyIF9Db2xsZWN0aW9uSXRlbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Db2xsZWN0aW9uSXRlbSk7XG5cdFxuXHR2YXIgX0NvbGxlY3Rpb25MaXN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMDApO1xuXHRcblx0dmFyIF9Db2xsZWN0aW9uTGlzdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Db2xsZWN0aW9uTGlzdCk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZXhwb3J0cy5Db2xsZWN0aW9uSXRlbSA9IF9Db2xsZWN0aW9uSXRlbTIuZGVmYXVsdDtcblx0ZXhwb3J0cy5Db2xsZWN0aW9uTGlzdCA9IF9Db2xsZWN0aW9uTGlzdDIuZGVmYXVsdDtcblx0ZXhwb3J0cy5Db2xsZWN0aW9uU2VjdGlvbiA9IF9Db2xsZWN0aW9uU2VjdGlvbjIuZGVmYXVsdDtcblx0ZXhwb3J0cy5kZWZhdWx0ID0gX0NvbGxlY3Rpb25TZWN0aW9uMi5kZWZhdWx0O1xuXG4vKioqLyB9LFxuXG4vKioqLyAxOTk6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXHRcblx0dmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cdFxuXHR2YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0XG5cdHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXHRcblx0dmFyIF9yZWFjdENzc01vZHVsZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgyKTtcblx0XG5cdHZhciBfcmVhY3RDc3NNb2R1bGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Q3NzTW9kdWxlcyk7XG5cdFxuXHR2YXIgX3JlYWN0Um91dGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblx0XG5cdHZhciBfbGF5b3V0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDQpO1xuXHRcblx0dmFyIF9Db2xsZWN0aW9uTGlzdCA9IF9fd2VicGFja19yZXF1aXJlX18oMjAwKTtcblx0XG5cdHZhciBfQ29sbGVjdGlvbkxpc3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ29sbGVjdGlvbkxpc3QpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cdFxuXHRmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblx0XG5cdGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXHRcblx0dmFyIF9fZGVjb3JhdGUgPSB1bmRlZmluZWQgJiYgdW5kZWZpbmVkLl9fZGVjb3JhdGUgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG5cdCAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdCAgICAgICAgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsXG5cdCAgICAgICAgZDtcblx0ICAgIGlmICgodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihSZWZsZWN0KSkgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO2Vsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0ICAgICAgICBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuXHQgICAgfXJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG5cdH07XG5cdFxuXHR2YXIgc3R5bGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMDIpO1xuXHR2YXIgQ29sbGVjdGlvblNlY3Rpb24gPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuXHQgICAgX2luaGVyaXRzKENvbGxlY3Rpb25TZWN0aW9uLCBfQ29tcG9uZW50KTtcblx0XG5cdCAgICBmdW5jdGlvbiBDb2xsZWN0aW9uU2VjdGlvbihwcm9wcykge1xuXHQgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb2xsZWN0aW9uU2VjdGlvbik7XG5cdFxuXHQgICAgICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ29sbGVjdGlvblNlY3Rpb24pLmNhbGwodGhpcywgcHJvcHMpKTtcblx0ICAgIH1cblx0XG5cdCAgICBfY3JlYXRlQ2xhc3MoQ29sbGVjdGlvblNlY3Rpb24sIFt7XG5cdCAgICAgICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge31cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6IFwicmVuZGVyXCIsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblx0ICAgICAgICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG5cdCAgICAgICAgICAgIHZhciBsaXN0ID0gX3Byb3BzLmxpc3Q7XG5cdCAgICAgICAgICAgIHZhciB0aXRsZSA9IF9wcm9wcy50aXRsZTtcblx0XG5cdCAgICAgICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IHN0eWxlTmFtZTogXCJzZWN0aW9uXCIgfSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2xheW91dC5Db250YWluZXIsIG51bGwsIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiaDJcIiwgeyBzdHlsZU5hbWU6IFwidGl0bGVcIiB9LCB0aXRsZSksIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Db2xsZWN0aW9uTGlzdDIuZGVmYXVsdCwgeyBsaXN0OiBsaXN0IH0pLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3RSb3V0ZXIuTGluaywgeyBzdHlsZU5hbWU6IFwidmlldy1tb3JlXCIsIHRvOiBcIi9jb2xsZWN0aW9uc1wiIH0sIFwi5rWP6KeI5pu05aSa5Lmm5Y2VXCIpKSk7XG5cdCAgICAgICAgfVxuXHQgICAgfV0pO1xuXHRcblx0ICAgIHJldHVybiBDb2xsZWN0aW9uU2VjdGlvbjtcblx0fShfcmVhY3QuQ29tcG9uZW50KTtcblx0Q29sbGVjdGlvblNlY3Rpb24gPSBfX2RlY29yYXRlKFsoMCwgX3JlYWN0Q3NzTW9kdWxlczIuZGVmYXVsdCkoc3R5bGVzKV0sIENvbGxlY3Rpb25TZWN0aW9uKTtcblx0ZXhwb3J0cy5kZWZhdWx0ID0gQ29sbGVjdGlvblNlY3Rpb247XG5cbi8qKiovIH0sXG5cbi8qKiovIDIwMDpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cdFxuXHR2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHRcblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cdFxuXHR2YXIgX3JlYWN0Q3NzTW9kdWxlcyA9IF9fd2VicGFja19yZXF1aXJlX18oODIpO1xuXHRcblx0dmFyIF9yZWFjdENzc01vZHVsZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3RDc3NNb2R1bGVzKTtcblx0XG5cdHZhciBfQ29sbGVjdGlvbkl0ZW0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwMSk7XG5cdFxuXHR2YXIgX0NvbGxlY3Rpb25JdGVtMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NvbGxlY3Rpb25JdGVtKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXHRcblx0ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cdFxuXHRmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblx0XG5cdHZhciBfX2Fzc2lnbiA9IHVuZGVmaW5lZCAmJiB1bmRlZmluZWQuX19hc3NpZ24gfHwgT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodCkge1xuXHQgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG5cdCAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcblx0ICAgICAgICBmb3IgKHZhciBwIGluIHMpIHtcblx0ICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIHQ7XG5cdH07XG5cdHZhciBfX2RlY29yYXRlID0gdW5kZWZpbmVkICYmIHVuZGVmaW5lZC5fX2RlY29yYXRlIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuXHQgICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLFxuXHQgICAgICAgIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLFxuXHQgICAgICAgIGQ7XG5cdCAgICBpZiAoKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoUmVmbGVjdCkpID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdCAgICAgICAgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcblx0ICAgIH1yZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xuXHR9O1xuXHRcblx0dmFyIHN0eWxlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMjAyKTtcblx0dmFyIENvbGxlY3Rpb25MaXN0ID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcblx0ICAgIF9pbmhlcml0cyhDb2xsZWN0aW9uTGlzdCwgX0NvbXBvbmVudCk7XG5cdFxuXHQgICAgZnVuY3Rpb24gQ29sbGVjdGlvbkxpc3QocHJvcHMpIHtcblx0ICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29sbGVjdGlvbkxpc3QpO1xuXHRcblx0ICAgICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgT2JqZWN0LmdldFByb3RvdHlwZU9mKENvbGxlY3Rpb25MaXN0KS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cdCAgICB9XG5cdFxuXHQgICAgX2NyZWF0ZUNsYXNzKENvbGxlY3Rpb25MaXN0LCBbe1xuXHQgICAgICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHt9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiBcInJlbmRlclwiLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdCAgICAgICAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzO1xuXHQgICAgICAgICAgICB2YXIgbGlzdCA9IF9wcm9wcy5saXN0O1xuXHQgICAgICAgICAgICB2YXIgc3R5bGUgPSBfcHJvcHMuc3R5bGU7XG5cdCAgICAgICAgICAgIHZhciBtYXhXaWR0aCA9IF9wcm9wcy5tYXhXaWR0aDtcblx0XG5cdCAgICAgICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IHN0eWxlTmFtZTogXCJsaXN0XCIsIGNsYXNzTmFtZTogXCJjbGVhcmZpeFwiIH0sIGxpc3QubWFwKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Db2xsZWN0aW9uSXRlbTIuZGVmYXVsdCwgX19hc3NpZ24oeyBtYXhXaWR0aDogbWF4V2lkdGgsIHN0eWxlOiBzdHlsZSwga2V5OiBpbmRleCB9LCBpdGVtKSk7XG5cdCAgICAgICAgICAgIH0pKTtcblx0ICAgICAgICB9XG5cdCAgICB9XSk7XG5cdFxuXHQgICAgcmV0dXJuIENvbGxlY3Rpb25MaXN0O1xuXHR9KF9yZWFjdC5Db21wb25lbnQpO1xuXHRDb2xsZWN0aW9uTGlzdCA9IF9fZGVjb3JhdGUoWygwLCBfcmVhY3RDc3NNb2R1bGVzMi5kZWZhdWx0KShzdHlsZXMpXSwgQ29sbGVjdGlvbkxpc3QpO1xuXHRleHBvcnRzLmRlZmF1bHQgPSBDb2xsZWN0aW9uTGlzdDtcblxuLyoqKi8gfSxcblxuLyoqKi8gMjAxOlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblx0XG5cdHZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXHRcblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cdFxuXHR2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblx0XG5cdHZhciBfcmVhY3RDc3NNb2R1bGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4Mik7XG5cdFxuXHR2YXIgX3JlYWN0Q3NzTW9kdWxlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdENzc01vZHVsZXMpO1xuXHRcblx0dmFyIF9yZWFjdFJvdXRlciA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblx0XG5cdGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXHRcblx0ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cdFxuXHR2YXIgX19kZWNvcmF0ZSA9IHVuZGVmaW5lZCAmJiB1bmRlZmluZWQuX19kZWNvcmF0ZSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcblx0ICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCxcblx0ICAgICAgICByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYyxcblx0ICAgICAgICBkO1xuXHQgICAgaWYgKCh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKFJlZmxlY3QpKSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7ZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuXHQgICAgICAgIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG5cdCAgICB9cmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcblx0fTtcblx0XG5cdHZhciBzdHlsZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwMik7XG5cdHZhciBDb2xsZWN0aW9uSXRlbSA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG5cdCAgICBfaW5oZXJpdHMoQ29sbGVjdGlvbkl0ZW0sIF9Db21wb25lbnQpO1xuXHRcblx0ICAgIGZ1bmN0aW9uIENvbGxlY3Rpb25JdGVtKHByb3BzKSB7XG5cdCAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbGxlY3Rpb25JdGVtKTtcblx0XG5cdCAgICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIE9iamVjdC5nZXRQcm90b3R5cGVPZihDb2xsZWN0aW9uSXRlbSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXHQgICAgfVxuXHRcblx0ICAgIF9jcmVhdGVDbGFzcyhDb2xsZWN0aW9uSXRlbSwgW3tcblx0ICAgICAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7fVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogXCJyZW5kZXJcIixcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHQgICAgICAgICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcblx0ICAgICAgICAgICAgdmFyIGRlc2NyaXB0aW9uID0gX3Byb3BzLmRlc2NyaXB0aW9uO1xuXHQgICAgICAgICAgICB2YXIgbmFtZSA9IF9wcm9wcy5uYW1lO1xuXHQgICAgICAgICAgICB2YXIgaWQgPSBfcHJvcHMuaWQ7XG5cdCAgICAgICAgICAgIHZhciBib29rQ292ZXJzID0gX3Byb3BzLmJvb2tDb3ZlcnM7XG5cdCAgICAgICAgICAgIHZhciBzdHlsZSA9IF9wcm9wcy5zdHlsZTtcblx0ICAgICAgICAgICAgdmFyIG1heFdpZHRoID0gX3Byb3BzLm1heFdpZHRoO1xuXHRcblx0ICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImNvbGxlY3Rpb24taXRlbVwiLCBzdHlsZU5hbWU6IHN0eWxlID09PSAnZGFyaycgPyAnaXRlbS0tZGFyaycgOiAnaXRlbS0tbGlnaHQnIH0sIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgc3R5bGU6IHsgbWF4V2lkdGg6IG1heFdpZHRoIHx8ICcxMDAlJywgbWFyZ2luOiAnMCBhdXRvJyB9IH0sIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcInJvd1wiIH0sIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImNvbC1tZC02XCIgfSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJoMlwiLCB7IHN0eWxlTmFtZTogXCJuYW1lXCIgfSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Um91dGVyLkxpbmssIHsgc3R5bGVOYW1lOiBcImxpbmtcIiwgdG86IFwiY29sbGVjdGlvbnMvXCIgKyBpZCB9LCBuYW1lKSksIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgc3R5bGVOYW1lOiBcImRlc2NcIiB9LCBkZXNjcmlwdGlvbikpLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJjb2wtbWQtNlwiIH0sIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwidWxcIiwgeyBzdHlsZU5hbWU6IFwiY292ZXJzXCIgfSwgYm9va0NvdmVycy5tYXAoZnVuY3Rpb24gKGJvb2tDb3ZlciwgaW5kZXgpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImxpXCIsIHsga2V5OiBpbmRleCB9LCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImltZ1wiLCB7IHNyYzogYm9va0NvdmVyIH0pKTtcblx0ICAgICAgICAgICAgfSkpKSkpKTtcblx0ICAgICAgICB9XG5cdCAgICB9XSk7XG5cdFxuXHQgICAgcmV0dXJuIENvbGxlY3Rpb25JdGVtO1xuXHR9KF9yZWFjdC5Db21wb25lbnQpO1xuXHRDb2xsZWN0aW9uSXRlbSA9IF9fZGVjb3JhdGUoWygwLCBfcmVhY3RDc3NNb2R1bGVzMi5kZWZhdWx0KShzdHlsZXMpXSwgQ29sbGVjdGlvbkl0ZW0pO1xuXHRleHBvcnRzLmRlZmF1bHQgPSBDb2xsZWN0aW9uSXRlbTtcblxuLyoqKi8gfSxcblxuLyoqKi8gMjAyOlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0Ly8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblx0bW9kdWxlLmV4cG9ydHMgPSB7XCJpdGVtXCI6XCJpdGVtXzIzVGlzXCIsXCJpdGVtLS1saWdodFwiOlwiaXRlbS0tbGlnaHRfMm8xNTAgaXRlbV8yM1Rpc1wiLFwic2VjdGlvblwiOlwic2VjdGlvbl8xQmRqM1wiLFwiY292ZXJzXCI6XCJjb3ZlcnNfbDkyWlpcIixcIm5hbWVcIjpcIm5hbWVfamVvNmxcIixcImxpbmtcIjpcImxpbmtfMU9PLWdcIixcImRlc2NcIjpcImRlc2NfTU9CdnJcIixcInRpdGxlXCI6XCJ0aXRsZV9iRGdmd1wiLFwibGlzdFwiOlwibGlzdF8xcDQwQVwiLFwidmlldy1tb3JlXCI6XCJ2aWV3LW1vcmVfUVFjYjMgbGlua18xT08tZ1wiLFwiaXRlbS0tZGFya1wiOlwiaXRlbS0tZGFya18xY09YMyBpdGVtXzIzVGlzXCJ9O1xuXG4vKioqLyB9XG5cbn0pO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIDUuNS5qc1xuICoqLyIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCB7IGZldGNoQ29sbGVjdGlvbnMgfSBmcm9tICcuLi8uLi9zdG9yZS9hY3Rpb25zJ1xuaW1wb3J0IHsgQ29sbGVjdGlvbkxpc3QgfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL0NvbGxlY3Rpb25TZWN0aW9uJ1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBmZXRjaENvbGxlY3Rpb25zOiBhbnlcbiAgbmV3ZXN0Q29sbGVjdGlvbnM6IEFycmF5PGFueT5cbn1cblxuY2xhc3MgQ29sbGVjdGlvbnMgZXh0ZW5kcyBDb21wb25lbnQ8UHJvcHMsIHt9PiB7XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcylcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMucHJvcHMuZmV0Y2hDb2xsZWN0aW9ucygpXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgbGV0IHsgbmV3ZXN0Q29sbGVjdGlvbnMgfSA9IHRoaXMucHJvcHNcblxuICAgIGxldCBsaXN0ID0gbmV3ZXN0Q29sbGVjdGlvbnNcbiAgICAgIC5tYXAoaXRlbSA9PiAoe1xuICAgICAgICBuYW1lOiBpdGVtLm5hbWUsXG4gICAgICAgIGlkOiBpdGVtLmlkLFxuICAgICAgICBib29rQ292ZXJzOiBpdGVtLml0ZW1zLm1hcChib29rID0+IGJvb2suY292ZXIpLFxuICAgICAgICBkZXNjcmlwdGlvbjogaXRlbS5kZXNjcmlwdGlvblxuICAgICAgfSkpXG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYWdlLWNvbGxlY3Rpb25zXCI+XG4gICAgICAgIDxkaXYgc3R5bGU9e3ttYXhXaWR0aDogODAwLCBtYXJnaW46ICcwIGF1dG8nfX0+XG4gICAgICAgICAgPGgyIGNsYXNzTmFtZT1cInBhZ2UtdGl0bGVcIj7lvoDmnJ/kuabljZU8L2gyPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPENvbGxlY3Rpb25MaXN0IG1heFdpZHRoPXs4MDB9IHN0eWxlPVwiZGFya1wiIGxpc3Q9e2xpc3R9IC8+XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChcbiAgc3RhdGUgPT4gKHtcbiAgICBuZXdlc3RDb2xsZWN0aW9uczogc3RhdGUucGFnaW5hdGlvbi5ib29rQ29sbGVjdGlvbnMubmV3ZXN0XG4gICAgICA/IHN0YXRlLnBhZ2luYXRpb24uYm9va0NvbGxlY3Rpb25zLm5ld2VzdC5pZHMubWFwKGlkID0+IHN0YXRlLmVudGl0aWVzLmJvb2tDb2xsZWN0aW9uc1tpZF0pXG4gICAgICA6IFtdXG4gIH0pLFxuICB7IGZldGNoQ29sbGVjdGlvbnMgfVxuKShDb2xsZWN0aW9ucyBhcyBhbnkpXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBzcmMvaXNvbW9ycGhpYy9yb3V0ZXMvQ29sbGVjdGlvbnMvQ29sbGVjdGlvbnMudHN4XG4gKiovIiwiaW1wb3J0IENvbGxlY3Rpb25TZWN0aW9uIGZyb20gJy4vQ29sbGVjdGlvblNlY3Rpb24nXG5pbXBvcnQgQ29sbGVjdGlvbkl0ZW0gZnJvbSAnLi9Db2xsZWN0aW9uSXRlbSdcbmltcG9ydCBDb2xsZWN0aW9uTGlzdCBmcm9tICcuL0NvbGxlY3Rpb25MaXN0J1xuXG5leHBvcnQgeyBDb2xsZWN0aW9uSXRlbSwgQ29sbGVjdGlvbkxpc3QsIENvbGxlY3Rpb25TZWN0aW9uIH1cbmV4cG9ydCBkZWZhdWx0IENvbGxlY3Rpb25TZWN0aW9uXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBzcmMvaXNvbW9ycGhpYy9jb21wb25lbnRzL0NvbGxlY3Rpb25TZWN0aW9uL2luZGV4LnRzXG4gKiovIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IENTU01vZHVsZXMgZnJvbSAncmVhY3QtY3NzLW1vZHVsZXMnXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyJ1xuaW1wb3J0IHsgQ29udGFpbmVyIH0gZnJvbSAnLi4vLi4vZWxlbWVudHMvX2xheW91dCdcbmltcG9ydCBDb2xsZWN0aW9uTGlzdCBmcm9tICcuL0NvbGxlY3Rpb25MaXN0J1xuaW1wb3J0IHsgSUNvbGxlY3Rpb25FbnRpdHkgfSBmcm9tICcuL0NvbGxlY3Rpb25JdGVtJ1xuY29uc3Qgc3R5bGVzOiBhbnkgPSByZXF1aXJlKCcuL0NvbGxlY3Rpb24uY3NzJylcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gIGxpc3Q6IElDb2xsZWN0aW9uRW50aXR5W11cbiAgdGl0bGU6IHN0cmluZ1xufVxuXG5pbnRlcmZhY2UgSVN0YXRlIHtcbn1cblxuQENTU01vZHVsZXMoc3R5bGVzKVxuY2xhc3MgQ29sbGVjdGlvblNlY3Rpb24gZXh0ZW5kcyBDb21wb25lbnQ8SVByb3BzLCBJU3RhdGU+IHtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKVxuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBsaXN0LCB0aXRsZSB9ID0gdGhpcy5wcm9wc1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgc3R5bGVOYW1lPVwic2VjdGlvblwiPlxuICAgICAgICA8Q29udGFpbmVyPlxuICAgICAgICAgIDxoMiBzdHlsZU5hbWU9XCJ0aXRsZVwiPnt0aXRsZX08L2gyPlxuICAgICAgICAgIDxDb2xsZWN0aW9uTGlzdCBsaXN0PXtsaXN0fSAvPlxuICAgICAgICAgIDxMaW5rIHN0eWxlTmFtZT1cInZpZXctbW9yZVwiIHRvPVwiL2NvbGxlY3Rpb25zXCI+5rWP6KeI5pu05aSa5Lmm5Y2VPC9MaW5rPlxuICAgICAgICA8L0NvbnRhaW5lcj5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb2xsZWN0aW9uU2VjdGlvblxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogc3JjL2lzb21vcnBoaWMvY29tcG9uZW50cy9Db2xsZWN0aW9uU2VjdGlvbi9Db2xsZWN0aW9uU2VjdGlvbi50c3hcbiAqKi8iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgQ1NTTW9kdWxlcyBmcm9tICdyZWFjdC1jc3MtbW9kdWxlcydcbmltcG9ydCBDb2xsZWN0aW9uSXRlbSwgeyBJQ29sbGVjdGlvbkVudGl0eSB9IGZyb20gJy4vQ29sbGVjdGlvbkl0ZW0nXG5jb25zdCBzdHlsZXM6IGFueSA9IHJlcXVpcmUoJy4vQ29sbGVjdGlvbi5jc3MnKVxuXG5leHBvcnQgaW50ZXJmYWNlIElQcm9wcyB7XG4gIGxpc3Q6IElDb2xsZWN0aW9uRW50aXR5W11cbiAgc3R5bGU/OiAnZGFyaycgfCAnbGlnaHQnXG4gIG1heFdpZHRoPzogbnVtYmVyXG59XG5cbmludGVyZmFjZSBJU3RhdGUge1xufVxuXG5AQ1NTTW9kdWxlcyhzdHlsZXMpXG5jbGFzcyBDb2xsZWN0aW9uTGlzdCBleHRlbmRzIENvbXBvbmVudDxJUHJvcHMsIElTdGF0ZT4ge1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpXG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGxpc3QsIHN0eWxlLCBtYXhXaWR0aCB9ID0gdGhpcy5wcm9wc1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgc3R5bGVOYW1lPVwibGlzdFwiIGNsYXNzTmFtZT1cImNsZWFyZml4XCI+XG4gICAgICAgIHtcbiAgICAgICAgICBsaXN0Lm1hcCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDxDb2xsZWN0aW9uSXRlbSBtYXhXaWR0aD17bWF4V2lkdGh9IHN0eWxlPXtzdHlsZX0ga2V5PXtpbmRleH0gey4uLml0ZW19IC8+XG4gICAgICAgICAgICApXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbGxlY3Rpb25MaXN0XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBzcmMvaXNvbW9ycGhpYy9jb21wb25lbnRzL0NvbGxlY3Rpb25TZWN0aW9uL0NvbGxlY3Rpb25MaXN0LnRzeFxuICoqLyIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBDU1NNb2R1bGVzIGZyb20gJ3JlYWN0LWNzcy1tb2R1bGVzJ1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlcidcbmNvbnN0IHN0eWxlczogYW55ID0gcmVxdWlyZSgnLi9Db2xsZWN0aW9uLmNzcycpXG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNvbGxlY3Rpb25FbnRpdHkge1xuICBjb3Zlcj86IHN0cmluZ1xuICBuYW1lOiBzdHJpbmdcbiAgaWQ6IHN0cmluZ1xuICBib29rQ292ZXJzOiBzdHJpbmdbXVxuICBkZXNjcmlwdGlvbjogc3RyaW5nXG59XG5cbmludGVyZmFjZSBJUHJvcHMgZXh0ZW5kcyBJQ29sbGVjdGlvbkVudGl0eSB7XG4gIHN0eWxlPzogJ2RhcmsnIHwgJ2xpZ2h0J1xuICBtYXhXaWR0aD86IG51bWJlclxufVxuXG5pbnRlcmZhY2UgSVN0YXRlIHtcbn1cblxuQENTU01vZHVsZXMoc3R5bGVzKVxuY2xhc3MgQ29sbGVjdGlvbkl0ZW0gZXh0ZW5kcyBDb21wb25lbnQ8SVByb3BzLCBJU3RhdGU+IHtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKVxuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBkZXNjcmlwdGlvbiwgbmFtZSwgaWQsIGJvb2tDb3ZlcnMsIHN0eWxlLCBtYXhXaWR0aCB9ID0gdGhpcy5wcm9wc1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sbGVjdGlvbi1pdGVtXCIgc3R5bGVOYW1lPXtzdHlsZSA9PT0gJ2RhcmsnID8gJ2l0ZW0tLWRhcmsnIDogJ2l0ZW0tLWxpZ2h0J30+XG4gICAgICAgIDxkaXYgc3R5bGU9e3sgbWF4V2lkdGg6IG1heFdpZHRoIHx8ICcxMDAlJywgbWFyZ2luOiAnMCBhdXRvJyB9fT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2wtbWQtNlwiPlxuICAgICAgICAgICAgICA8aDIgc3R5bGVOYW1lPVwibmFtZVwiPlxuICAgICAgICAgICAgICAgIDxMaW5rIHN0eWxlTmFtZT1cImxpbmtcIiB0bz17YGNvbGxlY3Rpb25zLyR7aWR9YH0+e25hbWV9PC9MaW5rPlxuICAgICAgICAgICAgICA8L2gyPlxuICAgICAgICAgICAgICA8ZGl2IHN0eWxlTmFtZT1cImRlc2NcIj57ZGVzY3JpcHRpb259PC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLW1kLTZcIj5cbiAgICAgICAgICAgICAgPHVsIHN0eWxlTmFtZT1cImNvdmVyc1wiPlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGJvb2tDb3ZlcnMubWFwKChib29rQ292ZXIsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgPGxpIGtleT17aW5kZXh9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e2Jvb2tDb3Zlcn0gLz5cbiAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb2xsZWN0aW9uSXRlbVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogc3JjL2lzb21vcnBoaWMvY29tcG9uZW50cy9Db2xsZWN0aW9uU2VjdGlvbi9Db2xsZWN0aW9uSXRlbS50c3hcbiAqKi8iLCIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJpdGVtXCI6XCJpdGVtXzIzVGlzXCIsXCJpdGVtLS1saWdodFwiOlwiaXRlbS0tbGlnaHRfMm8xNTAgaXRlbV8yM1Rpc1wiLFwic2VjdGlvblwiOlwic2VjdGlvbl8xQmRqM1wiLFwiY292ZXJzXCI6XCJjb3ZlcnNfbDkyWlpcIixcIm5hbWVcIjpcIm5hbWVfamVvNmxcIixcImxpbmtcIjpcImxpbmtfMU9PLWdcIixcImRlc2NcIjpcImRlc2NfTU9CdnJcIixcInRpdGxlXCI6XCJ0aXRsZV9iRGdmd1wiLFwibGlzdFwiOlwibGlzdF8xcDQwQVwiLFwidmlldy1tb3JlXCI6XCJ2aWV3LW1vcmVfUVFjYjMgbGlua18xT08tZ1wiLFwiaXRlbS0tZGFya1wiOlwiaXRlbS0tZGFya18xY09YMyBpdGVtXzIzVGlzXCJ9O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvaXNvbW9ycGhpYy9jb21wb25lbnRzL0NvbGxlY3Rpb25TZWN0aW9uL0NvbGxlY3Rpb24uY3NzXG4gKiogbW9kdWxlIGlkID0gMjAyXG4gKiogbW9kdWxlIGNodW5rcyA9IDVcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9