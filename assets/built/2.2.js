webpackJsonp([2],{159:function(e,t,n){"use strict";function o(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t["default"]=e,t}function r(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function l(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function a(e,t){return{userBooks:[],newestBooks:b.booksSelector(e),session:e.session,bookCollections:k["default"].get(e.pagination,"bookCollections.default",null)?e.pagination.bookCollections["default"].ids.map(function(t){return e.entities.bookCollections[t]}):[],bookShelf:k["default"].get(e.payloads,"bookShelf.data",[])}}Object.defineProperty(t,"__esModule",{value:!0});var c=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},f=n(3),p=r(f),d=n(7),y=n(8),h=n(160),b=o(h),m=n(163),v=r(m),g=n(134),_=r(g),O=n(171),w=n(18),k=r(w),j=n(82),E=r(j),P=n(104),S=n(185),C=r(S),N=n(106),R=function(e,t,n,o){var r,i=arguments.length,u=3>i?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"===("undefined"==typeof Reflect?"undefined":s(Reflect))&&"function"==typeof Reflect.decorate)u=Reflect.decorate(e,t,n,o);else for(var l=e.length-1;l>=0;l--)(r=e[l])&&(u=(3>i?r(u):i>3?r(t,n,u):r(t,n))||u);return i>3&&u&&Object.defineProperty(t,n,u),u},M=n(187),x=function(e){function t(e){i(this,t);var n=u(this,Object.getPrototypeOf(t).call(this,e));return n.state={showRecentReading:!1},n}return l(t,e),c(t,[{key:"componentDidMount",value:function(){this.props.fetchBooks(),this.props.fetchCollections()}},{key:"componentWillReceiveProps",value:function(e){this.props.session.isFetching&&!e.session.isFetching&&"visitor"!==e.session.user.role&&this.setState({showRecentReading:!0})}},{key:"render",value:function(){var e=this.props,t=e.newestBooks,n=e.bookCollections;return n=n.map(function(e){return{name:e.name,id:e.id,bookCovers:e.items.map(function(e){return e.cover}),description:e.description}}),p["default"].createElement(_["default"],{bodyClass:"home"},"visitor"===this.props.session.user.role&&this.props.session.isFetching===!1?p["default"].createElement("div",{styleName:"hero-image"},p["default"].createElement(P.Container,null,p["default"].createElement("div",{styleName:"logo"},"Readr"),p["default"].createElement("h1",{styleName:"page-title"},"新的阅读体验"),p["default"].createElement(O.Button,{to:"/signup"},"现在加入"))):null,p["default"].createElement(C["default"],{title:p["default"].createElement("div",null,"wtf: ",p["default"].createElement("span",null,"hehhehehe"))}),p["default"].createElement(N.Dropdown,{title:p["default"].createElement("div",{style:{display:"inline-block"}},"wtf: ",p["default"].createElement("span",null,"hehhehehe"))},p["default"].createElement(N.DropdownItem,null,"fffff"),p["default"].createElement(N.DropdownItem,null,p["default"].createElement("a",{href:"#"},"fffff"))),p["default"].createElement(P.Container,null,p["default"].createElement(v["default"],{bookEntities:t.slice(0,6),title:"新书速递",moreLink:"/browse"})))}}],[{key:"fetchData",value:function(e){var t=e.store;return t.dispatch((0,y.fetchBooks)())}}]),t}(f.Component);x=R([(0,E["default"])(M)],x),t["default"]=(0,d.connect)(a,{fetchBooks:y.fetchBooks,fetchCollections:y.fetchCollections,sendNotification:y.sendNotification})(x)},160:function(e,t,n){"use strict";function o(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t["default"]=e,t}Object.defineProperty(t,"__esModule",{value:!0}),t.common=t.usersSelector=t.booksSelector=t.booksSearchAsOptions=t.authorsAsOptions=t.doubanBooksAsOptions=t.searchBooksSelector=t.queryAuthorsSelector=t.queryDoubanBooksSelector=void 0;var r=n(161);Object.keys(r).forEach(function(e){"default"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return r[e]}})});var i=n(162),u=o(r),l=t.queryDoubanBooksSelector=function(e){return(0,i.createSelector)((0,r.selectPaginatedEntities)({entitiesName:"doubanBooks",paginationName:"doubanBooks",paginationQuery:e}),function(e){return e})},a=t.queryAuthorsSelector=function(e){return(0,r.selectPaginatedEntities)({entitiesName:"authors",paginationName:"authors",paginationQuery:e})},c=t.searchBooksSelector=function(e){return(0,r.selectPaginatedEntities)({entitiesName:"books",paginationName:"books",paginationQuery:e})};t.doubanBooksAsOptions=function(e){return(0,i.createSelector)(l(e),function(e){return e.map(function(e){return{name:e.title,value:e.id,additional:{description:e.summary,cover:e.images.large,author:e.author.join(", ")}}})})},t.authorsAsOptions=function(e){return(0,i.createSelector)(a(e),function(e){return e.map(function(e){return{name:e.name,value:e.id}})})},t.booksSearchAsOptions=function(e){return(0,i.createSelector)(c(e),function(e){return e.map(function(e){return{name:e.title,value:e.id}})})},t.booksSelector=(0,i.createSelector)((0,r.selectPaginatedEntities)({entitiesName:"books",paginationName:"books",paginationKey:"default"}),function(e){return e}),t.usersSelector=(0,r.selectPaginatedEntities)({entitiesName:"users",paginationName:"users",paginationKey:"default"});t.common=u},161:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.selectPaginatedEntities=t.paginationLinkSelector=void 0;var r=n(162),i=n(18),u=o(i),l=function(e){return function(t){return t.entities[e]||{}}},a=function(e){var t=arguments.length<=1||void 0===arguments[1]?"default":arguments[1];return function(n){return u["default"].get(n.pagination,e+"."+t+".ids",[])}},c=(t.paginationLinkSelector=function(e){var t=arguments.length<=1||void 0===arguments[1]?"default":arguments[1];return function(n){return u["default"].pick(u["default"].get(n.pagination,e+"."+t,{}),["next","last"])}},function(e,t){return function(n){return u["default"].get(n.pagination,[e,"query",t,"ids"],[])}});t.selectPaginatedEntities=function(e){var t=e.entitiesName,n=e.paginationName,o=e.paginationKey,i=e.paginationQuery,u=void 0;return u=i?c(n,i):a(n,o),(0,r.createSelector)(l(t),u,function(e,t){return t.map(function(t){return e[t]})})}},162:function(e,t){"use strict";function n(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function o(e,t){return e===t}function r(e){var t=arguments.length<=1||void 0===arguments[1]?o:arguments[1],n=null,r=null;return function(){for(var o=arguments.length,i=Array(o),u=0;o>u;u++)i[u]=arguments[u];return null!==n&&n.length===i.length&&i.every(function(e,o){return t(e,n[o])})?r:(r=e.apply(void 0,i),n=i,r)}}function i(e){var t=Array.isArray(e[0])?e[0]:e;if(!t.every(function(e){return"function"==typeof e})){var n=t.map(function(e){return typeof e}).join(", ");throw new Error("Selector creators expect all input-selectors to be functions, "+("instead received the following types: ["+n+"]"))}return t}function u(e){for(var t=arguments.length,o=Array(t>1?t-1:0),r=1;t>r;r++)o[r-1]=arguments[r];return function(){for(var t=arguments.length,r=Array(t),u=0;t>u;u++)r[u]=arguments[u];var l=0,a=r.pop(),c=i(r),s=e.apply(void 0,[function(){return l++,a.apply(void 0,arguments)}].concat(o)),f=function(e,t){for(var o=arguments.length,r=Array(o>2?o-2:0),i=2;o>i;i++)r[i-2]=arguments[i];var u=c.map(function(n){return n.apply(void 0,[e,t].concat(r))});return s.apply(void 0,n(u))};return f.resultFunc=a,f.recomputations=function(){return l},f.resetRecomputations=function(){return l=0},f}}function l(){return u(r).apply(void 0,arguments)}function a(e){var t=arguments.length<=1||void 0===arguments[1]?l:arguments[1];if("object"!=typeof e)throw new Error("createStructuredSelector expects first argument to be an object where each property is a selector, instead received a "+typeof e);var n=Object.keys(e);return t(n.map(function(t){return e[t]}),function(){for(var e=arguments.length,t=Array(e),o=0;e>o;o++)t[o]=arguments[o];return t.reduce(function(e,t,o){return e[n[o]]=t,e},{})})}t.__esModule=!0,t.defaultMemoize=r,t.createSelectorCreator=u,t.createSelector=l,t.createStructuredSelector=a},163:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var r=n(164),i=o(r);t["default"]=i["default"]},164:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},c=n(3),s=o(c),f=n(4),p=n(165),d=o(p),y=n(82),h=o(y),b=n(78),m=o(b),v=function(e,t,n,o){var r,i=arguments.length,u=3>i?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"===("undefined"==typeof Reflect?"undefined":a(Reflect))&&"function"==typeof Reflect.decorate)u=Reflect.decorate(e,t,n,o);else for(var l=e.length-1;l>=0;l--)(r=e[l])&&(u=(3>i?r(u):i>3?r(t,n,u):r(t,n))||u);return i>3&&u&&Object.defineProperty(t,n,u),u},g=n(184),_=function(e){function t(){return r(this,t),i(this,Object.getPrototypeOf(t).apply(this,arguments))}return u(t,e),l(t,[{key:"render",value:function(){var e=this.props.title,t=this.props.moreLink?this.props.moreLink:null;return s["default"].createElement("div",{styleName:"book-list-section"},this.props.title&&(t?s["default"].createElement("h2",{styleName:"section-title"},s["default"].createElement(f.Link,{to:t},e,s["default"].createElement(m["default"],{name:"arrowRight",size:20}))):s["default"].createElement("h2",{styleName:"section-title"},e)),s["default"].createElement(d["default"],{bookEntities:this.props.bookEntities}))}}]),t}(c.Component);_=v([(0,h["default"])(g,{allowMultiple:!0})],_),t["default"]=_},165:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var r=n(166),i=o(r);t["default"]=i["default"]},166:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},c=n(3),s=o(c),f=n(167),p=o(f),d=n(82),y=o(d),h=function(e,t,n,o){var r,i=arguments.length,u=3>i?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"===("undefined"==typeof Reflect?"undefined":a(Reflect))&&"function"==typeof Reflect.decorate)u=Reflect.decorate(e,t,n,o);else for(var l=e.length-1;l>=0;l--)(r=e[l])&&(u=(3>i?r(u):i>3?r(t,n,u):r(t,n))||u);return i>3&&u&&Object.defineProperty(t,n,u),u},b=n(183),m=function(e){function t(){return r(this,t),i(this,Object.getPrototypeOf(t).apply(this,arguments))}return u(t,e),l(t,[{key:"render",value:function(){return s["default"].createElement("ul",{styleName:"book-list",className:"clearfix"},this.props.bookEntities&&0!==this.props.bookEntities.length?this.props.bookEntities.map(function(e,t){var n=e.title,o=e.authors,r=e.description,i=e.cover;return s["default"].createElement("li",{key:t},s["default"].createElement(p["default"],{id:e.id,title:n||"无标题",authors:o&&o.map(function(e){return e.name}).join(", ")||"未知作者",description:r,cover:i,disablePopup:!0}))}):s["default"].createElement("li",null,"暂无记录"))}}]),t}(c.Component);m=h([(0,y["default"])(b)],m),t["default"]=m},167:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var r=n(168),i=o(r);t["default"]=i["default"]},168:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},c=n(3),s=o(c),f=n(4),p=n(169),d=o(p),y=n(82),h=o(y),b=function(e,t,n,o){var r,i=arguments.length,u=3>i?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"===("undefined"==typeof Reflect?"undefined":a(Reflect))&&"function"==typeof Reflect.decorate)u=Reflect.decorate(e,t,n,o);else for(var l=e.length-1;l>=0;l--)(r=e[l])&&(u=(3>i?r(u):i>3?r(t,n,u):r(t,n))||u);return i>3&&u&&Object.defineProperty(t,n,u),u},m=n(182),v=function(e){function t(e){r(this,t);var n=i(this,Object.getPrototypeOf(t).call(this,e));return n.state={showPopup:!1},n.showPopup=n.showPopup.bind(n),n.hidePopup=n.hidePopup.bind(n),n}return u(t,e),l(t,[{key:"showPopup",value:function(){this.setState({showPopup:!0})}},{key:"hidePopup",value:function(){this.setState({showPopup:!1})}},{key:"render",value:function(){var e=this.props,t=e.showDesc,n=e.description,o=e.cover;return s["default"].createElement("div",{onMouseEnter:this.showPopup,onMouseLeave:this.hidePopup,styleName:"book--card"},s["default"].createElement(f.Link,{to:"/book/"+this.props.id},o&&s["default"].createElement("div",{styleName:"book-cover"},s["default"].createElement("img",{src:this.props.cover})),s["default"].createElement("div",{styleName:"book-meta"},s["default"].createElement("span",{title:this.props.title,styleName:"book-name"},this.props.title||"无标题"),s["default"].createElement("span",{styleName:"book-author"},this.props.authors||"作者不详"),t&&s["default"].createElement("span",{styleName:"book-desc"},n||"空"))),this.state.showPopup&&!this.props.disablePopup&&s["default"].createElement(d["default"],{bookId:this.props.id,title:this.props.title,author:this.props.authors,description:this.props.description}))}}]),t}(c.Component);v=b([(0,h["default"])(m,{allowMultiple:!0})],v),t["default"]=v},169:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var r=n(170),i=o(r);t["default"]=i["default"]},170:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},c=n(3),s=o(c),f=n(171),p=n(82),d=o(p),y=function(e,t,n,o){var r,i=arguments.length,u=3>i?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"===("undefined"==typeof Reflect?"undefined":a(Reflect))&&"function"==typeof Reflect.decorate)u=Reflect.decorate(e,t,n,o);else for(var l=e.length-1;l>=0;l--)(r=e[l])&&(u=(3>i?r(u):i>3?r(t,n,u):r(t,n))||u);return i>3&&u&&Object.defineProperty(t,n,u),u},h=n(181),b=function(e){function t(e){return r(this,t),i(this,Object.getPrototypeOf(t).call(this,e))}return u(t,e),l(t,[{key:"render",value:function(){var e=this.props,t=e.author,n=e.title,o=e.description,r=e.bookId;return s["default"].createElement("div",{styleName:"popup"},s["default"].createElement("div",{styleName:"header"},s["default"].createElement("h2",{styleName:"title"},n),s["default"].createElement("p",{styleName:"author"},t),s["default"].createElement(f.Button,{color:"blue",to:"/viewer/book/"+r},"阅读")),s["default"].createElement("div",{styleName:"description"},s["default"].createElement("p",null,o)))}}]),t}(c.Component);b=y([(0,d["default"])(h,{allowMultiple:!0})],b),t["default"]=b},171:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0}),t.Textarea=t.SelectizeInput=t.Input=t.Button=void 0;var r=n(96),i=o(r),u=n(172),l=o(u),a=n(175),c=o(a),s=n(178),f=o(s);t.Button=i["default"],t.Input=l["default"],t.SelectizeInput=c["default"],t.Textarea=f["default"]},172:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var r=n(173),i=o(r);t["default"]=i["default"]},173:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},c=n(3),s=o(c),f=n(82),p=o(f),d=function(e,t,n,o){var r,i=arguments.length,u=3>i?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"===("undefined"==typeof Reflect?"undefined":a(Reflect))&&"function"==typeof Reflect.decorate)u=Reflect.decorate(e,t,n,o);else for(var l=e.length-1;l>=0;l--)(r=e[l])&&(u=(3>i?r(u):i>3?r(t,n,u):r(t,n))||u);return i>3&&u&&Object.defineProperty(t,n,u),u},y=n(174),h=function(e){function t(e){return r(this,t),i(this,Object.getPrototypeOf(t).call(this,e))}return u(t,e),l(t,[{key:"render",value:function(){var e=this,t=Object.assign({},this.props);return delete t.className,s["default"].createElement("div",{styleName:"input-wrap",className:this.props.className||""},s["default"].createElement("input",{styleName:"input",placeholder:this.props.placeholder,value:this.props.value,onChange:function(t){e.props.onChange(t)},type:this.props.type?this.props.type:"text",name:this.props.name?this.props.name:null}))}}]),t}(c.Component);h=d([(0,p["default"])(y,{allowMultiple:!0})],h),t["default"]=h},174:function(e,t){e.exports={"input-wrap":"input-wrap_3dHA3",input:"input_2juBO"}},175:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var r=n(176),i=o(r);t["default"]=i["default"]},176:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},c=n(3),s=o(c),f=n(78),p=o(f),d=n(80),y=o(d),h=n(82),b=o(h),m=n(108),v=o(m),g=function(e,t,n,o){var r,i=arguments.length,u=3>i?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"===("undefined"==typeof Reflect?"undefined":a(Reflect))&&"function"==typeof Reflect.decorate)u=Reflect.decorate(e,t,n,o);else for(var l=e.length-1;l>=0;l--)(r=e[l])&&(u=(3>i?r(u):i>3?r(t,n,u):r(t,n))||u);return i>3&&u&&Object.defineProperty(t,n,u),u},_=n(177),O=function(e){function t(e){r(this,t);var n=i(this,Object.getPrototypeOf(t).call(this,e));return n.state={showOptions:!1,focus:!1,value:"",expendedOptionIndex:0},n.handleOutsideClick=n.handleOutsideClick.bind(n),n.focusInput=n.focusInput.bind(n),n.handleInputWrapClick=n.handleInputWrapClick.bind(n),n}return u(t,e),l(t,[{key:"addValue",value:function(e){this.props.onValuesChange(this.props.values.concat(e)),this.props.onOptionsChange&&this.props.onOptionsChange(this.props.options.map(function(t){return t.value===e.value?Object.assign({},t,{disabled:!0}):t})),this.clearInputValue(),"undefined"!=typeof this.props.stayFocused&&this.props.stayFocused===!1||this.focusInput(),this.setState({showOptions:!1})}},{key:"removeValue",value:function(e){var t=[],n=void 0;-1===e?(t=this.props.values.slice(0,this.props.values.length-1),n=this.props.values[this.props.values.length-1].value):t=this.props.values.filter(function(t,o){return n=t.value,o!==e}),this.props.onOptionsChange&&this.props.onOptionsChange(this.props.options.map(function(e){return e.value===n?Object.assign({},e,{disabled:!1}):e})),this.props.onValuesChange(t)}},{key:"clearInputValue",value:function(){this.props.onInputChange("")}},{key:"handleKeyPress",value:function(e){8!==e.keyCode||this.props.value||this.removeValue(-1)}},{key:"focusInput",value:function(){this.input.focus()}},{key:"handleOutsideClick",value:function(e){(0,v["default"])(this.inputWrap,e.target)||this.setState({showOptions:!1})}},{key:"handleInputWrapClick",value:function(){this.focusInput(),this.setState({showOptions:!0})}},{key:"componentDidMount",value:function(){window.addEventListener("click",this.handleOutsideClick)}},{key:"componentWillUnmount",value:function(){window.removeEventListener("click",this.handleOutsideClick)}},{key:"render",value:function(){var e=this,t=this.props,n=t.label,o=t.values,r=t.onAddNewValue,i=this.props.value||"",u=this.props.options||[],l=o.length>0?0===i.length?16:16*i.length:"100%",a=o.length>0?"":this.props.placeholder,c=(0,y["default"])({"selectize-input":!0,"selectize-input--focus":this.state.focus,"selectize-input--empty":0===o.length});return s["default"].createElement("div",{styleName:"selectize-wrap",className:this.props.className||""},n?s["default"].createElement("label",{className:"form-label"},n):null,s["default"].createElement("div",{styleName:c,onClick:this.handleInputWrapClick,ref:function(t){e.inputWrap=t}},o.map(function(t,n){return s["default"].createElement("span",{key:n,styleName:"selectize-tag"},t.name,s["default"].createElement(p["default"],{styleName:"icon-remove",size:20,name:"close",onClick:function(t){e.removeValue(n)}}))}),s["default"].createElement("input",{style:{width:l},ref:function(t){e.input=t},value:i,placeholder:a,onBlur:function(t){e.setState({focus:!1})},onFocus:function(t){e.setState({focus:!0})},onChange:function(t){e.props.onInputChange(t.target.value)},onKeyDown:function(t){e.handleKeyPress(t)}})),this.state.showOptions&&(0!==u.length||r)?s["default"].createElement("ul",{styleName:"query-results"},u.map(function(t,n){return t.disabled?s["default"].createElement("li",{key:n,className:"disabled"},t.name):s["default"].createElement("li",{key:n,onClick:function(n){e.addValue(t),e.props.onOptionClick&&e.props.onOptionClick(t)}},s["default"].createElement("span",null,t.name))}),r?s["default"].createElement("li",{onClick:function(t){r(e.props.value)},className:"add"},"添加 ",s["default"].createElement("strong",null,this.props.value)):null):null)}}]),t}(c.Component);O=g([(0,b["default"])(_,{allowMultiple:!0})],O),t["default"]=O},177:function(e,t){e.exports={"selectize-wrap":"selectize-wrap_3AMAi","selectize-input":"selectize-input_14bgP","selectize-input--focus":"selectize-input--focus_UnZ8B","selectize-input--empty":"selectize-input--empty_xn7Uy","query-results":"query-results_OgE2t","selectize-tag":"selectize-tag_3aD13","icon-remove":"icon-remove_1O7F_"}},178:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var r=n(179),i=o(r);t["default"]=i["default"]},179:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},c=n(3),s=o(c),f=n(82),p=o(f),d=function(e,t,n,o){var r,i=arguments.length,u=3>i?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"===("undefined"==typeof Reflect?"undefined":a(Reflect))&&"function"==typeof Reflect.decorate)u=Reflect.decorate(e,t,n,o);else for(var l=e.length-1;l>=0;l--)(r=e[l])&&(u=(3>i?r(u):i>3?r(t,n,u):r(t,n))||u);return i>3&&u&&Object.defineProperty(t,n,u),u},y=n(180),h=function(e){function t(e){return r(this,t),i(this,Object.getPrototypeOf(t).call(this,e))}return u(t,e),l(t,[{key:"render",value:function(){var e=this;return s["default"].createElement("div",{styleName:"textarea-wrap",className:this.props.className||""},s["default"].createElement("textarea",{placeholder:this.props.placeholder,value:this.props.value,onChange:function(t){e.props.onChange(t)},styleName:"textarea",type:this.props.type?this.props.type:"text",name:this.props.name?this.props.name:null}))}}]),t}(c.Component);h=d([(0,p["default"])(y,{allowMultiple:!0})],h),t["default"]=h},180:function(e,t){e.exports={"textarea-wrap":"textarea-wrap_Xkpj1 input-wrap_3dHA3",textarea:"textarea_1EdoS"}},181:function(e,t){e.exports={title:"title_BVO7e",popup:"popup_MPCqr",header:"header_1InIf",author:"author_28BiA",description:"description_D9rVN"}},182:function(e,t){e.exports={"meta-item":"meta-item_2cRyJ",book:"book_3Oqz_","book-meta":"book-meta_3glcZ","book-name":"book-name_2jIuZ meta-item_2cRyJ","book-author":"book-author_1VM7e meta-item_2cRyJ","book-cover":"book-cover_1jrK8","book-desc":"book-desc_xFFKl","book--card":"book--card_3FOky book_3Oqz_"}},183:function(e,t){e.exports={"book-list":"book-list_2s_Jl"}},184:function(e,t){e.exports={"section-title":"section-title_2Kv3D","book-list-section":"book-list-section_2CfDe",more:"more_mgQHg"}},185:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e;
},c=n(3),s=o(c),f=n(82),p=o(f),d=function(e,t,n,o){var r,i=arguments.length,u=3>i?t:null===o?o=Object.getOwnPropertyDescriptor(t,n):o;if("object"===("undefined"==typeof Reflect?"undefined":a(Reflect))&&"function"==typeof Reflect.decorate)u=Reflect.decorate(e,t,n,o);else for(var l=e.length-1;l>=0;l--)(r=e[l])&&(u=(3>i?r(u):i>3?r(t,n,u):r(t,n))||u);return i>3&&u&&Object.defineProperty(t,n,u),u},y=n(186),h=function(e){function t(e){return r(this,t),i(this,Object.getPrototypeOf(t).call(this,e))}return u(t,e),l(t,[{key:"componentDidMount",value:function(){}},{key:"render",value:function(){return s["default"].createElement("div",{styleName:"dropdown"},s["default"].createElement("span",{styleName:"dropdown-toggle"},this.props.title," ",s["default"].createElement("span",{styleName:"dropdown-caret"})))}}]),t}(c.Component);h=d([(0,p["default"])(y)],h),t["default"]=h},186:function(e,t){e.exports={"dropdown-item":"dropdown-item_18QFA light-link_5hzvC","light-link":"light-link_5hzvC",dropdown:"dropdown_3EEwe","dropdown-toggle":"dropdown-toggle_3nQk9","dropdown-menu":"dropdown-menu_2yHgh","dropdown-caret":"dropdown-caret_t8dGY",sep:"sep_3xNmb","dropdown-menu--dark":"dropdown-menu--dark_2uZxh dropdown-menu_2yHgh"}},187:function(e,t){e.exports={"page-title":"page-title_Z366V","hero-image":"hero-image_14ZUX",logo:"logo_siT7A",btn:"btn_1dcmq"}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vMi4yLmpzIiwid2VicGFjazovLy9zcmMvaXNvbW9ycGhpYy9yb3V0ZXMvQXBwSG9tZS9BcHBIb21lLnRzeCIsIndlYnBhY2s6Ly8vc3JjL2lzb21vcnBoaWMvc3RvcmUvc2VsZWN0b3JzL2luZGV4LnRzIiwid2VicGFjazovLy9zcmMvaXNvbW9ycGhpYy9zdG9yZS9zZWxlY3RvcnMvY29tbW9uLnRzIiwid2VicGFjazovLy8uL34vcmVzZWxlY3QvbGliL2luZGV4LmpzIiwid2VicGFjazovLy9zcmMvaXNvbW9ycGhpYy9jb21wb25lbnRzL0Jvb2tMaXN0U2VjdGlvbi9pbmRleC50cyIsIndlYnBhY2s6Ly8vc3JjL2lzb21vcnBoaWMvY29tcG9uZW50cy9Cb29rTGlzdFNlY3Rpb24vQm9va0xpc3RTZWN0aW9uLnRzeCIsIndlYnBhY2s6Ly8vc3JjL2lzb21vcnBoaWMvY29tcG9uZW50cy9Cb29rTGlzdC9pbmRleC50cyIsIndlYnBhY2s6Ly8vc3JjL2lzb21vcnBoaWMvY29tcG9uZW50cy9Cb29rTGlzdC9Cb29rTGlzdC50c3giLCJ3ZWJwYWNrOi8vL3NyYy9pc29tb3JwaGljL2NvbXBvbmVudHMvQm9vay9pbmRleC50cyIsIndlYnBhY2s6Ly8vc3JjL2lzb21vcnBoaWMvY29tcG9uZW50cy9Cb29rL0Jvb2sudHN4Iiwid2VicGFjazovLy9zcmMvaXNvbW9ycGhpYy9jb21wb25lbnRzL0Jvb2tJbmZvUG9wdXAvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vL3NyYy9pc29tb3JwaGljL2NvbXBvbmVudHMvQm9va0luZm9Qb3B1cC9Cb29rSW5mb1BvcHVwLnRzeCIsIndlYnBhY2s6Ly8vc3JjL2lzb21vcnBoaWMvZWxlbWVudHMvX2Zvcm0vaW5kZXgudHMiLCJ3ZWJwYWNrOi8vL3NyYy9pc29tb3JwaGljL2VsZW1lbnRzL19mb3JtL0lucHV0L2luZGV4LnRzIiwid2VicGFjazovLy9zcmMvaXNvbW9ycGhpYy9lbGVtZW50cy9fZm9ybS9JbnB1dC9JbnB1dC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2lzb21vcnBoaWMvZWxlbWVudHMvX2Zvcm0vSW5wdXQvSW5wdXQuY3NzIiwid2VicGFjazovLy9zcmMvaXNvbW9ycGhpYy9lbGVtZW50cy9fZm9ybS9TZWxlY3RpemVJbnB1dC9pbmRleC50cyIsIndlYnBhY2s6Ly8vc3JjL2lzb21vcnBoaWMvZWxlbWVudHMvX2Zvcm0vU2VsZWN0aXplSW5wdXQvU2VsZWN0aXplSW5wdXQudHN4Iiwid2VicGFjazovLy8uL3NyYy9pc29tb3JwaGljL2VsZW1lbnRzL19mb3JtL1NlbGVjdGl6ZUlucHV0L1NlbGVjdGl6ZUlucHV0LnNjc3MiLCJ3ZWJwYWNrOi8vL3NyYy9pc29tb3JwaGljL2VsZW1lbnRzL19mb3JtL1RleHRhcmVhL2luZGV4LnRzIiwid2VicGFjazovLy9zcmMvaXNvbW9ycGhpYy9lbGVtZW50cy9fZm9ybS9UZXh0YXJlYS9UZXh0YXJlYS50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2lzb21vcnBoaWMvZWxlbWVudHMvX2Zvcm0vVGV4dGFyZWEvVGV4dGFyZWEuY3NzIiwid2VicGFjazovLy8uL3NyYy9pc29tb3JwaGljL2NvbXBvbmVudHMvQm9va0luZm9Qb3B1cC9Cb29rSW5mb1BvcHVwLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2lzb21vcnBoaWMvY29tcG9uZW50cy9Cb29rL19ib29rLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2lzb21vcnBoaWMvY29tcG9uZW50cy9Cb29rTGlzdC9Cb29rTGlzdC5zY3NzIiwid2VicGFjazovLy8uL3NyYy9pc29tb3JwaGljL2NvbXBvbmVudHMvQm9va0xpc3RTZWN0aW9uL0Jvb2tMaXN0U2VjdGlvbi5zY3NzIiwid2VicGFjazovLy9zcmMvaXNvbW9ycGhpYy9lbGVtZW50cy9IZWhlLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvaXNvbW9ycGhpYy9lbGVtZW50cy9IZWhlLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2lzb21vcnBoaWMvcm91dGVzL0FwcEhvbWUvQXBwSG9tZS5zY3NzIl0sIm5hbWVzIjpbIndlYnBhY2tKc29ucCIsMTU5LCJtb2R1bGUiLCJleHBvcnRzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwib2JqIiwiX19lc01vZHVsZSIsIm5ld09iaiIsImtleSIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJkZWZhdWx0IiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwibWFwU3RhdGVUb1Byb3BzIiwic3RhdGUiLCJvd25Qcm9wcyIsInVzZXJCb29rcyIsIm5ld2VzdEJvb2tzIiwic2VsZWN0b3JzIiwiYm9va3NTZWxlY3RvciIsInNlc3Npb24iLCJib29rQ29sbGVjdGlvbnMiLCJfbG9kYXNoMiIsImdldCIsInBhZ2luYXRpb24iLCJpZHMiLCJtYXAiLCJpZCIsImVudGl0aWVzIiwiYm9va1NoZWxmIiwicGF5bG9hZHMiLCJkZWZpbmVQcm9wZXJ0eSIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImkiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX3R5cGVvZiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiX3JlYWN0IiwiX3JlYWN0MiIsIl9yZWFjdFJlZHV4IiwiX2FjdGlvbnMiLCJfc2VsZWN0b3JzIiwiX0Jvb2tMaXN0U2VjdGlvbiIsIl9Cb29rTGlzdFNlY3Rpb24yIiwiX0RvY0NvbnRhaW5lciIsIl9Eb2NDb250YWluZXIyIiwiX2Zvcm0iLCJfbG9kYXNoIiwiX3JlYWN0Q3NzTW9kdWxlcyIsIl9yZWFjdENzc01vZHVsZXMyIiwiX2xheW91dCIsIl9IZWhlIiwiX0hlaGUyIiwiX0Ryb3Bkb3duIiwiX19kZWNvcmF0ZSIsImRlY29yYXRvcnMiLCJkZXNjIiwiZCIsImMiLCJhcmd1bWVudHMiLCJyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiUmVmbGVjdCIsImRlY29yYXRlIiwic3R5bGVzIiwiSG9tZSIsIl9Db21wb25lbnQiLCJ0aGlzIiwiX3RoaXMiLCJnZXRQcm90b3R5cGVPZiIsInNob3dSZWNlbnRSZWFkaW5nIiwiZmV0Y2hCb29rcyIsImZldGNoQ29sbGVjdGlvbnMiLCJuZXh0UHJvcHMiLCJpc0ZldGNoaW5nIiwidXNlciIsInJvbGUiLCJzZXRTdGF0ZSIsIl9wcm9wcyIsIml0ZW0iLCJuYW1lIiwiYm9va0NvdmVycyIsIml0ZW1zIiwiYm9vayIsImNvdmVyIiwiZGVzY3JpcHRpb24iLCJjcmVhdGVFbGVtZW50IiwiYm9keUNsYXNzIiwic3R5bGVOYW1lIiwiQ29udGFpbmVyIiwiQnV0dG9uIiwidG8iLCJ0aXRsZSIsIkRyb3Bkb3duIiwic3R5bGUiLCJkaXNwbGF5IiwiRHJvcGRvd25JdGVtIiwiaHJlZiIsImJvb2tFbnRpdGllcyIsInNsaWNlIiwibW9yZUxpbmsiLCJfcmVmIiwic3RvcmUiLCJkaXNwYXRjaCIsIkNvbXBvbmVudCIsImNvbm5lY3QiLCJzZW5kTm90aWZpY2F0aW9uIiwxNjAsImNvbW1vbiIsInVzZXJzU2VsZWN0b3IiLCJib29rc1NlYXJjaEFzT3B0aW9ucyIsImF1dGhvcnNBc09wdGlvbnMiLCJkb3ViYW5Cb29rc0FzT3B0aW9ucyIsInNlYXJjaEJvb2tzU2VsZWN0b3IiLCJxdWVyeUF1dGhvcnNTZWxlY3RvciIsInF1ZXJ5RG91YmFuQm9va3NTZWxlY3RvciIsInVuZGVmaW5lZCIsIl9jb21tb24iLCJrZXlzIiwiZm9yRWFjaCIsIl9yZXNlbGVjdCIsInF1ZXJ5IiwiY3JlYXRlU2VsZWN0b3IiLCJzZWxlY3RQYWdpbmF0ZWRFbnRpdGllcyIsImVudGl0aWVzTmFtZSIsInBhZ2luYXRpb25OYW1lIiwicGFnaW5hdGlvblF1ZXJ5IiwiYm9va3MiLCJhZGRpdGlvbmFsIiwic3VtbWFyeSIsImltYWdlcyIsImxhcmdlIiwiYXV0aG9yIiwiam9pbiIsInBhZ2luYXRpb25LZXkiLDE2MSwicGFnaW5hdGlvbkxpbmtTZWxlY3RvciIsImVudGl0aWVzU2VsZWN0b3IiLCJwYWdpbmF0aW9uU2VsZWN0b3IiLCJxdWVyeVBhZ2luYXRpb25TZWxlY3RvciIsInBpY2siLCJvcHRpb25zIiwicGFnaVNlbGVjdG9yIiwxNjIsIl90b0NvbnN1bWFibGVBcnJheSIsImFyciIsIkFycmF5IiwiaXNBcnJheSIsImFycjIiLCJmcm9tIiwiZGVmYXVsdEVxdWFsaXR5Q2hlY2siLCJhIiwiYiIsImRlZmF1bHRNZW1vaXplIiwiZnVuYyIsImVxdWFsaXR5Q2hlY2siLCJsYXN0QXJncyIsImxhc3RSZXN1bHQiLCJfbGVuIiwiYXJncyIsIl9rZXkiLCJldmVyeSIsImluZGV4IiwiYXBwbHkiLCJnZXREZXBlbmRlbmNpZXMiLCJmdW5jcyIsImRlcGVuZGVuY2llcyIsImRlcCIsImRlcGVuZGVuY3lUeXBlcyIsIkVycm9yIiwiY3JlYXRlU2VsZWN0b3JDcmVhdG9yIiwibWVtb2l6ZSIsIl9sZW4yIiwibWVtb2l6ZU9wdGlvbnMiLCJfa2V5MiIsIl9sZW4zIiwiX2tleTMiLCJyZWNvbXB1dGF0aW9ucyIsInJlc3VsdEZ1bmMiLCJwb3AiLCJtZW1vaXplZFJlc3VsdEZ1bmMiLCJjb25jYXQiLCJzZWxlY3RvciIsIl9sZW40IiwiX2tleTQiLCJwYXJhbXMiLCJkZXBlbmRlbmN5IiwicmVzZXRSZWNvbXB1dGF0aW9ucyIsImNyZWF0ZVN0cnVjdHVyZWRTZWxlY3RvciIsInNlbGVjdG9yQ3JlYXRvciIsIm9iamVjdEtleXMiLCJfbGVuNSIsInZhbHVlcyIsIl9rZXk1IiwicmVkdWNlIiwiY29tcG9zaXRpb24iLDE2MywxNjQsIl9yZWFjdFJvdXRlciIsIl9Cb29rTGlzdCIsIl9Cb29rTGlzdDIiLCJfSWNvbiIsIl9JY29uMiIsIkJvb2tMaXN0U2VjdGlvbiIsIkxpbmsiLCJzaXplIiwiYWxsb3dNdWx0aXBsZSIsMTY1LDE2NiwiX0Jvb2siLCJfQm9vazIiLCJCb29rTGlzdCIsImNsYXNzTmFtZSIsImF1dGhvcnMiLCJkaXNhYmxlUG9wdXAiLDE2NywxNjgsIl9Cb29rSW5mb1BvcHVwIiwiX0Jvb2tJbmZvUG9wdXAyIiwiQm9vayIsInNob3dQb3B1cCIsImJpbmQiLCJoaWRlUG9wdXAiLCJzaG93RGVzYyIsIm9uTW91c2VFbnRlciIsIm9uTW91c2VMZWF2ZSIsInNyYyIsImJvb2tJZCIsMTY5LDE3MCwiQm9va0luZm9Qb3B1cCIsImNvbG9yIiwxNzEsIlRleHRhcmVhIiwiU2VsZWN0aXplSW5wdXQiLCJJbnB1dCIsIl9CdXR0b24iLCJfQnV0dG9uMiIsIl9JbnB1dCIsIl9JbnB1dDIiLCJfU2VsZWN0aXplSW5wdXQiLCJfU2VsZWN0aXplSW5wdXQyIiwiX1RleHRhcmVhIiwiX1RleHRhcmVhMiIsMTcyLDE3MywiX3RoaXMyIiwiYXNzaWduIiwicGxhY2Vob2xkZXIiLCJvbkNoYW5nZSIsImUiLCJ0eXBlIiwxNzQsImlucHV0LXdyYXAiLCJpbnB1dCIsMTc1LDE3NiwiX2NsYXNzbmFtZXMiLCJfY2xhc3NuYW1lczIiLCJfaXNEZXNjZW5kYW50IiwiX2lzRGVzY2VuZGFudDIiLCJzaG93T3B0aW9ucyIsImZvY3VzIiwiZXhwZW5kZWRPcHRpb25JbmRleCIsImhhbmRsZU91dHNpZGVDbGljayIsImZvY3VzSW5wdXQiLCJoYW5kbGVJbnB1dFdyYXBDbGljayIsIm5ld1ZhbHVlIiwib25WYWx1ZXNDaGFuZ2UiLCJvbk9wdGlvbnNDaGFuZ2UiLCJvcHRpb24iLCJkaXNhYmxlZCIsImNsZWFySW5wdXRWYWx1ZSIsInN0YXlGb2N1c2VkIiwibmV3VmFsdWVzIiwicmVtb3ZlZFZhbHVlIiwiZmlsdGVyIiwidiIsIm9uSW5wdXRDaGFuZ2UiLCJrZXlDb2RlIiwicmVtb3ZlVmFsdWUiLCJpbnB1dFdyYXAiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImxhYmVsIiwib25BZGROZXdWYWx1ZSIsImlucHV0V2lkdGgiLCJzZWxlY3RpemVJbnB1dFN0eWxlTmFtZSIsInNlbGVjdGl6ZS1pbnB1dCIsInNlbGVjdGl6ZS1pbnB1dC0tZm9jdXMiLCJzZWxlY3RpemUtaW5wdXQtLWVtcHR5Iiwib25DbGljayIsInJlZiIsIndpZHRoIiwiX3JlZjIiLCJvbkJsdXIiLCJvbkZvY3VzIiwib25LZXlEb3duIiwiaGFuZGxlS2V5UHJlc3MiLCJhZGRWYWx1ZSIsIm9uT3B0aW9uQ2xpY2siLDE3Nywic2VsZWN0aXplLXdyYXAiLCJxdWVyeS1yZXN1bHRzIiwic2VsZWN0aXplLXRhZyIsImljb24tcmVtb3ZlIiwxNzgsMTc5LDE4MCwidGV4dGFyZWEtd3JhcCIsInRleHRhcmVhIiwxODEsInBvcHVwIiwiaGVhZGVyIiwxODIsIm1ldGEtaXRlbSIsImJvb2stbWV0YSIsImJvb2stbmFtZSIsImJvb2stYXV0aG9yIiwiYm9vay1jb3ZlciIsImJvb2stZGVzYyIsImJvb2stLWNhcmQiLDE4MywiYm9vay1saXN0IiwxODQsInNlY3Rpb24tdGl0bGUiLCJib29rLWxpc3Qtc2VjdGlvbiIsIm1vcmUiLDE4NSwiQ29tcCIsMTg2LCJkcm9wZG93bi1pdGVtIiwibGlnaHQtbGluayIsImRyb3Bkb3duIiwiZHJvcGRvd24tdG9nZ2xlIiwiZHJvcGRvd24tbWVudSIsImRyb3Bkb3duLWNhcmV0Iiwic2VwIiwiZHJvcGRvd24tbWVudS0tZGFyayIsMTg3LCJwYWdlLXRpdGxlIiwiaGVyby1pbWFnZSIsImxvZ28iLCJidG4iXSwibWFwcGluZ3MiOiJBQUFBQSxjQUFjLElBRVJDLElBQ0EsU0FBU0MsRUFBUUMsRUFBU0MsR0FFL0IsWUFnREEsU0FBU0Ms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LElBQ1Q3VixJQUFLLG9CQUNMbUIsTUFBTyxlQUVQbkIsSUFBSyxTQUNMbUIsTUFBTyxXMkJwMUNMLE1BQ0xzQyxjQUFBZ0QsY0FBSSxPQUFVRSxVQUFXLFlBQ3ZCbEQsYUFBQWdELGNBQUssUUFBVUUsVUFBa0IsbUJBQzFCckIsS0FBTXZDLE1BQU9nRSxNQUFBLElBQUN0RCxhQUFBZ0QsY0FBSyxRQUFVRSxVQUszQyx5QkFsQjJCa1AsRzNCbzJDekJyUyxFQUFPbUUsVTJCcjJDVmtPLEdBQUFwUixJQUFXLEVBQUFMLGNBQVFlLElBcUJuQjBRLEczQmsxQ0NuVyxhMkJsMUNrQm1XLEczQnMxQ2JDLElBQ0EsU0FBU3JXLEVBQVFDLEc0QnQzQ3ZCRCxFQUFBQyxTQUFrQnFXLGdCQUFBLHVDQUFBQyxhQUFBLG1CQUFBQyxTQUFBLGlCQUFBQyxrQkFBQSx3QkFBQUMsZ0JBQUEsc0JBQUFDLGlCQUFBLHVCQUFBQyxJQUFBLFlBQUFDLHNCQUFBLGtENUI2M0NaQyxJQUNBLFNBQVM5VyxFQUFRQyxHNkI5M0N2QkQsRUFBQUMsU0FBa0I4VyxhQUFBLG1CQUFBQyxhQUFBLG1CQUFBQyxLQUFBLGFBQUFDLElBQUEiLCJmaWxlIjoiMi4yLmpzIiwic291cmNlc0NvbnRlbnQiOlsid2VicGFja0pzb25wKFsyXSx7XG5cbi8qKiovIDE1OTpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cdFxuXHR2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHRcblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cdFxuXHR2YXIgX3JlYWN0UmVkdXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXHRcblx0dmFyIF9hY3Rpb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0XG5cdHZhciBfc2VsZWN0b3JzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNjApO1xuXHRcblx0dmFyIHNlbGVjdG9ycyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9zZWxlY3RvcnMpO1xuXHRcblx0dmFyIF9Cb29rTGlzdFNlY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2Myk7XG5cdFxuXHR2YXIgX0Jvb2tMaXN0U2VjdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Cb29rTGlzdFNlY3Rpb24pO1xuXHRcblx0dmFyIF9Eb2NDb250YWluZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzNCk7XG5cdFxuXHR2YXIgX0RvY0NvbnRhaW5lcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Eb2NDb250YWluZXIpO1xuXHRcblx0dmFyIF9mb3JtID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNzEpO1xuXHRcblx0dmFyIF9sb2Rhc2ggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcblx0XG5cdHZhciBfbG9kYXNoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xvZGFzaCk7XG5cdFxuXHR2YXIgX3JlYWN0Q3NzTW9kdWxlcyA9IF9fd2VicGFja19yZXF1aXJlX18oODIpO1xuXHRcblx0dmFyIF9yZWFjdENzc01vZHVsZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3RDc3NNb2R1bGVzKTtcblx0XG5cdHZhciBfbGF5b3V0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDQpO1xuXHRcblx0dmFyIF9IZWhlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxODUpO1xuXHRcblx0dmFyIF9IZWhlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0hlaGUpO1xuXHRcblx0dmFyIF9Ecm9wZG93biA9IF9fd2VicGFja19yZXF1aXJlX18oMTA2KTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblx0XG5cdGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXHRcblx0ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cdFxuXHR2YXIgX19kZWNvcmF0ZSA9IHVuZGVmaW5lZCAmJiB1bmRlZmluZWQuX19kZWNvcmF0ZSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcblx0ICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCxcblx0ICAgICAgICByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYyxcblx0ICAgICAgICBkO1xuXHQgICAgaWYgKCh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKFJlZmxlY3QpKSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7ZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuXHQgICAgICAgIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG5cdCAgICB9cmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcblx0fTtcblx0XG5cdHZhciBzdHlsZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4Nyk7XG5cdFxuXHR2YXIgSG9tZSA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG5cdCAgICBfaW5oZXJpdHMoSG9tZSwgX0NvbXBvbmVudCk7XG5cdFxuXHQgICAgZnVuY3Rpb24gSG9tZShwcm9wcykge1xuXHQgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIb21lKTtcblx0XG5cdCAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgT2JqZWN0LmdldFByb3RvdHlwZU9mKEhvbWUpLmNhbGwodGhpcywgcHJvcHMpKTtcblx0XG5cdCAgICAgICAgX3RoaXMuc3RhdGUgPSB7XG5cdCAgICAgICAgICAgIHNob3dSZWNlbnRSZWFkaW5nOiBmYWxzZVxuXHQgICAgICAgIH07XG5cdCAgICAgICAgcmV0dXJuIF90aGlzO1xuXHQgICAgfVxuXHRcblx0ICAgIF9jcmVhdGVDbGFzcyhIb21lLCBbe1xuXHQgICAgICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcblx0ICAgICAgICAgICAgdGhpcy5wcm9wcy5mZXRjaEJvb2tzKCk7XG5cdCAgICAgICAgICAgIHRoaXMucHJvcHMuZmV0Y2hDb2xsZWN0aW9ucygpO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6IFwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc1wiLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5zZXNzaW9uLmlzRmV0Y2hpbmcgJiYgIW5leHRQcm9wcy5zZXNzaW9uLmlzRmV0Y2hpbmcpIHtcblx0ICAgICAgICAgICAgICAgIGlmIChuZXh0UHJvcHMuc2Vzc2lvbi51c2VyLnJvbGUgIT09ICd2aXNpdG9yJykge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBzaG93UmVjZW50UmVhZGluZzogdHJ1ZVxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogXCJyZW5kZXJcIixcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHQgICAgICAgICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcblx0ICAgICAgICAgICAgdmFyIG5ld2VzdEJvb2tzID0gX3Byb3BzLm5ld2VzdEJvb2tzO1xuXHQgICAgICAgICAgICB2YXIgYm9va0NvbGxlY3Rpb25zID0gX3Byb3BzLmJvb2tDb2xsZWN0aW9ucztcblx0XG5cdCAgICAgICAgICAgIGJvb2tDb2xsZWN0aW9ucyA9IGJvb2tDb2xsZWN0aW9ucy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgICAgICAgICAgbmFtZTogaXRlbS5uYW1lLFxuXHQgICAgICAgICAgICAgICAgICAgIGlkOiBpdGVtLmlkLFxuXHQgICAgICAgICAgICAgICAgICAgIGJvb2tDb3ZlcnM6IGl0ZW0uaXRlbXMubWFwKGZ1bmN0aW9uIChib29rKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBib29rLmNvdmVyO1xuXHQgICAgICAgICAgICAgICAgICAgIH0pLFxuXHQgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBpdGVtLmRlc2NyaXB0aW9uXG5cdCAgICAgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Eb2NDb250YWluZXIyLmRlZmF1bHQsIHsgYm9keUNsYXNzOiBcImhvbWVcIiB9LCB0aGlzLnByb3BzLnNlc3Npb24udXNlci5yb2xlID09PSAndmlzaXRvcicgJiYgdGhpcy5wcm9wcy5zZXNzaW9uLmlzRmV0Y2hpbmcgPT09IGZhbHNlID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBzdHlsZU5hbWU6IFwiaGVyby1pbWFnZVwiIH0sIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9sYXlvdXQuQ29udGFpbmVyLCBudWxsLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IHN0eWxlTmFtZTogXCJsb2dvXCIgfSwgXCJSZWFkclwiKSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJoMVwiLCB7IHN0eWxlTmFtZTogXCJwYWdlLXRpdGxlXCIgfSwgXCLmlrDnmoTpmIXor7vkvZPpqoxcIiksIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9mb3JtLkJ1dHRvbiwgeyB0bzogXCIvc2lnbnVwXCIgfSwgXCLnjrDlnKjliqDlhaVcIikpKSA6IG51bGwsIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9IZWhlMi5kZWZhdWx0LCB7IHRpdGxlOiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCBudWxsLCBcInd0ZjogXCIsIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBudWxsLCBcImhlaGhlaGVoZVwiKSkgfSksIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Ecm9wZG93bi5Ecm9wZG93biwgeyB0aXRsZTogX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBzdHlsZTogeyBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyB9IH0sIFwid3RmOiBcIiwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIG51bGwsIFwiaGVoaGVoZWhlXCIpKSB9LCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfRHJvcGRvd24uRHJvcGRvd25JdGVtLCBudWxsLCBcImZmZmZmXCIpLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfRHJvcGRvd24uRHJvcGRvd25JdGVtLCBudWxsLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImFcIiwgeyBocmVmOiBcIiNcIiB9LCBcImZmZmZmXCIpKSksIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9sYXlvdXQuQ29udGFpbmVyLCBudWxsLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfQm9va0xpc3RTZWN0aW9uMi5kZWZhdWx0LCB7IGJvb2tFbnRpdGllczogbmV3ZXN0Qm9va3Muc2xpY2UoMCwgNiksIHRpdGxlOiBcIuaWsOS5pumAn+mAklwiLCBtb3JlTGluazogXCIvYnJvd3NlXCIgfSkpKTtcblx0ICAgICAgICB9XG5cdCAgICB9XSwgW3tcblx0ICAgICAgICBrZXk6IFwiZmV0Y2hEYXRhXCIsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZldGNoRGF0YShfcmVmKSB7XG5cdCAgICAgICAgICAgIHZhciBzdG9yZSA9IF9yZWYuc3RvcmU7XG5cdFxuXHQgICAgICAgICAgICByZXR1cm4gc3RvcmUuZGlzcGF0Y2goKDAsIF9hY3Rpb25zLmZldGNoQm9va3MpKCkpO1xuXHQgICAgICAgIH1cblx0ICAgIH1dKTtcblx0XG5cdCAgICByZXR1cm4gSG9tZTtcblx0fShfcmVhY3QuQ29tcG9uZW50KTtcblx0SG9tZSA9IF9fZGVjb3JhdGUoWygwLCBfcmVhY3RDc3NNb2R1bGVzMi5kZWZhdWx0KShzdHlsZXMpXSwgSG9tZSk7XG5cdGZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpIHtcblx0ICAgIHJldHVybiB7XG5cdCAgICAgICAgdXNlckJvb2tzOiBbXSxcblx0ICAgICAgICBuZXdlc3RCb29rczogc2VsZWN0b3JzLmJvb2tzU2VsZWN0b3Ioc3RhdGUpLFxuXHQgICAgICAgIHNlc3Npb246IHN0YXRlLnNlc3Npb24sXG5cdCAgICAgICAgYm9va0NvbGxlY3Rpb25zOiBfbG9kYXNoMi5kZWZhdWx0LmdldChzdGF0ZS5wYWdpbmF0aW9uLCAnYm9va0NvbGxlY3Rpb25zLmRlZmF1bHQnLCBudWxsKSA/IHN0YXRlLnBhZ2luYXRpb24uYm9va0NvbGxlY3Rpb25zLmRlZmF1bHQuaWRzLm1hcChmdW5jdGlvbiAoaWQpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHN0YXRlLmVudGl0aWVzLmJvb2tDb2xsZWN0aW9uc1tpZF07XG5cdCAgICAgICAgfSkgOiBbXSxcblx0ICAgICAgICBib29rU2hlbGY6IF9sb2Rhc2gyLmRlZmF1bHQuZ2V0KHN0YXRlLnBheWxvYWRzLCAnYm9va1NoZWxmLmRhdGEnLCBbXSlcblx0ICAgIH07XG5cdH1cblx0ZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9yZWFjdFJlZHV4LmNvbm5lY3QpKG1hcFN0YXRlVG9Qcm9wcywgeyBmZXRjaEJvb2tzOiBfYWN0aW9ucy5mZXRjaEJvb2tzLCBmZXRjaENvbGxlY3Rpb25zOiBfYWN0aW9ucy5mZXRjaENvbGxlY3Rpb25zLCBzZW5kTm90aWZpY2F0aW9uOiBfYWN0aW9ucy5zZW5kTm90aWZpY2F0aW9uIH0pKEhvbWUpO1xuXG4vKioqLyB9LFxuXG4vKioqLyAxNjA6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLmNvbW1vbiA9IGV4cG9ydHMudXNlcnNTZWxlY3RvciA9IGV4cG9ydHMuYm9va3NTZWxlY3RvciA9IGV4cG9ydHMuYm9va3NTZWFyY2hBc09wdGlvbnMgPSBleHBvcnRzLmF1dGhvcnNBc09wdGlvbnMgPSBleHBvcnRzLmRvdWJhbkJvb2tzQXNPcHRpb25zID0gZXhwb3J0cy5zZWFyY2hCb29rc1NlbGVjdG9yID0gZXhwb3J0cy5xdWVyeUF1dGhvcnNTZWxlY3RvciA9IGV4cG9ydHMucXVlcnlEb3ViYW5Cb29rc1NlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcblx0dmFyIF9jb21tb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2MSk7XG5cdFxuXHRPYmplY3Qua2V5cyhfY29tbW9uKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0ICAgIGlmIChrZXkgPT09IFwiZGVmYXVsdFwiKSByZXR1cm47XG5cdCAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7XG5cdCAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcblx0ICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIF9jb21tb25ba2V5XTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0fSk7XG5cdFxuXHR2YXIgX3Jlc2VsZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNjIpO1xuXHRcblx0dmFyIGNvbW1vbiA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9jb21tb24pO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblx0XG5cdHZhciBxdWVyeURvdWJhbkJvb2tzU2VsZWN0b3IgPSBleHBvcnRzLnF1ZXJ5RG91YmFuQm9va3NTZWxlY3RvciA9IGZ1bmN0aW9uIHF1ZXJ5RG91YmFuQm9va3NTZWxlY3RvcihxdWVyeSkge1xuXHQgICAgcmV0dXJuICgwLCBfcmVzZWxlY3QuY3JlYXRlU2VsZWN0b3IpKCgwLCBfY29tbW9uLnNlbGVjdFBhZ2luYXRlZEVudGl0aWVzKSh7XG5cdCAgICAgICAgZW50aXRpZXNOYW1lOiAnZG91YmFuQm9va3MnLFxuXHQgICAgICAgIHBhZ2luYXRpb25OYW1lOiAnZG91YmFuQm9va3MnLFxuXHQgICAgICAgIHBhZ2luYXRpb25RdWVyeTogcXVlcnlcblx0ICAgIH0pLCBmdW5jdGlvbiAoYm9va3MpIHtcblx0ICAgICAgICByZXR1cm4gYm9va3M7XG5cdCAgICB9KTtcblx0fTtcblx0dmFyIHF1ZXJ5QXV0aG9yc1NlbGVjdG9yID0gZXhwb3J0cy5xdWVyeUF1dGhvcnNTZWxlY3RvciA9IGZ1bmN0aW9uIHF1ZXJ5QXV0aG9yc1NlbGVjdG9yKHF1ZXJ5KSB7XG5cdCAgICByZXR1cm4gKDAsIF9jb21tb24uc2VsZWN0UGFnaW5hdGVkRW50aXRpZXMpKHtcblx0ICAgICAgICBlbnRpdGllc05hbWU6ICdhdXRob3JzJyxcblx0ICAgICAgICBwYWdpbmF0aW9uTmFtZTogJ2F1dGhvcnMnLFxuXHQgICAgICAgIHBhZ2luYXRpb25RdWVyeTogcXVlcnlcblx0ICAgIH0pO1xuXHR9O1xuXHR2YXIgc2VhcmNoQm9va3NTZWxlY3RvciA9IGV4cG9ydHMuc2VhcmNoQm9va3NTZWxlY3RvciA9IGZ1bmN0aW9uIHNlYXJjaEJvb2tzU2VsZWN0b3IocXVlcnkpIHtcblx0ICAgIHJldHVybiAoMCwgX2NvbW1vbi5zZWxlY3RQYWdpbmF0ZWRFbnRpdGllcykoe1xuXHQgICAgICAgIGVudGl0aWVzTmFtZTogJ2Jvb2tzJyxcblx0ICAgICAgICBwYWdpbmF0aW9uTmFtZTogJ2Jvb2tzJyxcblx0ICAgICAgICBwYWdpbmF0aW9uUXVlcnk6IHF1ZXJ5XG5cdCAgICB9KTtcblx0fTtcblx0dmFyIGRvdWJhbkJvb2tzQXNPcHRpb25zID0gZXhwb3J0cy5kb3ViYW5Cb29rc0FzT3B0aW9ucyA9IGZ1bmN0aW9uIGRvdWJhbkJvb2tzQXNPcHRpb25zKHF1ZXJ5KSB7XG5cdCAgICByZXR1cm4gKDAsIF9yZXNlbGVjdC5jcmVhdGVTZWxlY3RvcikocXVlcnlEb3ViYW5Cb29rc1NlbGVjdG9yKHF1ZXJ5KSwgZnVuY3Rpb24gKGJvb2tzKSB7XG5cdCAgICAgICAgcmV0dXJuIGJvb2tzLm1hcChmdW5jdGlvbiAoYm9vaykge1xuXHQgICAgICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICAgICAgbmFtZTogYm9vay50aXRsZSxcblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBib29rLmlkLFxuXHQgICAgICAgICAgICAgICAgYWRkaXRpb25hbDoge1xuXHQgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBib29rLnN1bW1hcnksXG5cdCAgICAgICAgICAgICAgICAgICAgY292ZXI6IGJvb2suaW1hZ2VzLmxhcmdlLFxuXHQgICAgICAgICAgICAgICAgICAgIGF1dGhvcjogYm9vay5hdXRob3Iuam9pbignLCAnKVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgIH0pO1xuXHQgICAgfSk7XG5cdH07XG5cdHZhciBhdXRob3JzQXNPcHRpb25zID0gZXhwb3J0cy5hdXRob3JzQXNPcHRpb25zID0gZnVuY3Rpb24gYXV0aG9yc0FzT3B0aW9ucyhxdWVyeSkge1xuXHQgICAgcmV0dXJuICgwLCBfcmVzZWxlY3QuY3JlYXRlU2VsZWN0b3IpKHF1ZXJ5QXV0aG9yc1NlbGVjdG9yKHF1ZXJ5KSwgZnVuY3Rpb24gKGl0ZW1zKSB7XG5cdCAgICAgICAgcmV0dXJuIGl0ZW1zLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHQgICAgICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICAgICAgbmFtZTogaXRlbS5uYW1lLFxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGl0ZW0uaWRcblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICB9KTtcblx0ICAgIH0pO1xuXHR9O1xuXHR2YXIgYm9va3NTZWFyY2hBc09wdGlvbnMgPSBleHBvcnRzLmJvb2tzU2VhcmNoQXNPcHRpb25zID0gZnVuY3Rpb24gYm9va3NTZWFyY2hBc09wdGlvbnMocXVlcnkpIHtcblx0ICAgIHJldHVybiAoMCwgX3Jlc2VsZWN0LmNyZWF0ZVNlbGVjdG9yKShzZWFyY2hCb29rc1NlbGVjdG9yKHF1ZXJ5KSwgZnVuY3Rpb24gKGl0ZW1zKSB7XG5cdCAgICAgICAgcmV0dXJuIGl0ZW1zLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHQgICAgICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICAgICAgbmFtZTogaXRlbS50aXRsZSxcblx0ICAgICAgICAgICAgICAgIHZhbHVlOiBpdGVtLmlkXG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgfSk7XG5cdCAgICB9KTtcblx0fTtcblx0dmFyIGJvb2tzU2VsZWN0b3IgPSBleHBvcnRzLmJvb2tzU2VsZWN0b3IgPSAoMCwgX3Jlc2VsZWN0LmNyZWF0ZVNlbGVjdG9yKSgoMCwgX2NvbW1vbi5zZWxlY3RQYWdpbmF0ZWRFbnRpdGllcykoe1xuXHQgICAgZW50aXRpZXNOYW1lOiAnYm9va3MnLFxuXHQgICAgcGFnaW5hdGlvbk5hbWU6ICdib29rcycsXG5cdCAgICBwYWdpbmF0aW9uS2V5OiAnZGVmYXVsdCdcblx0fSksIGZ1bmN0aW9uIChib29rcykge1xuXHQgICAgcmV0dXJuIGJvb2tzO1xuXHR9KTtcblx0dmFyIHVzZXJzU2VsZWN0b3IgPSBleHBvcnRzLnVzZXJzU2VsZWN0b3IgPSAoMCwgX2NvbW1vbi5zZWxlY3RQYWdpbmF0ZWRFbnRpdGllcykoe1xuXHQgICAgZW50aXRpZXNOYW1lOiAndXNlcnMnLFxuXHQgICAgcGFnaW5hdGlvbk5hbWU6ICd1c2VycycsXG5cdCAgICBwYWdpbmF0aW9uS2V5OiAnZGVmYXVsdCdcblx0fSk7XG5cdGV4cG9ydHMuY29tbW9uID0gY29tbW9uO1xuXG4vKioqLyB9LFxuXG4vKioqLyAxNjE6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLnNlbGVjdFBhZ2luYXRlZEVudGl0aWVzID0gZXhwb3J0cy5wYWdpbmF0aW9uTGlua1NlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcblx0dmFyIF9yZXNlbGVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTYyKTtcblx0XG5cdHZhciBfbG9kYXNoID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOCk7XG5cdFxuXHR2YXIgX2xvZGFzaDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sb2Rhc2gpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdHZhciBlbnRpdGllc1NlbGVjdG9yID0gZnVuY3Rpb24gZW50aXRpZXNTZWxlY3RvcihuYW1lKSB7XG5cdCAgICByZXR1cm4gZnVuY3Rpb24gKHN0YXRlKSB7XG5cdCAgICAgICAgcmV0dXJuIHN0YXRlLmVudGl0aWVzW25hbWVdIHx8IHt9O1xuXHQgICAgfTtcblx0fTtcblx0dmFyIHBhZ2luYXRpb25TZWxlY3RvciA9IGZ1bmN0aW9uIHBhZ2luYXRpb25TZWxlY3RvcihuYW1lKSB7XG5cdCAgICB2YXIga2V5ID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8gJ2RlZmF1bHQnIDogYXJndW1lbnRzWzFdO1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uIChzdGF0ZSkge1xuXHQgICAgICAgIHJldHVybiBfbG9kYXNoMi5kZWZhdWx0LmdldChzdGF0ZS5wYWdpbmF0aW9uLCBuYW1lICsgJy4nICsga2V5ICsgJy5pZHMnLCBbXSk7XG5cdCAgICB9O1xuXHR9O1xuXHR2YXIgcGFnaW5hdGlvbkxpbmtTZWxlY3RvciA9IGV4cG9ydHMucGFnaW5hdGlvbkxpbmtTZWxlY3RvciA9IGZ1bmN0aW9uIHBhZ2luYXRpb25MaW5rU2VsZWN0b3IobmFtZSkge1xuXHQgICAgdmFyIGtleSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/ICdkZWZhdWx0JyA6IGFyZ3VtZW50c1sxXTtcblx0ICAgIHJldHVybiBmdW5jdGlvbiAoc3RhdGUpIHtcblx0ICAgICAgICByZXR1cm4gX2xvZGFzaDIuZGVmYXVsdC5waWNrKF9sb2Rhc2gyLmRlZmF1bHQuZ2V0KHN0YXRlLnBhZ2luYXRpb24sIG5hbWUgKyAnLicgKyBrZXksIHt9KSwgWyduZXh0JywgJ2xhc3QnXSk7XG5cdCAgICB9O1xuXHR9O1xuXHR2YXIgcXVlcnlQYWdpbmF0aW9uU2VsZWN0b3IgPSBmdW5jdGlvbiBxdWVyeVBhZ2luYXRpb25TZWxlY3RvcihuYW1lLCBxdWVyeSkge1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uIChzdGF0ZSkge1xuXHQgICAgICAgIHJldHVybiBfbG9kYXNoMi5kZWZhdWx0LmdldChzdGF0ZS5wYWdpbmF0aW9uLCBbbmFtZSwgJ3F1ZXJ5JywgcXVlcnksICdpZHMnXSwgW10pO1xuXHQgICAgfTtcblx0fTtcblx0dmFyIHNlbGVjdFBhZ2luYXRlZEVudGl0aWVzID0gZXhwb3J0cy5zZWxlY3RQYWdpbmF0ZWRFbnRpdGllcyA9IGZ1bmN0aW9uIHNlbGVjdFBhZ2luYXRlZEVudGl0aWVzKG9wdGlvbnMpIHtcblx0ICAgIHZhciBlbnRpdGllc05hbWUgPSBvcHRpb25zLmVudGl0aWVzTmFtZTtcblx0ICAgIHZhciBwYWdpbmF0aW9uTmFtZSA9IG9wdGlvbnMucGFnaW5hdGlvbk5hbWU7XG5cdCAgICB2YXIgcGFnaW5hdGlvbktleSA9IG9wdGlvbnMucGFnaW5hdGlvbktleTtcblx0ICAgIHZhciBwYWdpbmF0aW9uUXVlcnkgPSBvcHRpb25zLnBhZ2luYXRpb25RdWVyeTtcblx0XG5cdCAgICB2YXIgcGFnaVNlbGVjdG9yID0gdm9pZCAwO1xuXHQgICAgaWYgKHBhZ2luYXRpb25RdWVyeSkge1xuXHQgICAgICAgIHBhZ2lTZWxlY3RvciA9IHF1ZXJ5UGFnaW5hdGlvblNlbGVjdG9yKHBhZ2luYXRpb25OYW1lLCBwYWdpbmF0aW9uUXVlcnkpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgICBwYWdpU2VsZWN0b3IgPSBwYWdpbmF0aW9uU2VsZWN0b3IocGFnaW5hdGlvbk5hbWUsIHBhZ2luYXRpb25LZXkpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuICgwLCBfcmVzZWxlY3QuY3JlYXRlU2VsZWN0b3IpKGVudGl0aWVzU2VsZWN0b3IoZW50aXRpZXNOYW1lKSwgcGFnaVNlbGVjdG9yLCBmdW5jdGlvbiAoZW50aXRpZXMsIGlkcykge1xuXHQgICAgICAgIHJldHVybiBpZHMubWFwKGZ1bmN0aW9uIChpZCkge1xuXHQgICAgICAgICAgICByZXR1cm4gZW50aXRpZXNbaWRdO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfSk7XG5cdH07XG5cbi8qKiovIH0sXG5cbi8qKiovIDE2Mjpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cdGV4cG9ydHMuZGVmYXVsdE1lbW9pemUgPSBkZWZhdWx0TWVtb2l6ZTtcblx0ZXhwb3J0cy5jcmVhdGVTZWxlY3RvckNyZWF0b3IgPSBjcmVhdGVTZWxlY3RvckNyZWF0b3I7XG5cdGV4cG9ydHMuY3JlYXRlU2VsZWN0b3IgPSBjcmVhdGVTZWxlY3Rvcjtcblx0ZXhwb3J0cy5jcmVhdGVTdHJ1Y3R1cmVkU2VsZWN0b3IgPSBjcmVhdGVTdHJ1Y3R1cmVkU2VsZWN0b3I7XG5cdFxuXHRmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IGVsc2UgeyByZXR1cm4gQXJyYXkuZnJvbShhcnIpOyB9IH1cblx0XG5cdGZ1bmN0aW9uIGRlZmF1bHRFcXVhbGl0eUNoZWNrKGEsIGIpIHtcblx0ICByZXR1cm4gYSA9PT0gYjtcblx0fVxuXHRcblx0ZnVuY3Rpb24gZGVmYXVsdE1lbW9pemUoZnVuYykge1xuXHQgIHZhciBlcXVhbGl0eUNoZWNrID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdEVxdWFsaXR5Q2hlY2sgOiBhcmd1bWVudHNbMV07XG5cdFxuXHQgIHZhciBsYXN0QXJncyA9IG51bGw7XG5cdCAgdmFyIGxhc3RSZXN1bHQgPSBudWxsO1xuXHQgIHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdCAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuXHQgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuXHQgICAgfVxuXHRcblx0ICAgIGlmIChsYXN0QXJncyAhPT0gbnVsbCAmJiBsYXN0QXJncy5sZW5ndGggPT09IGFyZ3MubGVuZ3RoICYmIGFyZ3MuZXZlcnkoZnVuY3Rpb24gKHZhbHVlLCBpbmRleCkge1xuXHQgICAgICByZXR1cm4gZXF1YWxpdHlDaGVjayh2YWx1ZSwgbGFzdEFyZ3NbaW5kZXhdKTtcblx0ICAgIH0pKSB7XG5cdCAgICAgIHJldHVybiBsYXN0UmVzdWx0O1xuXHQgICAgfVxuXHQgICAgbGFzdFJlc3VsdCA9IGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcblx0ICAgIGxhc3RBcmdzID0gYXJncztcblx0ICAgIHJldHVybiBsYXN0UmVzdWx0O1xuXHQgIH07XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGdldERlcGVuZGVuY2llcyhmdW5jcykge1xuXHQgIHZhciBkZXBlbmRlbmNpZXMgPSBBcnJheS5pc0FycmF5KGZ1bmNzWzBdKSA/IGZ1bmNzWzBdIDogZnVuY3M7XG5cdFxuXHQgIGlmICghZGVwZW5kZW5jaWVzLmV2ZXJ5KGZ1bmN0aW9uIChkZXApIHtcblx0ICAgIHJldHVybiB0eXBlb2YgZGVwID09PSAnZnVuY3Rpb24nO1xuXHQgIH0pKSB7XG5cdCAgICB2YXIgZGVwZW5kZW5jeVR5cGVzID0gZGVwZW5kZW5jaWVzLm1hcChmdW5jdGlvbiAoZGVwKSB7XG5cdCAgICAgIHJldHVybiB0eXBlb2YgZGVwO1xuXHQgICAgfSkuam9pbignLCAnKTtcblx0ICAgIHRocm93IG5ldyBFcnJvcignU2VsZWN0b3IgY3JlYXRvcnMgZXhwZWN0IGFsbCBpbnB1dC1zZWxlY3RvcnMgdG8gYmUgZnVuY3Rpb25zLCAnICsgKCdpbnN0ZWFkIHJlY2VpdmVkIHRoZSBmb2xsb3dpbmcgdHlwZXM6IFsnICsgZGVwZW5kZW5jeVR5cGVzICsgJ10nKSk7XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gZGVwZW5kZW5jaWVzO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBjcmVhdGVTZWxlY3RvckNyZWF0b3IobWVtb2l6ZSkge1xuXHQgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgbWVtb2l6ZU9wdGlvbnMgPSBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG5cdCAgICBtZW1vaXplT3B0aW9uc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcblx0ICB9XG5cdFxuXHQgIHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdCAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcblx0ICAgICAgZnVuY3NbX2tleTNdID0gYXJndW1lbnRzW19rZXkzXTtcblx0ICAgIH1cblx0XG5cdCAgICB2YXIgcmVjb21wdXRhdGlvbnMgPSAwO1xuXHQgICAgdmFyIHJlc3VsdEZ1bmMgPSBmdW5jcy5wb3AoKTtcblx0ICAgIHZhciBkZXBlbmRlbmNpZXMgPSBnZXREZXBlbmRlbmNpZXMoZnVuY3MpO1xuXHRcblx0ICAgIHZhciBtZW1vaXplZFJlc3VsdEZ1bmMgPSBtZW1vaXplLmFwcGx5KHVuZGVmaW5lZCwgW2Z1bmN0aW9uICgpIHtcblx0ICAgICAgcmVjb21wdXRhdGlvbnMrKztcblx0ICAgICAgcmV0dXJuIHJlc3VsdEZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuXHQgICAgfV0uY29uY2F0KG1lbW9pemVPcHRpb25zKSk7XG5cdFxuXHQgICAgdmFyIHNlbGVjdG9yID0gZnVuY3Rpb24gc2VsZWN0b3Ioc3RhdGUsIHByb3BzKSB7XG5cdCAgICAgIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW40ID4gMiA/IF9sZW40IC0gMiA6IDApLCBfa2V5NCA9IDI7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcblx0ICAgICAgICBhcmdzW19rZXk0IC0gMl0gPSBhcmd1bWVudHNbX2tleTRdO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB2YXIgcGFyYW1zID0gZGVwZW5kZW5jaWVzLm1hcChmdW5jdGlvbiAoZGVwZW5kZW5jeSkge1xuXHQgICAgICAgIHJldHVybiBkZXBlbmRlbmN5LmFwcGx5KHVuZGVmaW5lZCwgW3N0YXRlLCBwcm9wc10uY29uY2F0KGFyZ3MpKTtcblx0ICAgICAgfSk7XG5cdCAgICAgIHJldHVybiBtZW1vaXplZFJlc3VsdEZ1bmMuYXBwbHkodW5kZWZpbmVkLCBfdG9Db25zdW1hYmxlQXJyYXkocGFyYW1zKSk7XG5cdCAgICB9O1xuXHRcblx0ICAgIHNlbGVjdG9yLnJlc3VsdEZ1bmMgPSByZXN1bHRGdW5jO1xuXHQgICAgc2VsZWN0b3IucmVjb21wdXRhdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHJldHVybiByZWNvbXB1dGF0aW9ucztcblx0ICAgIH07XG5cdCAgICBzZWxlY3Rvci5yZXNldFJlY29tcHV0YXRpb25zID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICByZXR1cm4gcmVjb21wdXRhdGlvbnMgPSAwO1xuXHQgICAgfTtcblx0ICAgIHJldHVybiBzZWxlY3Rvcjtcblx0ICB9O1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBjcmVhdGVTZWxlY3RvcigpIHtcblx0ICByZXR1cm4gY3JlYXRlU2VsZWN0b3JDcmVhdG9yKGRlZmF1bHRNZW1vaXplKS5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGNyZWF0ZVN0cnVjdHVyZWRTZWxlY3RvcihzZWxlY3RvcnMpIHtcblx0ICB2YXIgc2VsZWN0b3JDcmVhdG9yID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8gY3JlYXRlU2VsZWN0b3IgOiBhcmd1bWVudHNbMV07XG5cdFxuXHQgIGlmICh0eXBlb2Ygc2VsZWN0b3JzICE9PSAnb2JqZWN0Jykge1xuXHQgICAgdGhyb3cgbmV3IEVycm9yKCdjcmVhdGVTdHJ1Y3R1cmVkU2VsZWN0b3IgZXhwZWN0cyBmaXJzdCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QgJyArICgnd2hlcmUgZWFjaCBwcm9wZXJ0eSBpcyBhIHNlbGVjdG9yLCBpbnN0ZWFkIHJlY2VpdmVkIGEgJyArIHR5cGVvZiBzZWxlY3RvcnMpKTtcblx0ICB9XG5cdCAgdmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyhzZWxlY3RvcnMpO1xuXHQgIHJldHVybiBzZWxlY3RvckNyZWF0b3Iob2JqZWN0S2V5cy5tYXAoZnVuY3Rpb24gKGtleSkge1xuXHQgICAgcmV0dXJuIHNlbGVjdG9yc1trZXldO1xuXHQgIH0pLCBmdW5jdGlvbiAoKSB7XG5cdCAgICBmb3IgKHZhciBfbGVuNSA9IGFyZ3VtZW50cy5sZW5ndGgsIHZhbHVlcyA9IEFycmF5KF9sZW41KSwgX2tleTUgPSAwOyBfa2V5NSA8IF9sZW41OyBfa2V5NSsrKSB7XG5cdCAgICAgIHZhbHVlc1tfa2V5NV0gPSBhcmd1bWVudHNbX2tleTVdO1xuXHQgICAgfVxuXHRcblx0ICAgIHJldHVybiB2YWx1ZXMucmVkdWNlKGZ1bmN0aW9uIChjb21wb3NpdGlvbiwgdmFsdWUsIGluZGV4KSB7XG5cdCAgICAgIGNvbXBvc2l0aW9uW29iamVjdEtleXNbaW5kZXhdXSA9IHZhbHVlO1xuXHQgICAgICByZXR1cm4gY29tcG9zaXRpb247XG5cdCAgICB9LCB7fSk7XG5cdCAgfSk7XG5cdH1cblxuLyoqKi8gfSxcblxuLyoqKi8gMTYzOlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX0Jvb2tMaXN0U2VjdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMTY0KTtcblx0XG5cdHZhciBfQm9va0xpc3RTZWN0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0Jvb2tMaXN0U2VjdGlvbik7XG5cblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuXHRleHBvcnRzLmRlZmF1bHQgPSBfQm9va0xpc3RTZWN0aW9uMi5kZWZhdWx0O1xuXG4vKioqLyB9LFxuXG4vKioqLyAxNjQ6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXHRcblx0dmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cdFxuXHR2YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0XG5cdHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXHRcblx0dmFyIF9yZWFjdFJvdXRlciA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cdFxuXHR2YXIgX0Jvb2tMaXN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNjUpO1xuXHRcblx0dmFyIF9Cb29rTGlzdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Cb29rTGlzdCk7XG5cdFxuXHR2YXIgX3JlYWN0Q3NzTW9kdWxlcyA9IF9fd2VicGFja19yZXF1aXJlX18oODIpO1xuXHRcblx0dmFyIF9yZWFjdENzc01vZHVsZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3RDc3NNb2R1bGVzKTtcblx0XG5cdHZhciBfSWNvbiA9IF9fd2VicGFja19yZXF1aXJlX18oNzgpO1xuXHRcblx0dmFyIF9JY29uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0ljb24pO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cdFxuXHRmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblx0XG5cdGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXHRcblx0dmFyIF9fZGVjb3JhdGUgPSB1bmRlZmluZWQgJiYgdW5kZWZpbmVkLl9fZGVjb3JhdGUgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG5cdCAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdCAgICAgICAgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsXG5cdCAgICAgICAgZDtcblx0ICAgIGlmICgodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihSZWZsZWN0KSkgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO2Vsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0ICAgICAgICBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuXHQgICAgfXJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG5cdH07XG5cdFxuXHR2YXIgc3R5bGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxODQpO1xuXHR2YXIgQm9va0xpc3RTZWN0aW9uID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcblx0ICAgIF9pbmhlcml0cyhCb29rTGlzdFNlY3Rpb24sIF9Db21wb25lbnQpO1xuXHRcblx0ICAgIGZ1bmN0aW9uIEJvb2tMaXN0U2VjdGlvbigpIHtcblx0ICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQm9va0xpc3RTZWN0aW9uKTtcblx0XG5cdCAgICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIE9iamVjdC5nZXRQcm90b3R5cGVPZihCb29rTGlzdFNlY3Rpb24pLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuXHQgICAgfVxuXHRcblx0ICAgIF9jcmVhdGVDbGFzcyhCb29rTGlzdFNlY3Rpb24sIFt7XG5cdCAgICAgICAga2V5OiBcInJlbmRlclwiLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdCAgICAgICAgICAgIHZhciB0aXRsZSA9IHRoaXMucHJvcHMudGl0bGU7XG5cdCAgICAgICAgICAgIHZhciBtb3JlTGluayA9IHRoaXMucHJvcHMubW9yZUxpbmsgPyB0aGlzLnByb3BzLm1vcmVMaW5rIDogbnVsbDtcblx0ICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgc3R5bGVOYW1lOiBcImJvb2stbGlzdC1zZWN0aW9uXCIgfSwgdGhpcy5wcm9wcy50aXRsZSAmJiAobW9yZUxpbmsgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImgyXCIsIHsgc3R5bGVOYW1lOiBcInNlY3Rpb24tdGl0bGVcIiB9LCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3RSb3V0ZXIuTGluaywgeyB0bzogbW9yZUxpbmsgfSwgdGl0bGUsIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9JY29uMi5kZWZhdWx0LCB7IG5hbWU6IFwiYXJyb3dSaWdodFwiLCBzaXplOiAyMCB9KSkpIDogX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJoMlwiLCB7IHN0eWxlTmFtZTogXCJzZWN0aW9uLXRpdGxlXCIgfSwgdGl0bGUpKSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0Jvb2tMaXN0Mi5kZWZhdWx0LCB7IGJvb2tFbnRpdGllczogdGhpcy5wcm9wcy5ib29rRW50aXRpZXMgfSkpO1xuXHQgICAgICAgIH1cblx0ICAgIH1dKTtcblx0XG5cdCAgICByZXR1cm4gQm9va0xpc3RTZWN0aW9uO1xuXHR9KF9yZWFjdC5Db21wb25lbnQpO1xuXHRCb29rTGlzdFNlY3Rpb24gPSBfX2RlY29yYXRlKFsoMCwgX3JlYWN0Q3NzTW9kdWxlczIuZGVmYXVsdCkoc3R5bGVzLCB7XG5cdCAgICBhbGxvd011bHRpcGxlOiB0cnVlXG5cdH0pXSwgQm9va0xpc3RTZWN0aW9uKTtcblx0ZXhwb3J0cy5kZWZhdWx0ID0gQm9va0xpc3RTZWN0aW9uO1xuXG4vKioqLyB9LFxuXG4vKioqLyAxNjU6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfQm9va0xpc3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2Nik7XG5cdFxuXHR2YXIgX0Jvb2tMaXN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0Jvb2tMaXN0KTtcblxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5cdGV4cG9ydHMuZGVmYXVsdCA9IF9Cb29rTGlzdDIuZGVmYXVsdDtcblxuLyoqKi8gfSxcblxuLyoqKi8gMTY2OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblx0XG5cdHZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXHRcblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cdFxuXHR2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblx0XG5cdHZhciBfQm9vayA9IF9fd2VicGFja19yZXF1aXJlX18oMTY3KTtcblx0XG5cdHZhciBfQm9vazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Cb29rKTtcblx0XG5cdHZhciBfcmVhY3RDc3NNb2R1bGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4Mik7XG5cdFxuXHR2YXIgX3JlYWN0Q3NzTW9kdWxlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdENzc01vZHVsZXMpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cdFxuXHRmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblx0XG5cdGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXHRcblx0dmFyIF9fZGVjb3JhdGUgPSB1bmRlZmluZWQgJiYgdW5kZWZpbmVkLl9fZGVjb3JhdGUgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG5cdCAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdCAgICAgICAgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsXG5cdCAgICAgICAgZDtcblx0ICAgIGlmICgodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihSZWZsZWN0KSkgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO2Vsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0ICAgICAgICBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuXHQgICAgfXJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG5cdH07XG5cdFxuXHR2YXIgc3R5bGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxODMpO1xuXHR2YXIgQm9va0xpc3QgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuXHQgICAgX2luaGVyaXRzKEJvb2tMaXN0LCBfQ29tcG9uZW50KTtcblx0XG5cdCAgICBmdW5jdGlvbiBCb29rTGlzdCgpIHtcblx0ICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQm9va0xpc3QpO1xuXHRcblx0ICAgICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgT2JqZWN0LmdldFByb3RvdHlwZU9mKEJvb2tMaXN0KS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcblx0ICAgIH1cblx0XG5cdCAgICBfY3JlYXRlQ2xhc3MoQm9va0xpc3QsIFt7XG5cdCAgICAgICAga2V5OiBcInJlbmRlclwiLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInVsXCIsIHsgc3R5bGVOYW1lOiBcImJvb2stbGlzdFwiLCBjbGFzc05hbWU6IFwiY2xlYXJmaXhcIiB9LCB0aGlzLnByb3BzLmJvb2tFbnRpdGllcyAmJiB0aGlzLnByb3BzLmJvb2tFbnRpdGllcy5sZW5ndGggIT09IDAgPyB0aGlzLnByb3BzLmJvb2tFbnRpdGllcy5tYXAoZnVuY3Rpb24gKGJvb2ssIGluZGV4KSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgdGl0bGUgPSBib29rLnRpdGxlO1xuXHQgICAgICAgICAgICAgICAgdmFyIGF1dGhvcnMgPSBib29rLmF1dGhvcnM7XG5cdCAgICAgICAgICAgICAgICB2YXIgZGVzY3JpcHRpb24gPSBib29rLmRlc2NyaXB0aW9uO1xuXHQgICAgICAgICAgICAgICAgdmFyIGNvdmVyID0gYm9vay5jb3Zlcjtcblx0XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJsaVwiLCB7IGtleTogaW5kZXggfSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0Jvb2syLmRlZmF1bHQsIHsgaWQ6IGJvb2suaWQsIHRpdGxlOiB0aXRsZSB8fCAn5peg5qCH6aKYJywgYXV0aG9yczogYXV0aG9ycyAmJiBhdXRob3JzLm1hcChmdW5jdGlvbiAoYXV0aG9yKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhdXRob3IubmFtZTtcblx0ICAgICAgICAgICAgICAgICAgICB9KS5qb2luKCcsICcpIHx8ICfmnKrnn6XkvZzogIUnLCBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24sIGNvdmVyOiBjb3ZlciwgZGlzYWJsZVBvcHVwOiB0cnVlIH0pKTtcblx0ICAgICAgICAgICAgfSkgOiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImxpXCIsIG51bGwsIFwi5pqC5peg6K6w5b2VXCIpKTtcblx0ICAgICAgICB9XG5cdCAgICB9XSk7XG5cdFxuXHQgICAgcmV0dXJuIEJvb2tMaXN0O1xuXHR9KF9yZWFjdC5Db21wb25lbnQpO1xuXHRCb29rTGlzdCA9IF9fZGVjb3JhdGUoWygwLCBfcmVhY3RDc3NNb2R1bGVzMi5kZWZhdWx0KShzdHlsZXMpXSwgQm9va0xpc3QpO1xuXHRleHBvcnRzLmRlZmF1bHQgPSBCb29rTGlzdDtcblxuLyoqKi8gfSxcblxuLyoqKi8gMTY3OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX0Jvb2sgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2OCk7XG5cdFxuXHR2YXIgX0Jvb2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQm9vayk7XG5cblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuXHRleHBvcnRzLmRlZmF1bHQgPSBfQm9vazIuZGVmYXVsdDtcblxuLyoqKi8gfSxcblxuLyoqKi8gMTY4OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblx0XG5cdHZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXHRcblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cdFxuXHR2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblx0XG5cdHZhciBfcmVhY3RSb3V0ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXHRcblx0dmFyIF9Cb29rSW5mb1BvcHVwID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNjkpO1xuXHRcblx0dmFyIF9Cb29rSW5mb1BvcHVwMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0Jvb2tJbmZvUG9wdXApO1xuXHRcblx0dmFyIF9yZWFjdENzc01vZHVsZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgyKTtcblx0XG5cdHZhciBfcmVhY3RDc3NNb2R1bGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Q3NzTW9kdWxlcyk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblx0XG5cdGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXHRcblx0ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cdFxuXHR2YXIgX19kZWNvcmF0ZSA9IHVuZGVmaW5lZCAmJiB1bmRlZmluZWQuX19kZWNvcmF0ZSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcblx0ICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCxcblx0ICAgICAgICByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYyxcblx0ICAgICAgICBkO1xuXHQgICAgaWYgKCh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKFJlZmxlY3QpKSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7ZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuXHQgICAgICAgIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG5cdCAgICB9cmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcblx0fTtcblx0XG5cdHZhciBzdHlsZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4Mik7XG5cdHZhciBCb29rID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcblx0ICAgIF9pbmhlcml0cyhCb29rLCBfQ29tcG9uZW50KTtcblx0XG5cdCAgICBmdW5jdGlvbiBCb29rKHByb3BzKSB7XG5cdCAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJvb2spO1xuXHRcblx0ICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQm9vaykuY2FsbCh0aGlzLCBwcm9wcykpO1xuXHRcblx0ICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcblx0ICAgICAgICAgICAgc2hvd1BvcHVwOiBmYWxzZVxuXHQgICAgICAgIH07XG5cdCAgICAgICAgX3RoaXMuc2hvd1BvcHVwID0gX3RoaXMuc2hvd1BvcHVwLmJpbmQoX3RoaXMpO1xuXHQgICAgICAgIF90aGlzLmhpZGVQb3B1cCA9IF90aGlzLmhpZGVQb3B1cC5iaW5kKF90aGlzKTtcblx0ICAgICAgICByZXR1cm4gX3RoaXM7XG5cdCAgICB9XG5cdFxuXHQgICAgX2NyZWF0ZUNsYXNzKEJvb2ssIFt7XG5cdCAgICAgICAga2V5OiBcInNob3dQb3B1cFwiLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzaG93UG9wdXAoKSB7XG5cdCAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuXHQgICAgICAgICAgICAgICAgc2hvd1BvcHVwOiB0cnVlXG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6IFwiaGlkZVBvcHVwXCIsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhpZGVQb3B1cCgpIHtcblx0ICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG5cdCAgICAgICAgICAgICAgICBzaG93UG9wdXA6IGZhbHNlXG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6IFwicmVuZGVyXCIsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblx0ICAgICAgICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHM7XG5cdCAgICAgICAgICAgIHZhciBzaG93RGVzYyA9IF9wcm9wcy5zaG93RGVzYztcblx0ICAgICAgICAgICAgdmFyIGRlc2NyaXB0aW9uID0gX3Byb3BzLmRlc2NyaXB0aW9uO1xuXHQgICAgICAgICAgICB2YXIgY292ZXIgPSBfcHJvcHMuY292ZXI7XG5cdFxuXHQgICAgICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBvbk1vdXNlRW50ZXI6IHRoaXMuc2hvd1BvcHVwLCBvbk1vdXNlTGVhdmU6IHRoaXMuaGlkZVBvcHVwLCBzdHlsZU5hbWU6IFwiYm9vay0tY2FyZFwiIH0sIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdFJvdXRlci5MaW5rLCB7IHRvOiAnL2Jvb2svJyArIHRoaXMucHJvcHMuaWQgfSwgY292ZXIgJiYgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBzdHlsZU5hbWU6IFwiYm9vay1jb3ZlclwiIH0sIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiaW1nXCIsIHsgc3JjOiB0aGlzLnByb3BzLmNvdmVyIH0pKSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBzdHlsZU5hbWU6IFwiYm9vay1tZXRhXCIgfSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgdGl0bGU6IHRoaXMucHJvcHMudGl0bGUsIHN0eWxlTmFtZTogXCJib29rLW5hbWVcIiB9LCB0aGlzLnByb3BzLnRpdGxlIHx8ICfml6DmoIfpopgnKSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgc3R5bGVOYW1lOiBcImJvb2stYXV0aG9yXCIgfSwgdGhpcy5wcm9wcy5hdXRob3JzIHx8ICfkvZzogIXkuI3or6YnKSwgc2hvd0Rlc2MgJiYgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgc3R5bGVOYW1lOiBcImJvb2stZGVzY1wiIH0sIGRlc2NyaXB0aW9uIHx8ICfnqbonKSkpLCB0aGlzLnN0YXRlLnNob3dQb3B1cCAmJiAhdGhpcy5wcm9wcy5kaXNhYmxlUG9wdXAgJiYgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0Jvb2tJbmZvUG9wdXAyLmRlZmF1bHQsIHsgYm9va0lkOiB0aGlzLnByb3BzLmlkLCB0aXRsZTogdGhpcy5wcm9wcy50aXRsZSwgYXV0aG9yOiB0aGlzLnByb3BzLmF1dGhvcnMsIGRlc2NyaXB0aW9uOiB0aGlzLnByb3BzLmRlc2NyaXB0aW9uIH0pKTtcblx0ICAgICAgICB9XG5cdCAgICB9XSk7XG5cdFxuXHQgICAgcmV0dXJuIEJvb2s7XG5cdH0oX3JlYWN0LkNvbXBvbmVudCk7XG5cdEJvb2sgPSBfX2RlY29yYXRlKFsoMCwgX3JlYWN0Q3NzTW9kdWxlczIuZGVmYXVsdCkoc3R5bGVzLCB7XG5cdCAgICBhbGxvd011bHRpcGxlOiB0cnVlXG5cdH0pXSwgQm9vayk7XG5cdGV4cG9ydHMuZGVmYXVsdCA9IEJvb2s7XG5cbi8qKiovIH0sXG5cbi8qKiovIDE2OTpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9Cb29rSW5mb1BvcHVwID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNzApO1xuXHRcblx0dmFyIF9Cb29rSW5mb1BvcHVwMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0Jvb2tJbmZvUG9wdXApO1xuXG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cblx0ZXhwb3J0cy5kZWZhdWx0ID0gX0Jvb2tJbmZvUG9wdXAyLmRlZmF1bHQ7XG5cbi8qKiovIH0sXG5cbi8qKiovIDE3MDpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cdFxuXHR2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblx0XG5cdHZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHRcblx0dmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cdFxuXHR2YXIgX2Zvcm0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3MSk7XG5cdFxuXHR2YXIgX3JlYWN0Q3NzTW9kdWxlcyA9IF9fd2VicGFja19yZXF1aXJlX18oODIpO1xuXHRcblx0dmFyIF9yZWFjdENzc01vZHVsZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3RDc3NNb2R1bGVzKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXHRcblx0ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cdFxuXHRmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblx0XG5cdHZhciBfX2RlY29yYXRlID0gdW5kZWZpbmVkICYmIHVuZGVmaW5lZC5fX2RlY29yYXRlIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuXHQgICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLFxuXHQgICAgICAgIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLFxuXHQgICAgICAgIGQ7XG5cdCAgICBpZiAoKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoUmVmbGVjdCkpID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdCAgICAgICAgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcblx0ICAgIH1yZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xuXHR9O1xuXHRcblx0dmFyIHN0eWxlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTgxKTtcblx0dmFyIEJvb2tJbmZvUG9wdXAgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuXHQgICAgX2luaGVyaXRzKEJvb2tJbmZvUG9wdXAsIF9Db21wb25lbnQpO1xuXHRcblx0ICAgIGZ1bmN0aW9uIEJvb2tJbmZvUG9wdXAocHJvcHMpIHtcblx0ICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQm9va0luZm9Qb3B1cCk7XG5cdFxuXHQgICAgICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQm9va0luZm9Qb3B1cCkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXHQgICAgfVxuXHRcblx0ICAgIF9jcmVhdGVDbGFzcyhCb29rSW5mb1BvcHVwLCBbe1xuXHQgICAgICAgIGtleTogXCJyZW5kZXJcIixcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHQgICAgICAgICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcztcblx0ICAgICAgICAgICAgdmFyIGF1dGhvciA9IF9wcm9wcy5hdXRob3I7XG5cdCAgICAgICAgICAgIHZhciB0aXRsZSA9IF9wcm9wcy50aXRsZTtcblx0ICAgICAgICAgICAgdmFyIGRlc2NyaXB0aW9uID0gX3Byb3BzLmRlc2NyaXB0aW9uO1xuXHQgICAgICAgICAgICB2YXIgYm9va0lkID0gX3Byb3BzLmJvb2tJZDtcblx0XG5cdCAgICAgICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IHN0eWxlTmFtZTogXCJwb3B1cFwiIH0sIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgc3R5bGVOYW1lOiBcImhlYWRlclwiIH0sIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiaDJcIiwgeyBzdHlsZU5hbWU6IFwidGl0bGVcIiB9LCB0aXRsZSksIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwicFwiLCB7IHN0eWxlTmFtZTogXCJhdXRob3JcIiB9LCBhdXRob3IpLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfZm9ybS5CdXR0b24sIHsgY29sb3I6IFwiYmx1ZVwiLCB0bzogJy92aWV3ZXIvYm9vay8nICsgYm9va0lkIH0sIFwi6ZiF6K+7XCIpKSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBzdHlsZU5hbWU6IFwiZGVzY3JpcHRpb25cIiB9LCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInBcIiwgbnVsbCwgZGVzY3JpcHRpb24pKSk7XG5cdCAgICAgICAgfVxuXHQgICAgfV0pO1xuXHRcblx0ICAgIHJldHVybiBCb29rSW5mb1BvcHVwO1xuXHR9KF9yZWFjdC5Db21wb25lbnQpO1xuXHRCb29rSW5mb1BvcHVwID0gX19kZWNvcmF0ZShbKDAsIF9yZWFjdENzc01vZHVsZXMyLmRlZmF1bHQpKHN0eWxlcywge1xuXHQgICAgYWxsb3dNdWx0aXBsZTogdHJ1ZVxuXHR9KV0sIEJvb2tJbmZvUG9wdXApO1xuXHRleHBvcnRzLmRlZmF1bHQgPSBCb29rSW5mb1BvcHVwO1xuXG4vKioqLyB9LFxuXG4vKioqLyAxNzE6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy5UZXh0YXJlYSA9IGV4cG9ydHMuU2VsZWN0aXplSW5wdXQgPSBleHBvcnRzLklucHV0ID0gZXhwb3J0cy5CdXR0b24gPSB1bmRlZmluZWQ7XG5cdFxuXHR2YXIgX0J1dHRvbiA9IF9fd2VicGFja19yZXF1aXJlX18oOTYpO1xuXHRcblx0dmFyIF9CdXR0b24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQnV0dG9uKTtcblx0XG5cdHZhciBfSW5wdXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3Mik7XG5cdFxuXHR2YXIgX0lucHV0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0lucHV0KTtcblx0XG5cdHZhciBfU2VsZWN0aXplSW5wdXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3NSk7XG5cdFxuXHR2YXIgX1NlbGVjdGl6ZUlucHV0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NlbGVjdGl6ZUlucHV0KTtcblx0XG5cdHZhciBfVGV4dGFyZWEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3OCk7XG5cdFxuXHR2YXIgX1RleHRhcmVhMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1RleHRhcmVhKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRleHBvcnRzLkJ1dHRvbiA9IF9CdXR0b24yLmRlZmF1bHQ7XG5cdGV4cG9ydHMuSW5wdXQgPSBfSW5wdXQyLmRlZmF1bHQ7XG5cdGV4cG9ydHMuU2VsZWN0aXplSW5wdXQgPSBfU2VsZWN0aXplSW5wdXQyLmRlZmF1bHQ7XG5cdGV4cG9ydHMuVGV4dGFyZWEgPSBfVGV4dGFyZWEyLmRlZmF1bHQ7XG5cbi8qKiovIH0sXG5cbi8qKiovIDE3Mjpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9JbnB1dCA9IF9fd2VicGFja19yZXF1aXJlX18oMTczKTtcblx0XG5cdHZhciBfSW5wdXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSW5wdXQpO1xuXG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cblx0ZXhwb3J0cy5kZWZhdWx0ID0gX0lucHV0Mi5kZWZhdWx0O1xuXG4vKioqLyB9LFxuXG4vKioqLyAxNzM6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXHRcblx0dmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cdFxuXHR2YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0XG5cdHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXHRcblx0dmFyIF9yZWFjdENzc01vZHVsZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgyKTtcblx0XG5cdHZhciBfcmVhY3RDc3NNb2R1bGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Q3NzTW9kdWxlcyk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblx0XG5cdGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXHRcblx0ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cdFxuXHR2YXIgX19kZWNvcmF0ZSA9IHVuZGVmaW5lZCAmJiB1bmRlZmluZWQuX19kZWNvcmF0ZSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcblx0ICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCxcblx0ICAgICAgICByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYyxcblx0ICAgICAgICBkO1xuXHQgICAgaWYgKCh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKFJlZmxlY3QpKSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7ZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuXHQgICAgICAgIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG5cdCAgICB9cmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcblx0fTtcblx0XG5cdHZhciBzdHlsZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3NCk7XG5cdHZhciBJbnB1dCA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG5cdCAgICBfaW5oZXJpdHMoSW5wdXQsIF9Db21wb25lbnQpO1xuXHRcblx0ICAgIGZ1bmN0aW9uIElucHV0KHByb3BzKSB7XG5cdCAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIElucHV0KTtcblx0XG5cdCAgICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIE9iamVjdC5nZXRQcm90b3R5cGVPZihJbnB1dCkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXHQgICAgfVxuXHRcblx0ICAgIF9jcmVhdGVDbGFzcyhJbnB1dCwgW3tcblx0ICAgICAgICBrZXk6IFwicmVuZGVyXCIsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblx0ICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cdFxuXHQgICAgICAgICAgICB2YXIgcHJvcHMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnByb3BzKTtcblx0ICAgICAgICAgICAgZGVsZXRlIHByb3BzLmNsYXNzTmFtZTtcblx0ICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgc3R5bGVOYW1lOiBcImlucHV0LXdyYXBcIiwgY2xhc3NOYW1lOiB0aGlzLnByb3BzLmNsYXNzTmFtZSB8fCAnJyB9LCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImlucHV0XCIsIHsgc3R5bGVOYW1lOiBcImlucHV0XCIsIHBsYWNlaG9sZGVyOiB0aGlzLnByb3BzLnBsYWNlaG9sZGVyLCB2YWx1ZTogdGhpcy5wcm9wcy52YWx1ZSwgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICBfdGhpczIucHJvcHMub25DaGFuZ2UoZSk7XG5cdCAgICAgICAgICAgICAgICB9LCB0eXBlOiB0aGlzLnByb3BzLnR5cGUgPyB0aGlzLnByb3BzLnR5cGUgOiAndGV4dCcsIG5hbWU6IHRoaXMucHJvcHMubmFtZSA/IHRoaXMucHJvcHMubmFtZSA6IG51bGwgfSkpO1xuXHQgICAgICAgIH1cblx0ICAgIH1dKTtcblx0XG5cdCAgICByZXR1cm4gSW5wdXQ7XG5cdH0oX3JlYWN0LkNvbXBvbmVudCk7XG5cdElucHV0ID0gX19kZWNvcmF0ZShbKDAsIF9yZWFjdENzc01vZHVsZXMyLmRlZmF1bHQpKHN0eWxlcywge1xuXHQgICAgYWxsb3dNdWx0aXBsZTogdHJ1ZVxuXHR9KV0sIElucHV0KTtcblx0ZXhwb3J0cy5kZWZhdWx0ID0gSW5wdXQ7XG5cbi8qKiovIH0sXG5cbi8qKiovIDE3NDpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cdG1vZHVsZS5leHBvcnRzID0ge1wiaW5wdXQtd3JhcFwiOlwiaW5wdXQtd3JhcF8zZEhBM1wiLFwiaW5wdXRcIjpcImlucHV0XzJqdUJPXCJ9O1xuXG4vKioqLyB9LFxuXG4vKioqLyAxNzU6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfU2VsZWN0aXplSW5wdXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3Nik7XG5cdFxuXHR2YXIgX1NlbGVjdGl6ZUlucHV0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NlbGVjdGl6ZUlucHV0KTtcblxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5cdGV4cG9ydHMuZGVmYXVsdCA9IF9TZWxlY3RpemVJbnB1dDIuZGVmYXVsdDtcblxuLyoqKi8gfSxcblxuLyoqKi8gMTc2OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblx0XG5cdHZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXHRcblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cdFxuXHR2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblx0XG5cdHZhciBfSWNvbiA9IF9fd2VicGFja19yZXF1aXJlX18oNzgpO1xuXHRcblx0dmFyIF9JY29uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0ljb24pO1xuXHRcblx0dmFyIF9jbGFzc25hbWVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MCk7XG5cdFxuXHR2YXIgX2NsYXNzbmFtZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NuYW1lcyk7XG5cdFxuXHR2YXIgX3JlYWN0Q3NzTW9kdWxlcyA9IF9fd2VicGFja19yZXF1aXJlX18oODIpO1xuXHRcblx0dmFyIF9yZWFjdENzc01vZHVsZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3RDc3NNb2R1bGVzKTtcblx0XG5cdHZhciBfaXNEZXNjZW5kYW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDgpO1xuXHRcblx0dmFyIF9pc0Rlc2NlbmRhbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNEZXNjZW5kYW50KTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXHRcblx0ZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cdFxuXHRmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblx0XG5cdHZhciBfX2RlY29yYXRlID0gdW5kZWZpbmVkICYmIHVuZGVmaW5lZC5fX2RlY29yYXRlIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuXHQgICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLFxuXHQgICAgICAgIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLFxuXHQgICAgICAgIGQ7XG5cdCAgICBpZiAoKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoUmVmbGVjdCkpID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdCAgICAgICAgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcblx0ICAgIH1yZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xuXHR9O1xuXHRcblx0dmFyIHN0eWxlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTc3KTtcblx0dmFyIFNlbGVjdGl6ZUlucHV0ID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcblx0ICAgIF9pbmhlcml0cyhTZWxlY3RpemVJbnB1dCwgX0NvbXBvbmVudCk7XG5cdFxuXHQgICAgZnVuY3Rpb24gU2VsZWN0aXplSW5wdXQocHJvcHMpIHtcblx0ICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2VsZWN0aXplSW5wdXQpO1xuXHRcblx0ICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU2VsZWN0aXplSW5wdXQpLmNhbGwodGhpcywgcHJvcHMpKTtcblx0XG5cdCAgICAgICAgX3RoaXMuc3RhdGUgPSB7XG5cdCAgICAgICAgICAgIHNob3dPcHRpb25zOiBmYWxzZSxcblx0ICAgICAgICAgICAgZm9jdXM6IGZhbHNlLFxuXHQgICAgICAgICAgICB2YWx1ZTogJycsXG5cdCAgICAgICAgICAgIGV4cGVuZGVkT3B0aW9uSW5kZXg6IDBcblx0ICAgICAgICB9O1xuXHQgICAgICAgIF90aGlzLmhhbmRsZU91dHNpZGVDbGljayA9IF90aGlzLmhhbmRsZU91dHNpZGVDbGljay5iaW5kKF90aGlzKTtcblx0ICAgICAgICBfdGhpcy5mb2N1c0lucHV0ID0gX3RoaXMuZm9jdXNJbnB1dC5iaW5kKF90aGlzKTtcblx0ICAgICAgICBfdGhpcy5oYW5kbGVJbnB1dFdyYXBDbGljayA9IF90aGlzLmhhbmRsZUlucHV0V3JhcENsaWNrLmJpbmQoX3RoaXMpO1xuXHQgICAgICAgIHJldHVybiBfdGhpcztcblx0ICAgIH1cblx0XG5cdCAgICBfY3JlYXRlQ2xhc3MoU2VsZWN0aXplSW5wdXQsIFt7XG5cdCAgICAgICAga2V5OiBcImFkZFZhbHVlXCIsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFZhbHVlKG5ld1ZhbHVlKSB7XG5cdCAgICAgICAgICAgIHRoaXMucHJvcHMub25WYWx1ZXNDaGFuZ2UodGhpcy5wcm9wcy52YWx1ZXMuY29uY2F0KG5ld1ZhbHVlKSk7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLm9uT3B0aW9uc0NoYW5nZSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5vbk9wdGlvbnNDaGFuZ2UodGhpcy5wcm9wcy5vcHRpb25zLm1hcChmdW5jdGlvbiAob3B0aW9uKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbi52YWx1ZSA9PT0gbmV3VmFsdWUudmFsdWUgPyBPYmplY3QuYXNzaWduKHt9LCBvcHRpb24sIHsgZGlzYWJsZWQ6IHRydWUgfSkgOiBvcHRpb247XG5cdCAgICAgICAgICAgICAgICB9KSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdGhpcy5jbGVhcklucHV0VmFsdWUoKTtcblx0ICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnByb3BzLnN0YXlGb2N1c2VkID09PSAndW5kZWZpbmVkJyB8fCB0aGlzLnByb3BzLnN0YXlGb2N1c2VkICE9PSBmYWxzZSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5mb2N1c0lucHV0KCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG5cdCAgICAgICAgICAgICAgICBzaG93T3B0aW9uczogZmFsc2Vcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogXCJyZW1vdmVWYWx1ZVwiLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVWYWx1ZShpbmRleCkge1xuXHQgICAgICAgICAgICB2YXIgbmV3VmFsdWVzID0gW107XG5cdCAgICAgICAgICAgIHZhciByZW1vdmVkVmFsdWUgPSB2b2lkIDA7XG5cdCAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcblx0ICAgICAgICAgICAgICAgIG5ld1ZhbHVlcyA9IHRoaXMucHJvcHMudmFsdWVzLnNsaWNlKDAsIHRoaXMucHJvcHMudmFsdWVzLmxlbmd0aCAtIDEpO1xuXHQgICAgICAgICAgICAgICAgcmVtb3ZlZFZhbHVlID0gdGhpcy5wcm9wcy52YWx1ZXNbdGhpcy5wcm9wcy52YWx1ZXMubGVuZ3RoIC0gMV0udmFsdWU7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBuZXdWYWx1ZXMgPSB0aGlzLnByb3BzLnZhbHVlcy5maWx0ZXIoZnVuY3Rpb24gKHYsIGkpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZW1vdmVkVmFsdWUgPSB2LnZhbHVlO1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBpICE9PSBpbmRleDtcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLm9uT3B0aW9uc0NoYW5nZSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5vbk9wdGlvbnNDaGFuZ2UodGhpcy5wcm9wcy5vcHRpb25zLm1hcChmdW5jdGlvbiAob3B0aW9uKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbi52YWx1ZSA9PT0gcmVtb3ZlZFZhbHVlID8gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9uLCB7IGRpc2FibGVkOiBmYWxzZSB9KSA6IG9wdGlvbjtcblx0ICAgICAgICAgICAgICAgIH0pKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0aGlzLnByb3BzLm9uVmFsdWVzQ2hhbmdlKG5ld1ZhbHVlcyk7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogXCJjbGVhcklucHV0VmFsdWVcIixcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXJJbnB1dFZhbHVlKCkge1xuXHQgICAgICAgICAgICB0aGlzLnByb3BzLm9uSW5wdXRDaGFuZ2UoJycpO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6IFwiaGFuZGxlS2V5UHJlc3NcIixcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlS2V5UHJlc3MoZSkge1xuXHQgICAgICAgICAgICBpZiAoZS5rZXlDb2RlID09PSA4ICYmICF0aGlzLnByb3BzLnZhbHVlKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVZhbHVlKC0xKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAvLyB0b2RvXG5cdCAgICAgICAgICAgIC8vIGlmIChlLmtleUNvZGUgPT09IDEzICYmIHRoaXMuc3RhdGUuc2hvd09wdGlvbnMpIHtcblx0ICAgICAgICAgICAgLy8gICB0aGlzLmFkZFZhbHVlKClcblx0ICAgICAgICAgICAgLy8gfVxuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6IFwiZm9jdXNJbnB1dFwiLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBmb2N1c0lucHV0KCkge1xuXHQgICAgICAgICAgICB0aGlzLmlucHV0LmZvY3VzKCk7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogXCJoYW5kbGVPdXRzaWRlQ2xpY2tcIixcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlT3V0c2lkZUNsaWNrKGUpIHtcblx0ICAgICAgICAgICAgaWYgKCEoMCwgX2lzRGVzY2VuZGFudDIuZGVmYXVsdCkodGhpcy5pbnB1dFdyYXAsIGUudGFyZ2V0KSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG5cdCAgICAgICAgICAgICAgICAgICAgc2hvd09wdGlvbnM6IGZhbHNlXG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6IFwiaGFuZGxlSW5wdXRXcmFwQ2xpY2tcIixcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlSW5wdXRXcmFwQ2xpY2soKSB7XG5cdCAgICAgICAgICAgIHRoaXMuZm9jdXNJbnB1dCgpO1xuXHQgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcblx0ICAgICAgICAgICAgICAgIHNob3dPcHRpb25zOiB0cnVlXG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG5cdCAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlT3V0c2lkZUNsaWNrKTtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuXHQgICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZU91dHNpZGVDbGljayk7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogXCJyZW5kZXJcIixcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHQgICAgICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblx0XG5cdCAgICAgICAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzO1xuXHQgICAgICAgICAgICB2YXIgbGFiZWwgPSBfcHJvcHMubGFiZWw7XG5cdCAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBfcHJvcHMudmFsdWVzO1xuXHQgICAgICAgICAgICB2YXIgb25BZGROZXdWYWx1ZSA9IF9wcm9wcy5vbkFkZE5ld1ZhbHVlO1xuXHRcblx0ICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5wcm9wcy52YWx1ZSB8fCAnJztcblx0ICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLnByb3BzLm9wdGlvbnMgfHwgW107XG5cdCAgICAgICAgICAgIHZhciBpbnB1dFdpZHRoID0gdmFsdWVzLmxlbmd0aCA+IDAgPyB2YWx1ZS5sZW5ndGggPT09IDAgPyAxNiA6IHZhbHVlLmxlbmd0aCAqIDE2IDogJzEwMCUnO1xuXHQgICAgICAgICAgICB2YXIgcGxhY2Vob2xkZXIgPSB2YWx1ZXMubGVuZ3RoID4gMCA/ICcnIDogdGhpcy5wcm9wcy5wbGFjZWhvbGRlcjtcblx0ICAgICAgICAgICAgdmFyIHNlbGVjdGl6ZUlucHV0U3R5bGVOYW1lID0gKDAsIF9jbGFzc25hbWVzMi5kZWZhdWx0KSh7XG5cdCAgICAgICAgICAgICAgICAnc2VsZWN0aXplLWlucHV0JzogdHJ1ZSxcblx0ICAgICAgICAgICAgICAgICdzZWxlY3RpemUtaW5wdXQtLWZvY3VzJzogdGhpcy5zdGF0ZS5mb2N1cyxcblx0ICAgICAgICAgICAgICAgICdzZWxlY3RpemUtaW5wdXQtLWVtcHR5JzogdmFsdWVzLmxlbmd0aCA9PT0gMFxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgc3R5bGVOYW1lOiBcInNlbGVjdGl6ZS13cmFwXCIsIGNsYXNzTmFtZTogdGhpcy5wcm9wcy5jbGFzc05hbWUgfHwgJycgfSwgbGFiZWwgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIsIHsgY2xhc3NOYW1lOiBcImZvcm0tbGFiZWxcIiB9LCBsYWJlbCkgOiBudWxsLCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IHN0eWxlTmFtZTogc2VsZWN0aXplSW5wdXRTdHlsZU5hbWUsIG9uQ2xpY2s6IHRoaXMuaGFuZGxlSW5wdXRXcmFwQ2xpY2ssIHJlZjogZnVuY3Rpb24gcmVmKF9yZWYpIHtcblx0ICAgICAgICAgICAgICAgICAgICBfdGhpczIuaW5wdXRXcmFwID0gX3JlZjtcblx0ICAgICAgICAgICAgICAgIH0gfSwgdmFsdWVzLm1hcChmdW5jdGlvbiAodiwgaW5kZXgpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBrZXk6IGluZGV4LCBzdHlsZU5hbWU6IFwic2VsZWN0aXplLXRhZ1wiIH0sIHYubmFtZSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0ljb24yLmRlZmF1bHQsIHsgc3R5bGVOYW1lOiBcImljb24tcmVtb3ZlXCIsIHNpemU6IDIwLCBuYW1lOiBcImNsb3NlXCIsIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczIucmVtb3ZlVmFsdWUoaW5kZXgpO1xuXHQgICAgICAgICAgICAgICAgICAgIH0gfSkpO1xuXHQgICAgICAgICAgICB9KSwgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCB7IHN0eWxlOiB7IHdpZHRoOiBpbnB1dFdpZHRoIH0sIHJlZjogZnVuY3Rpb24gcmVmKF9yZWYyKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgX3RoaXMyLmlucHV0ID0gX3JlZjI7XG5cdCAgICAgICAgICAgICAgICB9LCB2YWx1ZTogdmFsdWUsIHBsYWNlaG9sZGVyOiBwbGFjZWhvbGRlciwgb25CbHVyOiBmdW5jdGlvbiBvbkJsdXIoZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7IGZvY3VzOiBmYWxzZSB9KTtcblx0ICAgICAgICAgICAgICAgIH0sIG9uRm9jdXM6IGZ1bmN0aW9uIG9uRm9jdXMoZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7IGZvY3VzOiB0cnVlIH0pO1xuXHQgICAgICAgICAgICAgICAgfSwgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICBfdGhpczIucHJvcHMub25JbnB1dENoYW5nZShlLnRhcmdldC52YWx1ZSk7XG5cdCAgICAgICAgICAgICAgICB9LCBvbktleURvd246IGZ1bmN0aW9uIG9uS2V5RG93bihlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgX3RoaXMyLmhhbmRsZUtleVByZXNzKGUpO1xuXHQgICAgICAgICAgICAgICAgfSB9KSksIHRoaXMuc3RhdGUuc2hvd09wdGlvbnMgJiYgKG9wdGlvbnMubGVuZ3RoICE9PSAwIHx8IG9uQWRkTmV3VmFsdWUpID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJ1bFwiLCB7IHN0eWxlTmFtZTogXCJxdWVyeS1yZXN1bHRzXCIgfSwgb3B0aW9ucy5tYXAoZnVuY3Rpb24gKG9wdGlvbiwgaW5kZXgpIHtcblx0ICAgICAgICAgICAgICAgIGlmIChvcHRpb24uZGlzYWJsZWQpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJsaVwiLCB7IGtleTogaW5kZXgsIGNsYXNzTmFtZTogXCJkaXNhYmxlZFwiIH0sIG9wdGlvbi5uYW1lKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImxpXCIsIHsga2V5OiBpbmRleCwgb25DbGljazogZnVuY3Rpb24gb25DbGljayhlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzMi5hZGRWYWx1ZShvcHRpb24pO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMyLnByb3BzLm9uT3B0aW9uQ2xpY2spIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzMi5wcm9wcy5vbk9wdGlvbkNsaWNrKG9wdGlvbik7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB9IH0sIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCBudWxsLCBvcHRpb24ubmFtZSkpO1xuXHQgICAgICAgICAgICB9KSwgb25BZGROZXdWYWx1ZSA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwibGlcIiwgeyBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICBvbkFkZE5ld1ZhbHVlKF90aGlzMi5wcm9wcy52YWx1ZSk7XG5cdCAgICAgICAgICAgICAgICB9LCBjbGFzc05hbWU6IFwiYWRkXCIgfSwgXCLmt7vliqAgXCIsIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3Ryb25nXCIsIG51bGwsIHRoaXMucHJvcHMudmFsdWUpKSA6IG51bGwpIDogbnVsbCk7XG5cdCAgICAgICAgfVxuXHQgICAgfV0pO1xuXHRcblx0ICAgIHJldHVybiBTZWxlY3RpemVJbnB1dDtcblx0fShfcmVhY3QuQ29tcG9uZW50KTtcblx0U2VsZWN0aXplSW5wdXQgPSBfX2RlY29yYXRlKFsoMCwgX3JlYWN0Q3NzTW9kdWxlczIuZGVmYXVsdCkoc3R5bGVzLCB7XG5cdCAgICBhbGxvd011bHRpcGxlOiB0cnVlXG5cdH0pXSwgU2VsZWN0aXplSW5wdXQpO1xuXHRleHBvcnRzLmRlZmF1bHQgPSBTZWxlY3RpemVJbnB1dDtcblxuLyoqKi8gfSxcblxuLyoqKi8gMTc3OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0Ly8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblx0bW9kdWxlLmV4cG9ydHMgPSB7XCJzZWxlY3RpemUtd3JhcFwiOlwic2VsZWN0aXplLXdyYXBfM0FNQWlcIixcInNlbGVjdGl6ZS1pbnB1dFwiOlwic2VsZWN0aXplLWlucHV0XzE0YmdQXCIsXCJzZWxlY3RpemUtaW5wdXQtLWZvY3VzXCI6XCJzZWxlY3RpemUtaW5wdXQtLWZvY3VzX1VuWjhCXCIsXCJzZWxlY3RpemUtaW5wdXQtLWVtcHR5XCI6XCJzZWxlY3RpemUtaW5wdXQtLWVtcHR5X3huN1V5XCIsXCJxdWVyeS1yZXN1bHRzXCI6XCJxdWVyeS1yZXN1bHRzX09nRTJ0XCIsXCJzZWxlY3RpemUtdGFnXCI6XCJzZWxlY3RpemUtdGFnXzNhRDEzXCIsXCJpY29uLXJlbW92ZVwiOlwiaWNvbi1yZW1vdmVfMU83Rl9cIn07XG5cbi8qKiovIH0sXG5cbi8qKiovIDE3ODpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9UZXh0YXJlYSA9IF9fd2VicGFja19yZXF1aXJlX18oMTc5KTtcblx0XG5cdHZhciBfVGV4dGFyZWEyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVGV4dGFyZWEpO1xuXG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cblx0ZXhwb3J0cy5kZWZhdWx0ID0gX1RleHRhcmVhMi5kZWZhdWx0O1xuXG4vKioqLyB9LFxuXG4vKioqLyAxNzk6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXHRcblx0dmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cdFxuXHR2YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0XG5cdHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXHRcblx0dmFyIF9yZWFjdENzc01vZHVsZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgyKTtcblx0XG5cdHZhciBfcmVhY3RDc3NNb2R1bGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Q3NzTW9kdWxlcyk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblx0XG5cdGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXHRcblx0ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cdFxuXHR2YXIgX19kZWNvcmF0ZSA9IHVuZGVmaW5lZCAmJiB1bmRlZmluZWQuX19kZWNvcmF0ZSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcblx0ICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCxcblx0ICAgICAgICByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYyxcblx0ICAgICAgICBkO1xuXHQgICAgaWYgKCh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKFJlZmxlY3QpKSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7ZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuXHQgICAgICAgIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG5cdCAgICB9cmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcblx0fTtcblx0XG5cdHZhciBzdHlsZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4MCk7XG5cdHZhciBUZXh0YXJlYSA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG5cdCAgICBfaW5oZXJpdHMoVGV4dGFyZWEsIF9Db21wb25lbnQpO1xuXHRcblx0ICAgIGZ1bmN0aW9uIFRleHRhcmVhKHByb3BzKSB7XG5cdCAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRleHRhcmVhKTtcblx0XG5cdCAgICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIE9iamVjdC5nZXRQcm90b3R5cGVPZihUZXh0YXJlYSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXHQgICAgfVxuXHRcblx0ICAgIF9jcmVhdGVDbGFzcyhUZXh0YXJlYSwgW3tcblx0ICAgICAgICBrZXk6IFwicmVuZGVyXCIsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcblx0ICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cdFxuXHQgICAgICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBzdHlsZU5hbWU6IFwidGV4dGFyZWEtd3JhcFwiLCBjbGFzc05hbWU6IHRoaXMucHJvcHMuY2xhc3NOYW1lIHx8ICcnIH0sIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIiwgeyBwbGFjZWhvbGRlcjogdGhpcy5wcm9wcy5wbGFjZWhvbGRlciwgdmFsdWU6IHRoaXMucHJvcHMudmFsdWUsIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZShlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgX3RoaXMyLnByb3BzLm9uQ2hhbmdlKGUpO1xuXHQgICAgICAgICAgICAgICAgfSwgc3R5bGVOYW1lOiBcInRleHRhcmVhXCIsIHR5cGU6IHRoaXMucHJvcHMudHlwZSA/IHRoaXMucHJvcHMudHlwZSA6ICd0ZXh0JywgbmFtZTogdGhpcy5wcm9wcy5uYW1lID8gdGhpcy5wcm9wcy5uYW1lIDogbnVsbCB9KSk7XG5cdCAgICAgICAgfVxuXHQgICAgfV0pO1xuXHRcblx0ICAgIHJldHVybiBUZXh0YXJlYTtcblx0fShfcmVhY3QuQ29tcG9uZW50KTtcblx0VGV4dGFyZWEgPSBfX2RlY29yYXRlKFsoMCwgX3JlYWN0Q3NzTW9kdWxlczIuZGVmYXVsdCkoc3R5bGVzLCB7XG5cdCAgICBhbGxvd011bHRpcGxlOiB0cnVlXG5cdH0pXSwgVGV4dGFyZWEpO1xuXHRleHBvcnRzLmRlZmF1bHQgPSBUZXh0YXJlYTtcblxuLyoqKi8gfSxcblxuLyoqKi8gMTgwOlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0Ly8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblx0bW9kdWxlLmV4cG9ydHMgPSB7XCJ0ZXh0YXJlYS13cmFwXCI6XCJ0ZXh0YXJlYS13cmFwX1hrcGoxIGlucHV0LXdyYXBfM2RIQTNcIixcInRleHRhcmVhXCI6XCJ0ZXh0YXJlYV8xRWRvU1wifTtcblxuLyoqKi8gfSxcblxuLyoqKi8gMTgxOlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0Ly8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblx0bW9kdWxlLmV4cG9ydHMgPSB7XCJ0aXRsZVwiOlwidGl0bGVfQlZPN2VcIixcInBvcHVwXCI6XCJwb3B1cF9NUENxclwiLFwiaGVhZGVyXCI6XCJoZWFkZXJfMUluSWZcIixcImF1dGhvclwiOlwiYXV0aG9yXzI4QmlBXCIsXCJkZXNjcmlwdGlvblwiOlwiZGVzY3JpcHRpb25fRDlyVk5cIn07XG5cbi8qKiovIH0sXG5cbi8qKiovIDE4Mjpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cdG1vZHVsZS5leHBvcnRzID0ge1wibWV0YS1pdGVtXCI6XCJtZXRhLWl0ZW1fMmNSeUpcIixcImJvb2tcIjpcImJvb2tfM09xel9cIixcImJvb2stbWV0YVwiOlwiYm9vay1tZXRhXzNnbGNaXCIsXCJib29rLW5hbWVcIjpcImJvb2stbmFtZV8yakl1WiBtZXRhLWl0ZW1fMmNSeUpcIixcImJvb2stYXV0aG9yXCI6XCJib29rLWF1dGhvcl8xVk03ZSBtZXRhLWl0ZW1fMmNSeUpcIixcImJvb2stY292ZXJcIjpcImJvb2stY292ZXJfMWpySzhcIixcImJvb2stZGVzY1wiOlwiYm9vay1kZXNjX3hGRktsXCIsXCJib29rLS1jYXJkXCI6XCJib29rLS1jYXJkXzNGT2t5IGJvb2tfM09xel9cIn07XG5cbi8qKiovIH0sXG5cbi8qKiovIDE4Mzpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cdG1vZHVsZS5leHBvcnRzID0ge1wiYm9vay1saXN0XCI6XCJib29rLWxpc3RfMnNfSmxcIn07XG5cbi8qKiovIH0sXG5cbi8qKiovIDE4NDpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cdG1vZHVsZS5leHBvcnRzID0ge1wic2VjdGlvbi10aXRsZVwiOlwic2VjdGlvbi10aXRsZV8yS3YzRFwiLFwiYm9vay1saXN0LXNlY3Rpb25cIjpcImJvb2stbGlzdC1zZWN0aW9uXzJDZkRlXCIsXCJtb3JlXCI6XCJtb3JlX21nUUhnXCJ9O1xuXG4vKioqLyB9LFxuXG4vKioqLyAxODU6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXHRcblx0dmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cdFxuXHR2YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0XG5cdHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXHRcblx0dmFyIF9yZWFjdENzc01vZHVsZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgyKTtcblx0XG5cdHZhciBfcmVhY3RDc3NNb2R1bGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0Q3NzTW9kdWxlcyk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblx0XG5cdGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXHRcblx0ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cdFxuXHR2YXIgX19kZWNvcmF0ZSA9IHVuZGVmaW5lZCAmJiB1bmRlZmluZWQuX19kZWNvcmF0ZSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcblx0ICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCxcblx0ICAgICAgICByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYyxcblx0ICAgICAgICBkO1xuXHQgICAgaWYgKCh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKFJlZmxlY3QpKSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7ZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuXHQgICAgICAgIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG5cdCAgICB9cmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcblx0fTtcblx0XG5cdHZhciBzdHlsZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4Nik7XG5cdHZhciBDb21wID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcblx0ICAgIF9pbmhlcml0cyhDb21wLCBfQ29tcG9uZW50KTtcblx0XG5cdCAgICBmdW5jdGlvbiBDb21wKHByb3BzKSB7XG5cdCAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbXApO1xuXHRcblx0ICAgICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgT2JqZWN0LmdldFByb3RvdHlwZU9mKENvbXApLmNhbGwodGhpcywgcHJvcHMpKTtcblx0ICAgIH1cblx0XG5cdCAgICBfY3JlYXRlQ2xhc3MoQ29tcCwgW3tcblx0ICAgICAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7fVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogXCJyZW5kZXJcIixcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuXHQgICAgICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBzdHlsZU5hbWU6IFwiZHJvcGRvd25cIiB9LCBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBzdHlsZU5hbWU6IFwiZHJvcGRvd24tdG9nZ2xlXCIgfSwgdGhpcy5wcm9wcy50aXRsZSwgXCIgXCIsIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IHN0eWxlTmFtZTogXCJkcm9wZG93bi1jYXJldFwiIH0pKSk7XG5cdCAgICAgICAgfVxuXHQgICAgfV0pO1xuXHRcblx0ICAgIHJldHVybiBDb21wO1xuXHR9KF9yZWFjdC5Db21wb25lbnQpO1xuXHRDb21wID0gX19kZWNvcmF0ZShbKDAsIF9yZWFjdENzc01vZHVsZXMyLmRlZmF1bHQpKHN0eWxlcyldLCBDb21wKTtcblx0ZXhwb3J0cy5kZWZhdWx0ID0gQ29tcDtcblxuLyoqKi8gfSxcblxuLyoqKi8gMTg2OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0Ly8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblx0bW9kdWxlLmV4cG9ydHMgPSB7XCJkcm9wZG93bi1pdGVtXCI6XCJkcm9wZG93bi1pdGVtXzE4UUZBIGxpZ2h0LWxpbmtfNWh6dkNcIixcImxpZ2h0LWxpbmtcIjpcImxpZ2h0LWxpbmtfNWh6dkNcIixcImRyb3Bkb3duXCI6XCJkcm9wZG93bl8zRUV3ZVwiLFwiZHJvcGRvd24tdG9nZ2xlXCI6XCJkcm9wZG93bi10b2dnbGVfM25RazlcIixcImRyb3Bkb3duLW1lbnVcIjpcImRyb3Bkb3duLW1lbnVfMnlIZ2hcIixcImRyb3Bkb3duLWNhcmV0XCI6XCJkcm9wZG93bi1jYXJldF90OGRHWVwiLFwic2VwXCI6XCJzZXBfM3hObWJcIixcImRyb3Bkb3duLW1lbnUtLWRhcmtcIjpcImRyb3Bkb3duLW1lbnUtLWRhcmtfMnVaeGggZHJvcGRvd24tbWVudV8yeUhnaFwifTtcblxuLyoqKi8gfSxcblxuLyoqKi8gMTg3OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0Ly8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblx0bW9kdWxlLmV4cG9ydHMgPSB7XCJwYWdlLXRpdGxlXCI6XCJwYWdlLXRpdGxlX1ozNjZWXCIsXCJoZXJvLWltYWdlXCI6XCJoZXJvLWltYWdlXzE0WlVYXCIsXCJsb2dvXCI6XCJsb2dvX3NpVDdBXCIsXCJidG5cIjpcImJ0bl8xZGNtcVwifTtcblxuLyoqKi8gfVxuXG59KTtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAyLjIuanNcbiAqKi8iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnXG5pbXBvcnQgeyBmZXRjaEJvb2tzLCBmZXRjaENvbGxlY3Rpb25zLCBzZW5kTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vLi4vc3RvcmUvYWN0aW9ucydcbmltcG9ydCAqIGFzIHNlbGVjdG9ycyBmcm9tICcuLi8uLi9zdG9yZS9zZWxlY3RvcnMnXG5pbXBvcnQgQm9va0xpc3RTZWN0aW9uIGZyb20gJy4uLy4uL2NvbXBvbmVudHMvQm9va0xpc3RTZWN0aW9uJ1xuaW1wb3J0IERvY0NvbnRhaW5lciBmcm9tICcuLi8uLi9jb250YWluZXJzL0RvY0NvbnRhaW5lcidcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJy4uLy4uL2VsZW1lbnRzL19mb3JtJ1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJ1xuaW1wb3J0IENTU01vZHVsZXMgZnJvbSAncmVhY3QtY3NzLW1vZHVsZXMnXG5pbXBvcnQgeyBDb250YWluZXIgfSBmcm9tICcuLi8uLi9lbGVtZW50cy9fbGF5b3V0J1xuY29uc3Qgc3R5bGVzID0gcmVxdWlyZSgnLi9BcHBIb21lLnNjc3MnKVxuaW1wb3J0IEhlaGUgZnJvbSAnLi4vLi4vZWxlbWVudHMvSGVoZSdcbmltcG9ydCB7IERyb3Bkb3duLCBEcm9wZG93bkl0ZW0sIERyb3Bkb3duSXRlbVNlcCB9IGZyb20gJy4uLy4uL2VsZW1lbnRzL0Ryb3Bkb3duJ1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlcidcblxuaW50ZXJmYWNlIElQcm9wcyB7XG59XG5cbmludGVyZmFjZSBJQWxsUHJvcHMgZXh0ZW5kcyBJUHJvcHMge1xuICBmZXRjaEJvb2tzOiBhbnlcbiAgZmV0Y2hDb2xsZWN0aW9uczogYW55XG4gIHNlc3Npb246IGFueVxuICBuZXdlc3RCb29rczogYW55XG4gIGJvb2tDb2xsZWN0aW9uczogYW55XG4gIHNlbmROb3RpZmljYXRpb246IGFueVxuICBib29rU2hlbGY6IGFueVtdXG59XG5cbmludGVyZmFjZSBJU3RhdGUge1xuICBzaG93UmVjZW50UmVhZGluZzogYm9vbGVhblxufVxuXG5AQ1NTTW9kdWxlcyhzdHlsZXMpXG5jbGFzcyBIb21lIGV4dGVuZHMgQ29tcG9uZW50PElBbGxQcm9wcywgSVN0YXRlPiB7XG5cbiAgc3RhdGljIGZldGNoRGF0YSh7c3RvcmV9KSB7XG4gICAgcmV0dXJuIHN0b3JlLmRpc3BhdGNoKGZldGNoQm9va3MoKSlcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHNob3dSZWNlbnRSZWFkaW5nOiBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMucHJvcHMuZmV0Y2hCb29rcygpXG4gICAgdGhpcy5wcm9wcy5mZXRjaENvbGxlY3Rpb25zKClcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuc2Vzc2lvbi5pc0ZldGNoaW5nICYmICFuZXh0UHJvcHMuc2Vzc2lvbi5pc0ZldGNoaW5nKSB7XG4gICAgICBpZiAobmV4dFByb3BzLnNlc3Npb24udXNlci5yb2xlICE9PSAndmlzaXRvcicpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgc2hvd1JlY2VudFJlYWRpbmc6IHRydWVcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgbGV0IHsgbmV3ZXN0Qm9va3MsIGJvb2tDb2xsZWN0aW9ucyB9ID0gdGhpcy5wcm9wc1xuXG4gICAgYm9va0NvbGxlY3Rpb25zID0gYm9va0NvbGxlY3Rpb25zXG4gICAgICAubWFwKGl0ZW0gPT4gKHtcbiAgICAgICAgbmFtZTogaXRlbS5uYW1lLFxuICAgICAgICBpZDogaXRlbS5pZCxcbiAgICAgICAgYm9va0NvdmVyczogaXRlbS5pdGVtcy5tYXAoYm9vayA9PiBib29rLmNvdmVyKSxcbiAgICAgICAgZGVzY3JpcHRpb246IGl0ZW0uZGVzY3JpcHRpb25cbiAgICAgIH0pKVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxEb2NDb250YWluZXIgYm9keUNsYXNzPVwiaG9tZVwiPlxuICAgICAgICB7XG4gICAgICAgICAgdGhpcy5wcm9wcy5zZXNzaW9uLnVzZXIucm9sZSA9PT0gJ3Zpc2l0b3InICYmIHRoaXMucHJvcHMuc2Vzc2lvbi5pc0ZldGNoaW5nID09PSBmYWxzZSA/IChcbiAgICAgICAgICAgIDxkaXYgc3R5bGVOYW1lPVwiaGVyby1pbWFnZVwiPlxuICAgICAgICAgICAgICA8Q29udGFpbmVyPlxuICAgICAgICAgICAgICAgIDxkaXYgc3R5bGVOYW1lPVwibG9nb1wiPlJlYWRyPC9kaXY+XG4gICAgICAgICAgICAgICAgPGgxIHN0eWxlTmFtZT1cInBhZ2UtdGl0bGVcIj7mlrDnmoTpmIXor7vkvZPpqow8L2gxPlxuICAgICAgICAgICAgICAgIDxCdXR0b24gdG89XCIvc2lnbnVwXCI+546w5Zyo5Yqg5YWlPC9CdXR0b24+XG4gICAgICAgICAgICAgIDwvQ29udGFpbmVyPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKSA6IG51bGxcbiAgICAgICAgfVxuICAgICAgICA8SGVoZSB0aXRsZT17KDxkaXY+d3RmOiA8c3Bhbj5oZWhoZWhlaGU8L3NwYW4+PC9kaXY+KSB9Lz5cbiAgICAgICAgPERyb3Bkb3duIHRpdGxlPXsoPGRpdiBzdHlsZT17eyBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyB9fT53dGY6IDxzcGFuPmhlaGhlaGVoZTwvc3Bhbj48L2Rpdj4pIH0+XG4gICAgICAgICAgPERyb3Bkb3duSXRlbT5mZmZmZjwvRHJvcGRvd25JdGVtPlxuICAgICAgICAgIDxEcm9wZG93bkl0ZW0+PGEgaHJlZj1cIiNcIj5mZmZmZjwvYT48L0Ryb3Bkb3duSXRlbT5cbiAgICAgICAgPC9Ecm9wZG93bj5cbiAgICAgICAgPENvbnRhaW5lcj5cbiAgICAgICAgICA8Qm9va0xpc3RTZWN0aW9uXG4gICAgICAgICAgICBib29rRW50aXRpZXM9e25ld2VzdEJvb2tzLnNsaWNlKDAsIDYpIH1cbiAgICAgICAgICAgIHRpdGxlPVwi5paw5Lmm6YCf6YCSXCJcbiAgICAgICAgICAgIG1vcmVMaW5rPVwiL2Jyb3dzZVwiXG4gICAgICAgICAgICAvPlxuICAgICAgICA8L0NvbnRhaW5lcj5cbiAgICAgIDwvRG9jQ29udGFpbmVyPlxuICAgIClcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKSB7XG4gIHJldHVybiB7XG4gICAgdXNlckJvb2tzOiBbXSxcbiAgICBuZXdlc3RCb29rczogc2VsZWN0b3JzLmJvb2tzU2VsZWN0b3Ioc3RhdGUpLFxuICAgIHNlc3Npb246IHN0YXRlLnNlc3Npb24sXG4gICAgYm9va0NvbGxlY3Rpb25zOiBfLmdldChzdGF0ZS5wYWdpbmF0aW9uLCAnYm9va0NvbGxlY3Rpb25zLmRlZmF1bHQnLCBudWxsKVxuICAgICAgPyBzdGF0ZS5wYWdpbmF0aW9uLmJvb2tDb2xsZWN0aW9ucy5kZWZhdWx0Lmlkcy5tYXAoaWQgPT4gc3RhdGUuZW50aXRpZXMuYm9va0NvbGxlY3Rpb25zW2lkXSlcbiAgICAgIDogW10sXG4gICAgYm9va1NoZWxmOiBfLmdldChzdGF0ZS5wYXlsb2FkcywgJ2Jvb2tTaGVsZi5kYXRhJywgW10pXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdDx7fSwge30sIHt9PihcbiAgbWFwU3RhdGVUb1Byb3BzLFxuICB7IGZldGNoQm9va3MsIGZldGNoQ29sbGVjdGlvbnMsIHNlbmROb3RpZmljYXRpb24gfVxuKShIb21lKVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogc3JjL2lzb21vcnBoaWMvcm91dGVzL0FwcEhvbWUvQXBwSG9tZS50c3hcbiAqKi8iLCJpbXBvcnQgeyBjcmVhdGVTZWxlY3RvciB9IGZyb20gJ3Jlc2VsZWN0J1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJ1xuaW1wb3J0IHsgc2VsZWN0UGFnaW5hdGVkRW50aXRpZXMgfSBmcm9tICcuL2NvbW1vbidcbmltcG9ydCAqIGFzIGNvbW1vbiBmcm9tICcuL2NvbW1vbidcblxuZXhwb3J0IGNvbnN0IHF1ZXJ5RG91YmFuQm9va3NTZWxlY3RvciA9IHF1ZXJ5ID0+IGNyZWF0ZVNlbGVjdG9yKFxuICBzZWxlY3RQYWdpbmF0ZWRFbnRpdGllcyh7XG4gICAgZW50aXRpZXNOYW1lOiAnZG91YmFuQm9va3MnLFxuICAgIHBhZ2luYXRpb25OYW1lOiAnZG91YmFuQm9va3MnLFxuICAgIHBhZ2luYXRpb25RdWVyeTogcXVlcnlcbiAgfSksXG4gIGJvb2tzID0+IGJvb2tzXG4pXG5cbmV4cG9ydCBjb25zdCBxdWVyeUF1dGhvcnNTZWxlY3RvciA9IHF1ZXJ5ID0+IHNlbGVjdFBhZ2luYXRlZEVudGl0aWVzKHtcbiAgZW50aXRpZXNOYW1lOiAnYXV0aG9ycycsXG4gIHBhZ2luYXRpb25OYW1lOiAnYXV0aG9ycycsXG4gIHBhZ2luYXRpb25RdWVyeTogcXVlcnlcbn0pXG5cbmV4cG9ydCBjb25zdCBzZWFyY2hCb29rc1NlbGVjdG9yID0gcXVlcnkgPT4gc2VsZWN0UGFnaW5hdGVkRW50aXRpZXMoe1xuICBlbnRpdGllc05hbWU6ICdib29rcycsXG4gIHBhZ2luYXRpb25OYW1lOiAnYm9va3MnLFxuICBwYWdpbmF0aW9uUXVlcnk6IHF1ZXJ5XG59KVxuXG5leHBvcnQgY29uc3QgZG91YmFuQm9va3NBc09wdGlvbnMgPSBxdWVyeSA9PiBjcmVhdGVTZWxlY3RvcihcbiAgcXVlcnlEb3ViYW5Cb29rc1NlbGVjdG9yKHF1ZXJ5KSxcbiAgYm9va3MgPT4ge1xuICAgIHJldHVybiBib29rcy5tYXAoYm9vayA9PiAoe1xuICAgICAgbmFtZTogYm9vay50aXRsZSxcbiAgICAgIHZhbHVlOiBib29rLmlkLFxuICAgICAgYWRkaXRpb25hbDoge1xuICAgICAgICBkZXNjcmlwdGlvbjogYm9vay5zdW1tYXJ5LFxuICAgICAgICBjb3ZlcjogYm9vay5pbWFnZXMubGFyZ2UsXG4gICAgICAgIGF1dGhvcjogYm9vay5hdXRob3Iuam9pbignLCAnKVxuICAgICAgfVxuICAgIH0pKVxuICB9XG4pXG5cbmV4cG9ydCBjb25zdCBhdXRob3JzQXNPcHRpb25zID0gcXVlcnkgPT4gY3JlYXRlU2VsZWN0b3IoXG4gIHF1ZXJ5QXV0aG9yc1NlbGVjdG9yKHF1ZXJ5KSxcbiAgaXRlbXMgPT4ge1xuICAgIHJldHVybiBpdGVtcy5tYXAoaXRlbSA9PiAoe1xuICAgICAgbmFtZTogaXRlbS5uYW1lLFxuICAgICAgdmFsdWU6IGl0ZW0uaWRcbiAgICB9KSlcbiAgfVxuKVxuXG5leHBvcnQgY29uc3QgYm9va3NTZWFyY2hBc09wdGlvbnMgPSBxdWVyeSA9PiBjcmVhdGVTZWxlY3RvcihcbiAgc2VhcmNoQm9va3NTZWxlY3RvcihxdWVyeSksXG4gIGl0ZW1zID0+IHtcbiAgICByZXR1cm4gaXRlbXMubWFwKGl0ZW0gPT4gKHtcbiAgICAgIG5hbWU6IGl0ZW0udGl0bGUsXG4gICAgICB2YWx1ZTogaXRlbS5pZFxuICAgIH0pKVxuICB9XG4pXG5cbmV4cG9ydCBjb25zdCBib29rc1NlbGVjdG9yID0gY3JlYXRlU2VsZWN0b3IoXG4gIHNlbGVjdFBhZ2luYXRlZEVudGl0aWVzKHtcbiAgICBlbnRpdGllc05hbWU6ICdib29rcycsXG4gICAgcGFnaW5hdGlvbk5hbWU6ICdib29rcycsXG4gICAgcGFnaW5hdGlvbktleTogJ2RlZmF1bHQnXG4gIH0pLFxuICBib29rcyA9PiBib29rc1xuKVxuXG5leHBvcnQgY29uc3QgdXNlcnNTZWxlY3RvciA9IHNlbGVjdFBhZ2luYXRlZEVudGl0aWVzKHtcbiAgZW50aXRpZXNOYW1lOiAndXNlcnMnLFxuICBwYWdpbmF0aW9uTmFtZTogJ3VzZXJzJyxcbiAgcGFnaW5hdGlvbktleTogJ2RlZmF1bHQnXG59KVxuXG5leHBvcnQgKiBmcm9tICcuL2NvbW1vbidcbmV4cG9ydCB7IGNvbW1vbiB9XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBzcmMvaXNvbW9ycGhpYy9zdG9yZS9zZWxlY3RvcnMvaW5kZXgudHNcbiAqKi8iLCJpbXBvcnQgeyBjcmVhdGVTZWxlY3RvciB9IGZyb20gJ3Jlc2VsZWN0J1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJ1xuXG5jb25zdCBlbnRpdGllc1NlbGVjdG9yID0gbmFtZSA9PiBzdGF0ZSA9PiB7XG4gIHJldHVybiBzdGF0ZS5lbnRpdGllc1tuYW1lXSB8fCB7fVxufVxuY29uc3QgcGFnaW5hdGlvblNlbGVjdG9yID0gKG5hbWUsIGtleSA9ICdkZWZhdWx0JykgPT4gc3RhdGUgPT4ge1xuICByZXR1cm4gXy5nZXQoc3RhdGUucGFnaW5hdGlvbiwgYCR7bmFtZX0uJHtrZXl9Lmlkc2AsIFtdKVxufVxuZXhwb3J0IGNvbnN0IHBhZ2luYXRpb25MaW5rU2VsZWN0b3IgPSAobmFtZSwga2V5ID0gJ2RlZmF1bHQnKSA9PiBzdGF0ZSA9PiB7XG4gIHJldHVybiBfLnBpY2soXy5nZXQoc3RhdGUucGFnaW5hdGlvbiwgYCR7bmFtZX0uJHtrZXl9YCwge30pLCBbJ25leHQnLCAnbGFzdCddKVxufVxuY29uc3QgcXVlcnlQYWdpbmF0aW9uU2VsZWN0b3IgPSAobmFtZSwgcXVlcnkpID0+IHN0YXRlID0+IHtcbiAgcmV0dXJuIF8uZ2V0KHN0YXRlLnBhZ2luYXRpb24sIFtuYW1lLCAncXVlcnknLCBxdWVyeSwgJ2lkcyddLCBbXSlcbn1cblxudHlwZSBTZWxlY3RQYWdpbmF0ZWRFbnRpdGllc09wdGlvbnMgPSB7XG4gIGVudGl0aWVzTmFtZTogc3RyaW5nXG4gIHBhZ2luYXRpb25OYW1lOiBzdHJpbmdcbiAgcGFnaW5hdGlvbktleT86IHN0cmluZ1xuICBwYWdpbmF0aW9uUXVlcnk/OiBzdHJpbmdcbn1cbmV4cG9ydCBjb25zdCBzZWxlY3RQYWdpbmF0ZWRFbnRpdGllcyA9IChvcHRpb25zOiBTZWxlY3RQYWdpbmF0ZWRFbnRpdGllc09wdGlvbnMpID0+IHtcbiAgY29uc3Qge2VudGl0aWVzTmFtZSwgcGFnaW5hdGlvbk5hbWUsIHBhZ2luYXRpb25LZXksIHBhZ2luYXRpb25RdWVyeX0gPSBvcHRpb25zXG4gIGxldCBwYWdpU2VsZWN0b3I6IChzdGF0ZTogYW55KSA9PiBhbnlbXVxuXG4gIGlmIChwYWdpbmF0aW9uUXVlcnkpIHtcbiAgICBwYWdpU2VsZWN0b3IgPSBxdWVyeVBhZ2luYXRpb25TZWxlY3RvcihwYWdpbmF0aW9uTmFtZSwgcGFnaW5hdGlvblF1ZXJ5KVxuICB9IGVsc2Uge1xuICAgIHBhZ2lTZWxlY3RvciA9IHBhZ2luYXRpb25TZWxlY3RvcihwYWdpbmF0aW9uTmFtZSwgcGFnaW5hdGlvbktleSlcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVTZWxlY3RvcihcbiAgICBlbnRpdGllc1NlbGVjdG9yKGVudGl0aWVzTmFtZSksXG4gICAgcGFnaVNlbGVjdG9yLFxuICAgIChlbnRpdGllcywgaWRzKSA9PiB7XG4gICAgICByZXR1cm4gaWRzLm1hcChpZCA9PiBlbnRpdGllc1tpZF0pXG4gICAgfVxuICApXG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBzcmMvaXNvbW9ycGhpYy9zdG9yZS9zZWxlY3RvcnMvY29tbW9uLnRzXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0TWVtb2l6ZSA9IGRlZmF1bHRNZW1vaXplO1xuZXhwb3J0cy5jcmVhdGVTZWxlY3RvckNyZWF0b3IgPSBjcmVhdGVTZWxlY3RvckNyZWF0b3I7XG5leHBvcnRzLmNyZWF0ZVNlbGVjdG9yID0gY3JlYXRlU2VsZWN0b3I7XG5leHBvcnRzLmNyZWF0ZVN0cnVjdHVyZWRTZWxlY3RvciA9IGNyZWF0ZVN0cnVjdHVyZWRTZWxlY3RvcjtcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSBlbHNlIHsgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsgfSB9XG5cbmZ1bmN0aW9uIGRlZmF1bHRFcXVhbGl0eUNoZWNrKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRNZW1vaXplKGZ1bmMpIHtcbiAgdmFyIGVxdWFsaXR5Q2hlY2sgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyBkZWZhdWx0RXF1YWxpdHlDaGVjayA6IGFyZ3VtZW50c1sxXTtcblxuICB2YXIgbGFzdEFyZ3MgPSBudWxsO1xuICB2YXIgbGFzdFJlc3VsdCA9IG51bGw7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgaWYgKGxhc3RBcmdzICE9PSBudWxsICYmIGxhc3RBcmdzLmxlbmd0aCA9PT0gYXJncy5sZW5ndGggJiYgYXJncy5ldmVyeShmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7XG4gICAgICByZXR1cm4gZXF1YWxpdHlDaGVjayh2YWx1ZSwgbGFzdEFyZ3NbaW5kZXhdKTtcbiAgICB9KSkge1xuICAgICAgcmV0dXJuIGxhc3RSZXN1bHQ7XG4gICAgfVxuICAgIGxhc3RSZXN1bHQgPSBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgbGFzdEFyZ3MgPSBhcmdzO1xuICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICB9O1xufVxuXG5mdW5jdGlvbiBnZXREZXBlbmRlbmNpZXMoZnVuY3MpIHtcbiAgdmFyIGRlcGVuZGVuY2llcyA9IEFycmF5LmlzQXJyYXkoZnVuY3NbMF0pID8gZnVuY3NbMF0gOiBmdW5jcztcblxuICBpZiAoIWRlcGVuZGVuY2llcy5ldmVyeShmdW5jdGlvbiAoZGVwKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBkZXAgPT09ICdmdW5jdGlvbic7XG4gIH0pKSB7XG4gICAgdmFyIGRlcGVuZGVuY3lUeXBlcyA9IGRlcGVuZGVuY2llcy5tYXAoZnVuY3Rpb24gKGRlcCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiBkZXA7XG4gICAgfSkuam9pbignLCAnKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlbGVjdG9yIGNyZWF0b3JzIGV4cGVjdCBhbGwgaW5wdXQtc2VsZWN0b3JzIHRvIGJlIGZ1bmN0aW9ucywgJyArICgnaW5zdGVhZCByZWNlaXZlZCB0aGUgZm9sbG93aW5nIHR5cGVzOiBbJyArIGRlcGVuZGVuY3lUeXBlcyArICddJykpO1xuICB9XG5cbiAgcmV0dXJuIGRlcGVuZGVuY2llcztcbn1cblxuZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3JDcmVhdG9yKG1lbW9pemUpIHtcbiAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBtZW1vaXplT3B0aW9ucyA9IEFycmF5KF9sZW4yID4gMSA/IF9sZW4yIC0gMSA6IDApLCBfa2V5MiA9IDE7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICBtZW1vaXplT3B0aW9uc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IEFycmF5KF9sZW4zKSwgX2tleTMgPSAwOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgICBmdW5jc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xuICAgIH1cblxuICAgIHZhciByZWNvbXB1dGF0aW9ucyA9IDA7XG4gICAgdmFyIHJlc3VsdEZ1bmMgPSBmdW5jcy5wb3AoKTtcbiAgICB2YXIgZGVwZW5kZW5jaWVzID0gZ2V0RGVwZW5kZW5jaWVzKGZ1bmNzKTtcblxuICAgIHZhciBtZW1vaXplZFJlc3VsdEZ1bmMgPSBtZW1vaXplLmFwcGx5KHVuZGVmaW5lZCwgW2Z1bmN0aW9uICgpIHtcbiAgICAgIHJlY29tcHV0YXRpb25zKys7XG4gICAgICByZXR1cm4gcmVzdWx0RnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgfV0uY29uY2F0KG1lbW9pemVPcHRpb25zKSk7XG5cbiAgICB2YXIgc2VsZWN0b3IgPSBmdW5jdGlvbiBzZWxlY3RvcihzdGF0ZSwgcHJvcHMpIHtcbiAgICAgIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW40ID4gMiA/IF9sZW40IC0gMiA6IDApLCBfa2V5NCA9IDI7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcbiAgICAgICAgYXJnc1tfa2V5NCAtIDJdID0gYXJndW1lbnRzW19rZXk0XTtcbiAgICAgIH1cblxuICAgICAgdmFyIHBhcmFtcyA9IGRlcGVuZGVuY2llcy5tYXAoZnVuY3Rpb24gKGRlcGVuZGVuY3kpIHtcbiAgICAgICAgcmV0dXJuIGRlcGVuZGVuY3kuYXBwbHkodW5kZWZpbmVkLCBbc3RhdGUsIHByb3BzXS5jb25jYXQoYXJncykpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gbWVtb2l6ZWRSZXN1bHRGdW5jLmFwcGx5KHVuZGVmaW5lZCwgX3RvQ29uc3VtYWJsZUFycmF5KHBhcmFtcykpO1xuICAgIH07XG5cbiAgICBzZWxlY3Rvci5yZXN1bHRGdW5jID0gcmVzdWx0RnVuYztcbiAgICBzZWxlY3Rvci5yZWNvbXB1dGF0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZWNvbXB1dGF0aW9ucztcbiAgICB9O1xuICAgIHNlbGVjdG9yLnJlc2V0UmVjb21wdXRhdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVjb21wdXRhdGlvbnMgPSAwO1xuICAgIH07XG4gICAgcmV0dXJuIHNlbGVjdG9yO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTZWxlY3RvcigpIHtcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yQ3JlYXRvcihkZWZhdWx0TWVtb2l6ZSkuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHJ1Y3R1cmVkU2VsZWN0b3Ioc2VsZWN0b3JzKSB7XG4gIHZhciBzZWxlY3RvckNyZWF0b3IgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgfHwgYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyBjcmVhdGVTZWxlY3RvciA6IGFyZ3VtZW50c1sxXTtcblxuICBpZiAodHlwZW9mIHNlbGVjdG9ycyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NyZWF0ZVN0cnVjdHVyZWRTZWxlY3RvciBleHBlY3RzIGZpcnN0IGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCAnICsgKCd3aGVyZSBlYWNoIHByb3BlcnR5IGlzIGEgc2VsZWN0b3IsIGluc3RlYWQgcmVjZWl2ZWQgYSAnICsgdHlwZW9mIHNlbGVjdG9ycykpO1xuICB9XG4gIHZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMoc2VsZWN0b3JzKTtcbiAgcmV0dXJuIHNlbGVjdG9yQ3JlYXRvcihvYmplY3RLZXlzLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIHNlbGVjdG9yc1trZXldO1xuICB9KSwgZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIF9sZW41ID0gYXJndW1lbnRzLmxlbmd0aCwgdmFsdWVzID0gQXJyYXkoX2xlbjUpLCBfa2V5NSA9IDA7IF9rZXk1IDwgX2xlbjU7IF9rZXk1KyspIHtcbiAgICAgIHZhbHVlc1tfa2V5NV0gPSBhcmd1bWVudHNbX2tleTVdO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZXMucmVkdWNlKGZ1bmN0aW9uIChjb21wb3NpdGlvbiwgdmFsdWUsIGluZGV4KSB7XG4gICAgICBjb21wb3NpdGlvbltvYmplY3RLZXlzW2luZGV4XV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiBjb21wb3NpdGlvbjtcbiAgICB9LCB7fSk7XG4gIH0pO1xufVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L3Jlc2VsZWN0L2xpYi9pbmRleC5qc1xuICoqIG1vZHVsZSBpZCA9IDE2MlxuICoqIG1vZHVsZSBjaHVua3MgPSAyIDMgMTIgMTMgMTQgMTVcbiAqKi8iLCJpbXBvcnQgQm9va0xpc3RTZWN0aW9uIGZyb20gJy4vQm9va0xpc3RTZWN0aW9uJ1xuZXhwb3J0IGRlZmF1bHQgQm9va0xpc3RTZWN0aW9uXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBzcmMvaXNvbW9ycGhpYy9jb21wb25lbnRzL0Jvb2tMaXN0U2VjdGlvbi9pbmRleC50c1xuICoqLyIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXInXG5pbXBvcnQgQm9va0xpc3QgZnJvbSAnLi4vQm9va0xpc3QnXG5pbXBvcnQgQ1NTTW9kdWxlcyBmcm9tICdyZWFjdC1jc3MtbW9kdWxlcydcbmltcG9ydCBJY29uIGZyb20gJy4uLy4uL2VsZW1lbnRzL0ljb24nXG5jb25zdCBzdHlsZXMgPSByZXF1aXJlKCcuL0Jvb2tMaXN0U2VjdGlvbi5zY3NzJylcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gIGJvb2tFbnRpdGllczogYW55XG4gIHRpdGxlPzogc3RyaW5nXG4gIG1vcmVMaW5rPzogc3RyaW5nXG59XG5cbkBDU1NNb2R1bGVzKHN0eWxlcywge1xuICBhbGxvd011bHRpcGxlOiB0cnVlXG59KVxuY2xhc3MgQm9va0xpc3RTZWN0aW9uIGV4dGVuZHMgQ29tcG9uZW50PElQcm9wcywge30+IHtcbiAgcmVuZGVyKCkge1xuICAgIGxldCB0aXRsZSA9IHRoaXMucHJvcHMudGl0bGVcbiAgICBsZXQgbW9yZUxpbmsgPSB0aGlzLnByb3BzLm1vcmVMaW5rID8gdGhpcy5wcm9wcy5tb3JlTGluayA6IG51bGxcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IHN0eWxlTmFtZT1cImJvb2stbGlzdC1zZWN0aW9uXCI+XG4gICAgICAgIHtcbiAgICAgICAgICB0aGlzLnByb3BzLnRpdGxlICYmIChcbiAgICAgICAgICAgIG1vcmVMaW5rXG4gICAgICAgICAgICAgID8gKFxuICAgICAgICAgICAgICAgIDxoMiBzdHlsZU5hbWU9XCJzZWN0aW9uLXRpdGxlXCI+XG4gICAgICAgICAgICAgICAgICA8TGluayB0bz17bW9yZUxpbmt9Pnt0aXRsZX08SWNvbiBuYW1lPVwiYXJyb3dSaWdodFwiIHNpemU9ezIwfSAvPjwvTGluaz5cbiAgICAgICAgICAgICAgICA8L2gyPlxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIDogKFxuICAgICAgICAgICAgICAgIDxoMiBzdHlsZU5hbWU9XCJzZWN0aW9uLXRpdGxlXCI+e3RpdGxlfTwvaDI+XG4gICAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICAgPEJvb2tMaXN0IGJvb2tFbnRpdGllcz17dGhpcy5wcm9wcy5ib29rRW50aXRpZXN9IC8+XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQm9va0xpc3RTZWN0aW9uXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBzcmMvaXNvbW9ycGhpYy9jb21wb25lbnRzL0Jvb2tMaXN0U2VjdGlvbi9Cb29rTGlzdFNlY3Rpb24udHN4XG4gKiovIiwiaW1wb3J0IEJvb2tMaXN0IGZyb20gJy4vQm9va0xpc3QnXG5leHBvcnQgZGVmYXVsdCBCb29rTGlzdFxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogc3JjL2lzb21vcnBoaWMvY29tcG9uZW50cy9Cb29rTGlzdC9pbmRleC50c1xuICoqLyIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBCb29rIGZyb20gJy4uL0Jvb2snXG5pbXBvcnQgQ1NTTW9kdWxlcyBmcm9tICdyZWFjdC1jc3MtbW9kdWxlcydcbmNvbnN0IHN0eWxlcyA9IHJlcXVpcmUoJy4vQm9va0xpc3Quc2NzcycpXG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGJvb2tFbnRpdGllczoge1xuICAgIGlkOiBzdHJpbmdcbiAgICB0aXRsZTogc3RyaW5nXG4gICAgYXV0aG9yczogYW55XG4gICAgZGVzY3JpcHRpb246IHN0cmluZ1xuICAgIGNvdmVyOiBzdHJpbmdcbiAgfVtdXG59XG5cbkBDU1NNb2R1bGVzKHN0eWxlcylcbmNsYXNzIEJvb2tMaXN0IGV4dGVuZHMgQ29tcG9uZW50PFByb3BzLCB7fT4ge1xuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDx1bCBzdHlsZU5hbWU9XCJib29rLWxpc3RcIiBjbGFzc05hbWU9XCJjbGVhcmZpeFwiPlxuICAgICAgICB7XG4gICAgICAgICAgdGhpcy5wcm9wcy5ib29rRW50aXRpZXMgJiYgdGhpcy5wcm9wcy5ib29rRW50aXRpZXMubGVuZ3RoICE9PSAwXG4gICAgICAgICAgICA/IChcbiAgICAgICAgICAgICAgdGhpcy5wcm9wcy5ib29rRW50aXRpZXMubWFwKChib29rLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgdGl0bGUsIGF1dGhvcnMsIGRlc2NyaXB0aW9uLCBjb3ZlciB9ID0gYm9va1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICA8bGkga2V5PXtpbmRleH0+XG4gICAgICAgICAgICAgICAgICAgIDxCb29rXG4gICAgICAgICAgICAgICAgICAgICAgaWQ9e2Jvb2suaWR9XG4gICAgICAgICAgICAgICAgICAgICAgdGl0bGU9e3RpdGxlIHx8ICfml6DmoIfpopgnfVxuICAgICAgICAgICAgICAgICAgICAgIGF1dGhvcnM9e2F1dGhvcnMgJiYgYXV0aG9ycy5tYXAoYXV0aG9yID0+IGF1dGhvci5uYW1lKS5qb2luKCcsICcpIHx8ICfmnKrnn6XkvZzogIUnfVxuICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPXtkZXNjcmlwdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgICBjb3Zlcj17Y292ZXJ9XG4gICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZVBvcHVwXG4gICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgOiAoXG4gICAgICAgICAgICAgIDxsaT7mmoLml6DorrDlvZU8L2xpPlxuICAgICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICA8L3VsPlxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBCb29rTGlzdFxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogc3JjL2lzb21vcnBoaWMvY29tcG9uZW50cy9Cb29rTGlzdC9Cb29rTGlzdC50c3hcbiAqKi8iLCJpbXBvcnQgQm9vayBmcm9tICcuL0Jvb2snXG5leHBvcnQgZGVmYXVsdCBCb29rXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBzcmMvaXNvbW9ycGhpYy9jb21wb25lbnRzL0Jvb2svaW5kZXgudHNcbiAqKi8iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyJ1xuaW1wb3J0IEJvb2tJbmZvUG9wdXAgZnJvbSAnLi4vQm9va0luZm9Qb3B1cCdcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCdcbmltcG9ydCBDU1NNb2R1bGVzIGZyb20gJ3JlYWN0LWNzcy1tb2R1bGVzJ1xuY29uc3Qgc3R5bGVzID0gcmVxdWlyZSgnLi9fYm9vay5zY3NzJylcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gIHRpdGxlOiBzdHJpbmdcbiAgYXV0aG9yczogc3RyaW5nXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmdcbiAgaWQ6IHN0cmluZ1xuICBjb3Zlcjogc3RyaW5nXG4gIGRpc2FibGVQb3B1cD86IGJvb2xlYW5cbiAgc2hvd0Rlc2M/OiBib29sZWFuXG59XG5cbmludGVyZmFjZSBJU3RhdGUge1xuICBzaG93UG9wdXA6IGJvb2xlYW5cbn1cblxuQENTU01vZHVsZXMoc3R5bGVzLCB7XG4gIGFsbG93TXVsdGlwbGU6IHRydWVcbn0pXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCb29rIGV4dGVuZHMgQ29tcG9uZW50PElQcm9wcywgSVN0YXRlPiB7XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcylcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgc2hvd1BvcHVwOiBmYWxzZVxuICAgIH1cbiAgICB0aGlzLnNob3dQb3B1cCA9IHRoaXMuc2hvd1BvcHVwLmJpbmQodGhpcylcbiAgICB0aGlzLmhpZGVQb3B1cCA9IHRoaXMuaGlkZVBvcHVwLmJpbmQodGhpcylcbiAgfVxuXG4gIHNob3dQb3B1cCgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHNob3dQb3B1cDogdHJ1ZVxuICAgIH0pXG4gIH1cblxuICBoaWRlUG9wdXAoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzaG93UG9wdXA6IGZhbHNlXG4gICAgfSlcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHNob3dEZXNjLCBkZXNjcmlwdGlvbiwgY292ZXIgfSA9IHRoaXMucHJvcHNcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IG9uTW91c2VFbnRlcj17dGhpcy5zaG93UG9wdXB9IG9uTW91c2VMZWF2ZT17dGhpcy5oaWRlUG9wdXB9IHN0eWxlTmFtZT1cImJvb2stLWNhcmRcIj5cbiAgICAgICAgPExpbmsgdG89eycvYm9vay8nICsgdGhpcy5wcm9wcy5pZH0gPlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNvdmVyICYmIChcbiAgICAgICAgICAgICAgPGRpdiBzdHlsZU5hbWU9XCJib29rLWNvdmVyXCI+PGltZyBzcmM9e3RoaXMucHJvcHMuY292ZXJ9Lz48L2Rpdj5cbiAgICAgICAgICAgIClcbiAgICAgICAgICB9XG4gICAgICAgICAgPGRpdiBzdHlsZU5hbWU9XCJib29rLW1ldGFcIj5cbiAgICAgICAgICAgIDxzcGFuIHRpdGxlPXt0aGlzLnByb3BzLnRpdGxlfSBzdHlsZU5hbWU9XCJib29rLW5hbWVcIj57dGhpcy5wcm9wcy50aXRsZSB8fCAn5peg5qCH6aKYJ308L3NwYW4+XG4gICAgICAgICAgICA8c3BhbiBzdHlsZU5hbWU9XCJib29rLWF1dGhvclwiPnt0aGlzLnByb3BzLmF1dGhvcnMgfHwgJ+S9nOiAheS4jeivpid9PC9zcGFuPlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzaG93RGVzYyAmJiAoXG4gICAgICAgICAgICAgICAgPHNwYW4gc3R5bGVOYW1lPVwiYm9vay1kZXNjXCI+e2Rlc2NyaXB0aW9uIHx8ICfnqbonfTwvc3Bhbj5cbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L0xpbms+XG4gICAgICAgIHtcbiAgICAgICAgICB0aGlzLnN0YXRlLnNob3dQb3B1cCAmJiAhdGhpcy5wcm9wcy5kaXNhYmxlUG9wdXAgJiYgKFxuICAgICAgICAgICAgPEJvb2tJbmZvUG9wdXBcbiAgICAgICAgICAgICAgYm9va0lkPXt0aGlzLnByb3BzLmlkfVxuICAgICAgICAgICAgICB0aXRsZT17dGhpcy5wcm9wcy50aXRsZX1cbiAgICAgICAgICAgICAgYXV0aG9yPXt0aGlzLnByb3BzLmF1dGhvcnN9XG4gICAgICAgICAgICAgIGRlc2NyaXB0aW9uPXt0aGlzLnByb3BzLmRlc2NyaXB0aW9ufVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBzcmMvaXNvbW9ycGhpYy9jb21wb25lbnRzL0Jvb2svQm9vay50c3hcbiAqKi8iLCJpbXBvcnQgQm9va0luZm9Qb3B1cCBmcm9tICcuL0Jvb2tJbmZvUG9wdXAnXG5leHBvcnQgZGVmYXVsdCBCb29rSW5mb1BvcHVwXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBzcmMvaXNvbW9ycGhpYy9jb21wb25lbnRzL0Jvb2tJbmZvUG9wdXAvaW5kZXgudHNcbiAqKi8iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXG4vLyBpbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyJ1xuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAnLi4vLi4vZWxlbWVudHMvX2Zvcm0nXG5pbXBvcnQgQ1NTTW9kdWxlcyBmcm9tICdyZWFjdC1jc3MtbW9kdWxlcydcbmNvbnN0IHN0eWxlcyA9IHJlcXVpcmUoJy4vQm9va0luZm9Qb3B1cC5zY3NzJylcblxuaW50ZXJmYWNlIElQcm9wcyB7XG4gIGF1dGhvcjogc3RyaW5nXG4gIHRpdGxlOiBzdHJpbmdcbiAgZGVzY3JpcHRpb246IHN0cmluZ1xuICBib29rSWQ6IHN0cmluZ1xufVxuXG5AQ1NTTW9kdWxlcyhzdHlsZXMsIHtcbiAgYWxsb3dNdWx0aXBsZTogdHJ1ZVxufSlcbmNsYXNzIEJvb2tJbmZvUG9wdXAgZXh0ZW5kcyBDb21wb25lbnQ8SVByb3BzLCB7fT4ge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgYXV0aG9yLCB0aXRsZSwgZGVzY3JpcHRpb24sIGJvb2tJZCB9ID0gdGhpcy5wcm9wc1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgc3R5bGVOYW1lPVwicG9wdXBcIj5cbiAgICAgICAgPGRpdiBzdHlsZU5hbWU9XCJoZWFkZXJcIj5cbiAgICAgICAgICA8aDIgc3R5bGVOYW1lPVwidGl0bGVcIj57dGl0bGV9PC9oMj5cbiAgICAgICAgICA8cCBzdHlsZU5hbWU9XCJhdXRob3JcIj57YXV0aG9yfTwvcD5cbiAgICAgICAgICA8QnV0dG9uIGNvbG9yPVwiYmx1ZVwiIHRvPXsnL3ZpZXdlci9ib29rLycgKyBib29rSWR9PumYheivuzwvQnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBzdHlsZU5hbWU9XCJkZXNjcmlwdGlvblwiPlxuICAgICAgICAgIDxwPntkZXNjcmlwdGlvbn08L3A+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJvb2tJbmZvUG9wdXBcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHNyYy9pc29tb3JwaGljL2NvbXBvbmVudHMvQm9va0luZm9Qb3B1cC9Cb29rSW5mb1BvcHVwLnRzeFxuICoqLyIsImltcG9ydCBCdXR0b24gZnJvbSAnLi9CdXR0b24nXG5pbXBvcnQgSW5wdXQgZnJvbSAnLi9JbnB1dCdcbmltcG9ydCBTZWxlY3RpemVJbnB1dCBmcm9tICcuL1NlbGVjdGl6ZUlucHV0J1xuaW1wb3J0IFRleHRhcmVhIGZyb20gJy4vVGV4dGFyZWEnXG5cbmV4cG9ydCB7IEJ1dHRvbiwgSW5wdXQsIFNlbGVjdGl6ZUlucHV0LCBUZXh0YXJlYSB9XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBzcmMvaXNvbW9ycGhpYy9lbGVtZW50cy9fZm9ybS9pbmRleC50c1xuICoqLyIsImltcG9ydCBJbnB1dCBmcm9tICcuL0lucHV0J1xuZXhwb3J0IGRlZmF1bHQgSW5wdXRcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHNyYy9pc29tb3JwaGljL2VsZW1lbnRzL19mb3JtL0lucHV0L2luZGV4LnRzXG4gKiovIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IENTU01vZHVsZXMgZnJvbSAncmVhY3QtY3NzLW1vZHVsZXMnXG5jb25zdCBzdHlsZXMgPSByZXF1aXJlKCcuL0lucHV0LmNzcycpXG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvcHMge1xuICBjbGFzc05hbWU/OiBzdHJpbmdcbiAgcGxhY2Vob2xkZXI/OiBzdHJpbmdcbiAgb25DaGFuZ2U/OiBhbnlcbiAgdmFsdWU/OiBzdHJpbmdcbiAgdHlwZT86IHN0cmluZ1xuICBuYW1lPzogc3RyaW5nXG59XG5cbkBDU1NNb2R1bGVzKHN0eWxlcywge1xuICBhbGxvd011bHRpcGxlOiB0cnVlXG59KVxuY2xhc3MgSW5wdXQgZXh0ZW5kcyBDb21wb25lbnQ8UHJvcHMsIGFueT4ge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGxldCBwcm9wcyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMucHJvcHMpXG4gICAgZGVsZXRlIHByb3BzLmNsYXNzTmFtZVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgc3R5bGVOYW1lPVwiaW5wdXQtd3JhcFwiIGNsYXNzTmFtZT17dGhpcy5wcm9wcy5jbGFzc05hbWUgfHwgJyd9PlxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICBzdHlsZU5hbWU9XCJpbnB1dFwiXG4gICAgICAgICAgcGxhY2Vob2xkZXI9e3RoaXMucHJvcHMucGxhY2Vob2xkZXJ9XG4gICAgICAgICAgdmFsdWU9e3RoaXMucHJvcHMudmFsdWV9XG4gICAgICAgICAgb25DaGFuZ2U9e2UgPT4ge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5vbkNoYW5nZShlKVxuICAgICAgICAgIH19XG4gICAgICAgICAgdHlwZT17dGhpcy5wcm9wcy50eXBlID8gdGhpcy5wcm9wcy50eXBlIDogJ3RleHQnfVxuICAgICAgICAgIG5hbWU9e3RoaXMucHJvcHMubmFtZSA/IHRoaXMucHJvcHMubmFtZSA6IG51bGx9XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSW5wdXRcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHNyYy9pc29tb3JwaGljL2VsZW1lbnRzL19mb3JtL0lucHV0L0lucHV0LnRzeFxuICoqLyIsIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImlucHV0LXdyYXBcIjpcImlucHV0LXdyYXBfM2RIQTNcIixcImlucHV0XCI6XCJpbnB1dF8yanVCT1wifTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL2lzb21vcnBoaWMvZWxlbWVudHMvX2Zvcm0vSW5wdXQvSW5wdXQuY3NzXG4gKiogbW9kdWxlIGlkID0gMTc0XG4gKiogbW9kdWxlIGNodW5rcyA9IDIgMyA0IDYgNyA4IDkgMTEgMTQgMTVcbiAqKi8iLCJpbXBvcnQgU2VsZWN0aXplSW5wdXQgZnJvbSAnLi9TZWxlY3RpemVJbnB1dCdcbmV4cG9ydCBkZWZhdWx0IFNlbGVjdGl6ZUlucHV0XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBzcmMvaXNvbW9ycGhpYy9lbGVtZW50cy9fZm9ybS9TZWxlY3RpemVJbnB1dC9pbmRleC50c1xuICoqLyIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBJY29uIGZyb20gJy4uLy4uL0ljb24nXG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJ1xuaW1wb3J0IENTU01vZHVsZXMgZnJvbSAncmVhY3QtY3NzLW1vZHVsZXMnXG5pbXBvcnQgaXNEZXNjZW5kYW50IGZyb20gJy4uLy4uLy4uL3V0aWxzL2RvbS9pc0Rlc2NlbmRhbnQnXG5jb25zdCBzdHlsZXMgPSByZXF1aXJlKCcuL1NlbGVjdGl6ZUlucHV0LnNjc3MnKVxuXG50eXBlIFR5cGVPcHRpb24gPSB7XG4gIHZhbHVlOiBzdHJpbmdcbiAgbmFtZTogc3RyaW5nXG4gIGRpc2FibGVkPzogYm9vbGVhblxuICBhZGRpdGlvbmFsPzogYW55XG59XG5cbnR5cGUgVHlwZVZhbHVlID0ge1xuICB2YWx1ZTogc3RyaW5nXG4gIG5hbWU6IHN0cmluZ1xufVxuXG5pbnRlcmZhY2UgSVByb3BzIHtcbiAgY2xhc3NOYW1lPzogc3RyaW5nXG4gIHBsYWNlaG9sZGVyPzogc3RyaW5nXG4gIGxhYmVsPzogc3RyaW5nXG4gIHN0YXlGb2N1c2VkPzogYm9vbGVhbiAvLyBkZWZhdWx0IHRydWVcblxuICB2YWx1ZTogc3RyaW5nXG4gIG9uSW5wdXRDaGFuZ2U6IChuZXdWYWx1ZTogc3RyaW5nKSA9PiB2b2lkXG5cbiAgb3B0aW9uczogQXJyYXk8VHlwZU9wdGlvbj5cbiAgb25PcHRpb25zQ2hhbmdlPzogKG5ld1ZhbHVlczogQXJyYXk8VHlwZU9wdGlvbj4pID0+IHZvaWRcblxuICB2YWx1ZXM6IEFycmF5PFR5cGVWYWx1ZT5cbiAgb25WYWx1ZXNDaGFuZ2U6IChuZXdWYWx1ZXM6IEFycmF5PFR5cGVWYWx1ZT4pID0+IHZvaWRcblxuICAvLyDpop3lpJblip/og71cbiAgb25BZGROZXdWYWx1ZT86IChuZXdWYWx1ZTogc3RyaW5nKSA9PiB2b2lkXG4gIG9uT3B0aW9uQ2xpY2s/OiAoc2VsZWN0ZWRWYWx1ZTogVHlwZU9wdGlvbikgPT4gdm9pZFxufVxuXG5pbnRlcmZhY2UgSVN0YXRlIHtcbiAgZm9jdXM/OiBib29sZWFuXG4gIHNob3dPcHRpb25zPzogYm9vbGVhblxuICB2YWx1ZT86IHN0cmluZ1xuICBleHBlbmRlZE9wdGlvbkluZGV4PzogbnVtYmVyXG59XG5cbkBDU1NNb2R1bGVzKHN0eWxlcywge1xuICBhbGxvd011bHRpcGxlOiB0cnVlXG59KVxuY2xhc3MgU2VsZWN0aXplSW5wdXQgZXh0ZW5kcyBDb21wb25lbnQ8SVByb3BzLCBJU3RhdGU+IHtcblxuICBpbnB1dDogSFRNTElucHV0RWxlbWVudFxuICBpbnB1dFdyYXA6IEhUTUxEaXZFbGVtZW50XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcylcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgc2hvd09wdGlvbnM6IGZhbHNlLFxuICAgICAgZm9jdXM6IGZhbHNlLFxuICAgICAgdmFsdWU6ICcnLFxuICAgICAgZXhwZW5kZWRPcHRpb25JbmRleDogMFxuICAgIH1cbiAgICB0aGlzLmhhbmRsZU91dHNpZGVDbGljayA9IHRoaXMuaGFuZGxlT3V0c2lkZUNsaWNrLmJpbmQodGhpcylcbiAgICB0aGlzLmZvY3VzSW5wdXQgPSB0aGlzLmZvY3VzSW5wdXQuYmluZCh0aGlzKVxuICAgIHRoaXMuaGFuZGxlSW5wdXRXcmFwQ2xpY2sgPSB0aGlzLmhhbmRsZUlucHV0V3JhcENsaWNrLmJpbmQodGhpcylcbiAgfVxuXG4gIGFkZFZhbHVlKG5ld1ZhbHVlKSB7XG4gICAgdGhpcy5wcm9wcy5vblZhbHVlc0NoYW5nZSh0aGlzLnByb3BzLnZhbHVlcy5jb25jYXQobmV3VmFsdWUpKVxuICAgIGlmICh0aGlzLnByb3BzLm9uT3B0aW9uc0NoYW5nZSkge1xuICAgICAgdGhpcy5wcm9wcy5vbk9wdGlvbnNDaGFuZ2UodGhpcy5wcm9wcy5vcHRpb25zLm1hcChvcHRpb24gPT4gKG9wdGlvbi52YWx1ZSA9PT0gbmV3VmFsdWUudmFsdWVcbiAgICAgICAgPyBPYmplY3QuYXNzaWduKHt9LCBvcHRpb24sIHsgZGlzYWJsZWQ6IHRydWUgfSlcbiAgICAgICAgOiBvcHRpb24pKSlcbiAgICB9XG4gICAgdGhpcy5jbGVhcklucHV0VmFsdWUoKVxuICAgIGlmICh0eXBlb2YgdGhpcy5wcm9wcy5zdGF5Rm9jdXNlZCA9PT0gJ3VuZGVmaW5lZCcgfHwgdGhpcy5wcm9wcy5zdGF5Rm9jdXNlZCAhPT0gZmFsc2UpIHtcbiAgICAgIHRoaXMuZm9jdXNJbnB1dCgpXG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgc2hvd09wdGlvbnM6IGZhbHNlXG4gICAgfSlcbiAgfVxuXG4gIHJlbW92ZVZhbHVlKGluZGV4KSB7XG4gICAgbGV0IG5ld1ZhbHVlcyA9IFtdXG4gICAgbGV0IHJlbW92ZWRWYWx1ZVxuXG4gICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgbmV3VmFsdWVzID0gdGhpcy5wcm9wcy52YWx1ZXMuc2xpY2UoMCwgdGhpcy5wcm9wcy52YWx1ZXMubGVuZ3RoIC0gMSlcbiAgICAgIHJlbW92ZWRWYWx1ZSA9IHRoaXMucHJvcHMudmFsdWVzW3RoaXMucHJvcHMudmFsdWVzLmxlbmd0aCAtIDFdLnZhbHVlXG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1ZhbHVlcyA9IHRoaXMucHJvcHMudmFsdWVzXG4gICAgICAgIC5maWx0ZXIoKHYsIGkpID0+IHtcbiAgICAgICAgICByZW1vdmVkVmFsdWUgPSB2LnZhbHVlXG4gICAgICAgICAgcmV0dXJuIGkgIT09IGluZGV4XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMub25PcHRpb25zQ2hhbmdlKSB7XG4gICAgICB0aGlzLnByb3BzLm9uT3B0aW9uc0NoYW5nZSh0aGlzLnByb3BzLm9wdGlvbnMubWFwKG9wdGlvbiA9PiAob3B0aW9uLnZhbHVlID09PSByZW1vdmVkVmFsdWVcbiAgICAgICAgPyBPYmplY3QuYXNzaWduKHt9LCBvcHRpb24sIHsgZGlzYWJsZWQ6IGZhbHNlIH0pXG4gICAgICAgIDogb3B0aW9uKSkpXG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vblZhbHVlc0NoYW5nZShuZXdWYWx1ZXMpXG4gIH1cblxuICBjbGVhcklucHV0VmFsdWUoKSB7XG4gICAgdGhpcy5wcm9wcy5vbklucHV0Q2hhbmdlKCcnKVxuICB9XG5cbiAgaGFuZGxlS2V5UHJlc3MoZSkge1xuICAgIGlmIChlLmtleUNvZGUgPT09IDggJiYgIXRoaXMucHJvcHMudmFsdWUpIHtcbiAgICAgIHRoaXMucmVtb3ZlVmFsdWUoLSAxKVxuICAgIH1cbiAgICAvLyB0b2RvXG4gICAgLy8gaWYgKGUua2V5Q29kZSA9PT0gMTMgJiYgdGhpcy5zdGF0ZS5zaG93T3B0aW9ucykge1xuICAgIC8vICAgdGhpcy5hZGRWYWx1ZSgpXG4gICAgLy8gfVxuICB9XG5cbiAgZm9jdXNJbnB1dCgpIHtcbiAgICB0aGlzLmlucHV0LmZvY3VzKClcbiAgfVxuXG4gIGhhbmRsZU91dHNpZGVDbGljayhlKSB7XG4gICAgaWYgKCFpc0Rlc2NlbmRhbnQodGhpcy5pbnB1dFdyYXAsIGUudGFyZ2V0KSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHNob3dPcHRpb25zOiBmYWxzZVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBoYW5kbGVJbnB1dFdyYXBDbGljaygpIHtcbiAgICB0aGlzLmZvY3VzSW5wdXQoKVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzaG93T3B0aW9uczogdHJ1ZVxuICAgIH0pXG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZU91dHNpZGVDbGljaylcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlT3V0c2lkZUNsaWNrKVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgbGFiZWwsIHZhbHVlcywgb25BZGROZXdWYWx1ZSB9ID0gdGhpcy5wcm9wc1xuXG4gICAgbGV0IHZhbHVlID0gdGhpcy5wcm9wcy52YWx1ZSB8fCAnJ1xuICAgIGxldCBvcHRpb25zID0gdGhpcy5wcm9wcy5vcHRpb25zIHx8IFtdXG5cbiAgICBsZXQgaW5wdXRXaWR0aCA9IHZhbHVlcy5sZW5ndGggPiAwID8gKHZhbHVlLmxlbmd0aCA9PT0gMCA/IDE2IDogdmFsdWUubGVuZ3RoICogMTYpIDogJzEwMCUnXG4gICAgbGV0IHBsYWNlaG9sZGVyID0gdmFsdWVzLmxlbmd0aCA+IDAgPyAnJyA6IHRoaXMucHJvcHMucGxhY2Vob2xkZXJcblxuICAgIGNvbnN0IHNlbGVjdGl6ZUlucHV0U3R5bGVOYW1lID0gY2xhc3NuYW1lcyh7XG4gICAgICAnc2VsZWN0aXplLWlucHV0JzogdHJ1ZSxcbiAgICAgICdzZWxlY3RpemUtaW5wdXQtLWZvY3VzJzogdGhpcy5zdGF0ZS5mb2N1cyxcbiAgICAgICdzZWxlY3RpemUtaW5wdXQtLWVtcHR5JzogdmFsdWVzLmxlbmd0aCA9PT0gMFxuICAgIH0pXG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBzdHlsZU5hbWU9XCJzZWxlY3RpemUtd3JhcFwiIGNsYXNzTmFtZT17dGhpcy5wcm9wcy5jbGFzc05hbWUgfHwgJyd9PlxuICAgICAgICB7XG4gICAgICAgICAgbGFiZWwgPyAoXG4gICAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwiZm9ybS1sYWJlbFwiPntsYWJlbH08L2xhYmVsPlxuICAgICAgICAgICkgOiBudWxsXG4gICAgICAgIH1cbiAgICAgICAgPGRpdlxuICAgICAgICAgIHN0eWxlTmFtZT17c2VsZWN0aXplSW5wdXRTdHlsZU5hbWV9XG4gICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVJbnB1dFdyYXBDbGlja31cbiAgICAgICAgICByZWY9e3JlZiA9PiB7IHRoaXMuaW5wdXRXcmFwID0gcmVmIH0gfVxuICAgICAgICAgID5cbiAgICAgICAgICB7XG4gICAgICAgICAgICB2YWx1ZXMubWFwKCh2LCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxzcGFuIGtleT17aW5kZXh9IHN0eWxlTmFtZT1cInNlbGVjdGl6ZS10YWdcIj5cbiAgICAgICAgICAgICAgICAgIHt2Lm5hbWV9XG4gICAgICAgICAgICAgICAgICA8SWNvblxuICAgICAgICAgICAgICAgICAgICBzdHlsZU5hbWU9XCJpY29uLXJlbW92ZVwiXG4gICAgICAgICAgICAgICAgICAgIHNpemU9ezIwfVxuICAgICAgICAgICAgICAgICAgICBuYW1lPVwiY2xvc2VcIlxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXtlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVZhbHVlKGluZGV4KVxuICAgICAgICAgICAgICAgICAgICB9IH1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgc3R5bGU9e3sgd2lkdGg6IGlucHV0V2lkdGggfX1cbiAgICAgICAgICAgIHJlZj17cmVmID0+IHsgdGhpcy5pbnB1dCA9IHJlZiB9IH1cbiAgICAgICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtwbGFjZWhvbGRlcn1cbiAgICAgICAgICAgIG9uQmx1cj17ZSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBmb2N1czogZmFsc2UgfSlcbiAgICAgICAgICAgIH0gfVxuICAgICAgICAgICAgb25Gb2N1cz17ZSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBmb2N1czogdHJ1ZSB9KVxuICAgICAgICAgICAgfSB9XG4gICAgICAgICAgICBvbkNoYW5nZT17ZSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMucHJvcHMub25JbnB1dENoYW5nZSgoZS50YXJnZXQgYXMgYW55KS52YWx1ZSlcbiAgICAgICAgICAgIH0gfVxuICAgICAgICAgICAgb25LZXlEb3duPXtlID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5oYW5kbGVLZXlQcmVzcyhlKVxuICAgICAgICAgICAgfSB9XG4gICAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAge1xuICAgICAgICAgIHRoaXMuc3RhdGUuc2hvd09wdGlvbnMgJiYgKG9wdGlvbnMubGVuZ3RoICE9PSAwIHx8IG9uQWRkTmV3VmFsdWUpID8gKFxuICAgICAgICAgICAgPHVsIHN0eWxlTmFtZT1cInF1ZXJ5LXJlc3VsdHNcIj5cbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMubWFwKChvcHRpb24sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAob3B0aW9uLmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiA8bGkga2V5PXtpbmRleH0gY2xhc3NOYW1lPVwiZGlzYWJsZWRcIj57b3B0aW9uLm5hbWV9PC9saT5cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIDxsaVxuICAgICAgICAgICAgICAgICAgICAgIGtleT17aW5kZXh9XG4gICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFZhbHVlKG9wdGlvbilcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLm9uT3B0aW9uQ2xpY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5vbk9wdGlvbkNsaWNrKG9wdGlvbilcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9IH1cbiAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e29wdGlvbi5uYW1lfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvbkFkZE5ld1ZhbHVlID8gKFxuICAgICAgICAgICAgICAgICAgPGxpXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIG9uQWRkTmV3VmFsdWUodGhpcy5wcm9wcy52YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgfSB9XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImFkZFwiPua3u+WKoCA8c3Ryb25nPnt0aGlzLnByb3BzLnZhbHVlfTwvc3Ryb25nPjwvbGk+XG4gICAgICAgICAgICAgICAgKSA6IG51bGxcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICApIDogbnVsbFxuICAgICAgICB9XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2VsZWN0aXplSW5wdXRcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHNyYy9pc29tb3JwaGljL2VsZW1lbnRzL19mb3JtL1NlbGVjdGl6ZUlucHV0L1NlbGVjdGl6ZUlucHV0LnRzeFxuICoqLyIsIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcInNlbGVjdGl6ZS13cmFwXCI6XCJzZWxlY3RpemUtd3JhcF8zQU1BaVwiLFwic2VsZWN0aXplLWlucHV0XCI6XCJzZWxlY3RpemUtaW5wdXRfMTRiZ1BcIixcInNlbGVjdGl6ZS1pbnB1dC0tZm9jdXNcIjpcInNlbGVjdGl6ZS1pbnB1dC0tZm9jdXNfVW5aOEJcIixcInNlbGVjdGl6ZS1pbnB1dC0tZW1wdHlcIjpcInNlbGVjdGl6ZS1pbnB1dC0tZW1wdHlfeG43VXlcIixcInF1ZXJ5LXJlc3VsdHNcIjpcInF1ZXJ5LXJlc3VsdHNfT2dFMnRcIixcInNlbGVjdGl6ZS10YWdcIjpcInNlbGVjdGl6ZS10YWdfM2FEMTNcIixcImljb24tcmVtb3ZlXCI6XCJpY29uLXJlbW92ZV8xTzdGX1wifTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL2lzb21vcnBoaWMvZWxlbWVudHMvX2Zvcm0vU2VsZWN0aXplSW5wdXQvU2VsZWN0aXplSW5wdXQuc2Nzc1xuICoqIG1vZHVsZSBpZCA9IDE3N1xuICoqIG1vZHVsZSBjaHVua3MgPSAyIDMgNCA2IDcgOCA5IDExIDE0IDE1XG4gKiovIiwiaW1wb3J0IFRleHRhcmVhIGZyb20gJy4vVGV4dGFyZWEnXG5leHBvcnQgZGVmYXVsdCBUZXh0YXJlYVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogc3JjL2lzb21vcnBoaWMvZWxlbWVudHMvX2Zvcm0vVGV4dGFyZWEvaW5kZXgudHNcbiAqKi8iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBQcm9wcyBhcyBJbnB1dFByb3BzIH0gZnJvbSAnLi4vSW5wdXQvSW5wdXQnXG5pbXBvcnQgQ1NTTW9kdWxlcyBmcm9tICdyZWFjdC1jc3MtbW9kdWxlcydcbmNvbnN0IHN0eWxlcyA9IHJlcXVpcmUoJy4vVGV4dGFyZWEuY3NzJylcblxuZXhwb3J0IGludGVyZmFjZSBQcm9wcyBleHRlbmRzIElucHV0UHJvcHMge1xufVxuXG5AQ1NTTW9kdWxlcyhzdHlsZXMsIHtcbiAgYWxsb3dNdWx0aXBsZTogdHJ1ZVxufSlcbmNsYXNzIFRleHRhcmVhIGV4dGVuZHMgQ29tcG9uZW50PFByb3BzLCBhbnk+IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcylcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBzdHlsZU5hbWU9XCJ0ZXh0YXJlYS13cmFwXCIgY2xhc3NOYW1lPXt0aGlzLnByb3BzLmNsYXNzTmFtZSB8fCAnJ30+XG4gICAgICAgIDx0ZXh0YXJlYVxuICAgICAgICAgIHBsYWNlaG9sZGVyPXt0aGlzLnByb3BzLnBsYWNlaG9sZGVyfVxuICAgICAgICAgIHZhbHVlPXt0aGlzLnByb3BzLnZhbHVlfVxuICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25DaGFuZ2UoZSlcbiAgICAgICAgICB9fVxuICAgICAgICAgIHN0eWxlTmFtZT1cInRleHRhcmVhXCJcbiAgICAgICAgICB0eXBlPXt0aGlzLnByb3BzLnR5cGUgPyB0aGlzLnByb3BzLnR5cGUgOiAndGV4dCd9XG4gICAgICAgICAgbmFtZT17dGhpcy5wcm9wcy5uYW1lID8gdGhpcy5wcm9wcy5uYW1lIDogbnVsbH1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUZXh0YXJlYVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogc3JjL2lzb21vcnBoaWMvZWxlbWVudHMvX2Zvcm0vVGV4dGFyZWEvVGV4dGFyZWEudHN4XG4gKiovIiwiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1widGV4dGFyZWEtd3JhcFwiOlwidGV4dGFyZWEtd3JhcF9Ya3BqMSBpbnB1dC13cmFwXzNkSEEzXCIsXCJ0ZXh0YXJlYVwiOlwidGV4dGFyZWFfMUVkb1NcIn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9pc29tb3JwaGljL2VsZW1lbnRzL19mb3JtL1RleHRhcmVhL1RleHRhcmVhLmNzc1xuICoqIG1vZHVsZSBpZCA9IDE4MFxuICoqIG1vZHVsZSBjaHVua3MgPSAyIDMgNCA2IDcgOCA5IDExIDE0IDE1XG4gKiovIiwiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1widGl0bGVcIjpcInRpdGxlX0JWTzdlXCIsXCJwb3B1cFwiOlwicG9wdXBfTVBDcXJcIixcImhlYWRlclwiOlwiaGVhZGVyXzFJbklmXCIsXCJhdXRob3JcIjpcImF1dGhvcl8yOEJpQVwiLFwiZGVzY3JpcHRpb25cIjpcImRlc2NyaXB0aW9uX0Q5clZOXCJ9O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvaXNvbW9ycGhpYy9jb21wb25lbnRzL0Jvb2tJbmZvUG9wdXAvQm9va0luZm9Qb3B1cC5zY3NzXG4gKiogbW9kdWxlIGlkID0gMTgxXG4gKiogbW9kdWxlIGNodW5rcyA9IDIgMyA2IDlcbiAqKi8iLCIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJtZXRhLWl0ZW1cIjpcIm1ldGEtaXRlbV8yY1J5SlwiLFwiYm9va1wiOlwiYm9va18zT3F6X1wiLFwiYm9vay1tZXRhXCI6XCJib29rLW1ldGFfM2dsY1pcIixcImJvb2stbmFtZVwiOlwiYm9vay1uYW1lXzJqSXVaIG1ldGEtaXRlbV8yY1J5SlwiLFwiYm9vay1hdXRob3JcIjpcImJvb2stYXV0aG9yXzFWTTdlIG1ldGEtaXRlbV8yY1J5SlwiLFwiYm9vay1jb3ZlclwiOlwiYm9vay1jb3Zlcl8xanJLOFwiLFwiYm9vay1kZXNjXCI6XCJib29rLWRlc2NfeEZGS2xcIixcImJvb2stLWNhcmRcIjpcImJvb2stLWNhcmRfM0ZPa3kgYm9va18zT3F6X1wifTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL2lzb21vcnBoaWMvY29tcG9uZW50cy9Cb29rL19ib29rLnNjc3NcbiAqKiBtb2R1bGUgaWQgPSAxODJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMiAzIDYgOVxuICoqLyIsIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImJvb2stbGlzdFwiOlwiYm9vay1saXN0XzJzX0psXCJ9O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvaXNvbW9ycGhpYy9jb21wb25lbnRzL0Jvb2tMaXN0L0Jvb2tMaXN0LnNjc3NcbiAqKiBtb2R1bGUgaWQgPSAxODNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMiAzIDYgOVxuICoqLyIsIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcInNlY3Rpb24tdGl0bGVcIjpcInNlY3Rpb24tdGl0bGVfMkt2M0RcIixcImJvb2stbGlzdC1zZWN0aW9uXCI6XCJib29rLWxpc3Qtc2VjdGlvbl8yQ2ZEZVwiLFwibW9yZVwiOlwibW9yZV9tZ1FIZ1wifTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL2lzb21vcnBoaWMvY29tcG9uZW50cy9Cb29rTGlzdFNlY3Rpb24vQm9va0xpc3RTZWN0aW9uLnNjc3NcbiAqKiBtb2R1bGUgaWQgPSAxODRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMiAzIDZcbiAqKi8iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgQ1NTTW9kdWxlcyBmcm9tICdyZWFjdC1jc3MtbW9kdWxlcydcbmNvbnN0IHN0eWxlcyA9IHJlcXVpcmUoJy4vSGVoZS5zY3NzJylcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgdGl0bGU6IHN0cmluZyB8IEpTWC5FbGVtZW50XG59XG5cbmludGVyZmFjZSBTdGF0ZSB7XG59XG5cbkBDU1NNb2R1bGVzKHN0eWxlcylcbmNsYXNzIENvbXAgZXh0ZW5kcyBDb21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcylcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IHN0eWxlTmFtZT1cImRyb3Bkb3duXCI+XG4gICAgICAgIDxzcGFuIHN0eWxlTmFtZT1cImRyb3Bkb3duLXRvZ2dsZVwiPlxuICAgICAgICAgIHt0aGlzLnByb3BzLnRpdGxlfSA8c3BhbiBzdHlsZU5hbWU9XCJkcm9wZG93bi1jYXJldFwiIC8+XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb21wXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBzcmMvaXNvbW9ycGhpYy9lbGVtZW50cy9IZWhlLnRzeFxuICoqLyIsIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImRyb3Bkb3duLWl0ZW1cIjpcImRyb3Bkb3duLWl0ZW1fMThRRkEgbGlnaHQtbGlua181aHp2Q1wiLFwibGlnaHQtbGlua1wiOlwibGlnaHQtbGlua181aHp2Q1wiLFwiZHJvcGRvd25cIjpcImRyb3Bkb3duXzNFRXdlXCIsXCJkcm9wZG93bi10b2dnbGVcIjpcImRyb3Bkb3duLXRvZ2dsZV8zblFrOVwiLFwiZHJvcGRvd24tbWVudVwiOlwiZHJvcGRvd24tbWVudV8yeUhnaFwiLFwiZHJvcGRvd24tY2FyZXRcIjpcImRyb3Bkb3duLWNhcmV0X3Q4ZEdZXCIsXCJzZXBcIjpcInNlcF8zeE5tYlwiLFwiZHJvcGRvd24tbWVudS0tZGFya1wiOlwiZHJvcGRvd24tbWVudS0tZGFya18ydVp4aCBkcm9wZG93bi1tZW51XzJ5SGdoXCJ9O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvaXNvbW9ycGhpYy9lbGVtZW50cy9IZWhlLnNjc3NcbiAqKiBtb2R1bGUgaWQgPSAxODZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMlxuICoqLyIsIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcInBhZ2UtdGl0bGVcIjpcInBhZ2UtdGl0bGVfWjM2NlZcIixcImhlcm8taW1hZ2VcIjpcImhlcm8taW1hZ2VfMTRaVVhcIixcImxvZ29cIjpcImxvZ29fc2lUN0FcIixcImJ0blwiOlwiYnRuXzFkY21xXCJ9O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvaXNvbW9ycGhpYy9yb3V0ZXMvQXBwSG9tZS9BcHBIb21lLnNjc3NcbiAqKiBtb2R1bGUgaWQgPSAxODdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMlxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=