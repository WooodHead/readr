import { combineReducers } from 'redux';
import { routerReducer as routing } from 'react-router-redux';
import notification from './notification';
import paginate from './paginate';
import _ from 'lodash';
// Updates an entity cache in response to any action with response.entities.
function entities(state = { books: {}, users: {} }, action) {
    if (action.response && action.response.entities) {
        return _.merge({}, state, action.response.entities);
    }
    return state;
}
// Updates error message to notify about the failed fetches.
function errorMessage(state = null, action) {
    const { type, error } = action;
    // if (type === ActionTypes.RESET_ERROR_MESSAGE) {
    //   return null
    // }
    if (error) {
        return action.error;
    }
    return state;
}
function session(state = { user: { role: 'visitor' } }, action) {
    switch (action.type) {
        case 'USER_AUTH_REQUEST':
            return Object.assign({}, state, {
                isFetching: true
            });
        case 'USER_AUTH_SUCCESS':
            return Object.assign({}, state, {
                isFetching: false,
                user: action.response
            });
        case 'USER_AUTH_FAILURE':
            return Object.assign({}, state, {
                isFetching: false,
                user: action.response
            });
        default:
            return state;
    }
}
// Updates the pagination data for different actions.
const pagination = combineReducers({
    // bookList: paginate({
    //   mapActionToKey: action => action.filter,
    //   types: ['BOOK_LIST_REQUEST', 'BOOK_LIST_SUCCESS', 'BOOK_LIST_FAILURE']
    // }),
    filteredBooks: paginate({
        mapActionToKey: action => action.flow,
        types: ['BOOKS_REQUEST', 'BOOKS_SUCCESS', 'BOOKS_FAILURE']
    }),
    userList: paginate({
        // TODO
        mapActionToKey: action => 'all',
        types: ['USER_LIST_REQUEST', 'USER_LIST_SUCCESS', 'USER_LIST_FAILURE'],
    }),
    doubanBookSearchResults: paginate({
        mapActionToKey: action => action.query,
        types: ['DOUBAN_BOOK_SEARCH_REQUEST', 'DOUBAN_BOOK_SEARCH_SUCCESS', 'DOUBAN_BOOK_SEARCH_FAILURE']
    }),
    bookSearchResults: paginate({
        mapActionToKey: action => action.query,
        types: ['BOOK_SEARCH_REQUEST', 'BOOK_SEARCH_SUCCESS', 'BOOK_SEARCH_FAILURE']
    })
});
const components = combineReducers({
    notification: notification
});
const rootReducer = combineReducers({
    components,
    routing,
    entities,
    pagination,
    session
});
export default rootReducer;

//# sourceMappingURL=data:application/json;base64,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QixFQUFFLDRCQUE0QixFQUFFLDRCQUE0QixDQUFDO0tBQ2xHLENBQUM7SUFDRixpQkFBaUIsRUFBRSxRQUFRLENBQUM7UUFDMUIsY0FBYyxFQUFFLE1BQU0sSUFBSSxNQUFNLENBQUMsS0FBSztRQUN0QyxLQUFLLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxxQkFBcUIsRUFBRSxxQkFBcUIsQ0FBQztLQUM3RSxDQUFDO0NBQ0gsQ0FBQyxDQUFBO0FBRUYsTUFBTSxVQUFVLEdBQUcsZUFBZSxDQUFDO0lBQ2pDLFlBQVksRUFBRSxZQUFZO0NBQzNCLENBQUMsQ0FBQTtBQUVGLE1BQU0sV0FBVyxHQUFHLGVBQWUsQ0FBQztJQUNsQyxVQUFVO0lBQ1YsT0FBTztJQUNQLFFBQVE7SUFDUixVQUFVO0lBQ1YsT0FBTztDQUNSLENBQUMsQ0FBQTtBQUVGLGVBQWUsV0FBVyxDQUFBIiwiZmlsZSI6InJlZHVjZXJzL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29tYmluZVJlZHVjZXJzIH0gZnJvbSAncmVkdXgnXG5pbXBvcnQgeyByb3V0ZXJSZWR1Y2VyIGFzIHJvdXRpbmcgfSBmcm9tICdyZWFjdC1yb3V0ZXItcmVkdXgnXG5pbXBvcnQgbm90aWZpY2F0aW9uIGZyb20gJy4vbm90aWZpY2F0aW9uJ1xuaW1wb3J0IHBhZ2luYXRlIGZyb20gJy4vcGFnaW5hdGUnXG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnXG5cbi8vIFVwZGF0ZXMgYW4gZW50aXR5IGNhY2hlIGluIHJlc3BvbnNlIHRvIGFueSBhY3Rpb24gd2l0aCByZXNwb25zZS5lbnRpdGllcy5cbmZ1bmN0aW9uIGVudGl0aWVzKHN0YXRlID0geyBib29rczoge30sIHVzZXJzOiB7fSB9LCBhY3Rpb24pIHtcbiAgaWYgKGFjdGlvbi5yZXNwb25zZSAmJiBhY3Rpb24ucmVzcG9uc2UuZW50aXRpZXMpIHtcbiAgICByZXR1cm4gXy5tZXJnZSh7fSwgc3RhdGUsIGFjdGlvbi5yZXNwb25zZS5lbnRpdGllcylcbiAgfVxuXG4gIHJldHVybiBzdGF0ZVxufVxuXG4vLyBVcGRhdGVzIGVycm9yIG1lc3NhZ2UgdG8gbm90aWZ5IGFib3V0IHRoZSBmYWlsZWQgZmV0Y2hlcy5cbmZ1bmN0aW9uIGVycm9yTWVzc2FnZShzdGF0ZSA9IG51bGwsIGFjdGlvbikge1xuICBjb25zdCB7IHR5cGUsIGVycm9yIH0gPSBhY3Rpb25cblxuICAvLyBpZiAodHlwZSA9PT0gQWN0aW9uVHlwZXMuUkVTRVRfRVJST1JfTUVTU0FHRSkge1xuICAvLyAgIHJldHVybiBudWxsXG4gIC8vIH1cbiAgaWYgKGVycm9yKSB7XG4gICAgcmV0dXJuIGFjdGlvbi5lcnJvclxuICB9XG5cbiAgcmV0dXJuIHN0YXRlXG59XG5cbmZ1bmN0aW9uIHNlc3Npb24oc3RhdGUgPSB7IHVzZXI6IHsgcm9sZTogJ3Zpc2l0b3InIH0gfSwgYWN0aW9uKSB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlICdVU0VSX0FVVEhfUkVRVUVTVCc6XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHtcbiAgICAgICAgaXNGZXRjaGluZzogdHJ1ZVxuICAgICAgfSlcblxuICAgIGNhc2UgJ1VTRVJfQVVUSF9TVUNDRVNTJzpcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZSwge1xuICAgICAgICBpc0ZldGNoaW5nOiBmYWxzZSxcbiAgICAgICAgdXNlcjogYWN0aW9uLnJlc3BvbnNlXG4gICAgICB9KVxuXG4gICAgY2FzZSAnVVNFUl9BVVRIX0ZBSUxVUkUnOlxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7XG4gICAgICAgIGlzRmV0Y2hpbmc6IGZhbHNlLFxuICAgICAgICB1c2VyOiBhY3Rpb24ucmVzcG9uc2VcbiAgICAgIH0pXG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlXG4gIH1cbn1cblxuLy8gVXBkYXRlcyB0aGUgcGFnaW5hdGlvbiBkYXRhIGZvciBkaWZmZXJlbnQgYWN0aW9ucy5cbmNvbnN0IHBhZ2luYXRpb24gPSBjb21iaW5lUmVkdWNlcnMoe1xuICAvLyBib29rTGlzdDogcGFnaW5hdGUoe1xuICAvLyAgIG1hcEFjdGlvblRvS2V5OiBhY3Rpb24gPT4gYWN0aW9uLmZpbHRlcixcbiAgLy8gICB0eXBlczogWydCT09LX0xJU1RfUkVRVUVTVCcsICdCT09LX0xJU1RfU1VDQ0VTUycsICdCT09LX0xJU1RfRkFJTFVSRSddXG4gIC8vIH0pLFxuICBmaWx0ZXJlZEJvb2tzOiBwYWdpbmF0ZSh7XG4gICAgbWFwQWN0aW9uVG9LZXk6IGFjdGlvbiA9PiBhY3Rpb24uZmxvdyxcbiAgICB0eXBlczogWydCT09LU19SRVFVRVNUJywgJ0JPT0tTX1NVQ0NFU1MnLCAnQk9PS1NfRkFJTFVSRSddXG4gIH0pLFxuICB1c2VyTGlzdDogcGFnaW5hdGUoe1xuICAgIC8vIFRPRE9cbiAgICBtYXBBY3Rpb25Ub0tleTogYWN0aW9uID0+ICdhbGwnLFxuICAgIHR5cGVzOiBbJ1VTRVJfTElTVF9SRVFVRVNUJywgJ1VTRVJfTElTVF9TVUNDRVNTJywgJ1VTRVJfTElTVF9GQUlMVVJFJ10sXG4gIH0pLFxuICBkb3ViYW5Cb29rU2VhcmNoUmVzdWx0czogcGFnaW5hdGUoe1xuICAgIG1hcEFjdGlvblRvS2V5OiBhY3Rpb24gPT4gYWN0aW9uLnF1ZXJ5LFxuICAgIHR5cGVzOiBbJ0RPVUJBTl9CT09LX1NFQVJDSF9SRVFVRVNUJywgJ0RPVUJBTl9CT09LX1NFQVJDSF9TVUNDRVNTJywgJ0RPVUJBTl9CT09LX1NFQVJDSF9GQUlMVVJFJ11cbiAgfSksXG4gIGJvb2tTZWFyY2hSZXN1bHRzOiBwYWdpbmF0ZSh7XG4gICAgbWFwQWN0aW9uVG9LZXk6IGFjdGlvbiA9PiBhY3Rpb24ucXVlcnksXG4gICAgdHlwZXM6IFsnQk9PS19TRUFSQ0hfUkVRVUVTVCcsICdCT09LX1NFQVJDSF9TVUNDRVNTJywgJ0JPT0tfU0VBUkNIX0ZBSUxVUkUnXVxuICB9KVxufSlcblxuY29uc3QgY29tcG9uZW50cyA9IGNvbWJpbmVSZWR1Y2Vycyh7XG4gIG5vdGlmaWNhdGlvbjogbm90aWZpY2F0aW9uXG59KVxuXG5jb25zdCByb290UmVkdWNlciA9IGNvbWJpbmVSZWR1Y2Vycyh7XG4gIGNvbXBvbmVudHMsXG4gIHJvdXRpbmcsXG4gIGVudGl0aWVzLFxuICBwYWdpbmF0aW9uLFxuICBzZXNzaW9uXG59KVxuXG5leHBvcnQgZGVmYXVsdCByb290UmVkdWNlclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
