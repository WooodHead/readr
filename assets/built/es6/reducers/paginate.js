import _ from 'lodash';
// Creates a reducer managing pagination, given the action types to handle,
// and a function telling how to extract the key from an action.
export default function paginate({ types, mapActionToKey }) {
    if (!Array.isArray(types) || types.length !== 3) {
        throw new Error('Expected types to be an array of three elements.');
    }
    if (!types.every(t => typeof t === 'string')) {
        throw new Error('Expected types to be strings.');
    }
    if (typeof mapActionToKey !== 'function') {
        throw new Error('Expected mapActionToKey to be a function.');
    }
    const [requestType, successType, failureType] = types;
    function updatePagination(state = {
            isFetching: false,
            nextPageUrl: null,
            pageCount: 0,
            ids: []
        }, action) {
        switch (action.type) {
            case requestType:
                return Object.assign({}, state, {
                    isFetching: true
                });
            case successType:
                return Object.assign({}, state, {
                    isFetching: false,
                    ids: _.union(state.ids, action.response.result),
                    nextPageUrl: action.response.nextPageUrl,
                    pageCount: state.pageCount + 1
                });
            case failureType:
                return Object.assign({}, state, {
                    isFetching: false
                });
            default:
                return state;
        }
    }
    return function updatePaginationByKey(state = {}, action) {
        switch (action.type) {
            case requestType:
            case successType:
            case failureType:
                const key = mapActionToKey(action);
                if (typeof key !== 'string') {
                    throw new Error('Expected key to be a string.');
                }
                return Object.assign({}, state, {
                    [key]: updatePagination(state[key], action)
                });
            default:
                return state;
        }
    };
}

//# sourceMappingURL=data:application/json;base64,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QUM1QyxDQUFDLENBQUE7WUFDSjtnQkFDRSxNQUFNLENBQUMsS0FBSyxDQUFBO1FBQ2hCLENBQUM7SUFDSCxDQUFDLENBQUE7QUFDSCxDQUFDIiwiZmlsZSI6InJlZHVjZXJzL3BhZ2luYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJ1xuXG4vLyBDcmVhdGVzIGEgcmVkdWNlciBtYW5hZ2luZyBwYWdpbmF0aW9uLCBnaXZlbiB0aGUgYWN0aW9uIHR5cGVzIHRvIGhhbmRsZSxcbi8vIGFuZCBhIGZ1bmN0aW9uIHRlbGxpbmcgaG93IHRvIGV4dHJhY3QgdGhlIGtleSBmcm9tIGFuIGFjdGlvbi5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBhZ2luYXRlKHsgdHlwZXMsIG1hcEFjdGlvblRvS2V5IH0pIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KHR5cGVzKSB8fCB0eXBlcy5sZW5ndGggIT09IDMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHR5cGVzIHRvIGJlIGFuIGFycmF5IG9mIHRocmVlIGVsZW1lbnRzLicpXG4gIH1cbiAgaWYgKCF0eXBlcy5ldmVyeSh0ID0+IHR5cGVvZiB0ID09PSAnc3RyaW5nJykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHR5cGVzIHRvIGJlIHN0cmluZ3MuJylcbiAgfVxuICBpZiAodHlwZW9mIG1hcEFjdGlvblRvS2V5ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBtYXBBY3Rpb25Ub0tleSB0byBiZSBhIGZ1bmN0aW9uLicpXG4gIH1cblxuICBjb25zdCBbIHJlcXVlc3RUeXBlLCBzdWNjZXNzVHlwZSwgZmFpbHVyZVR5cGUgXSA9IHR5cGVzXG5cbiAgZnVuY3Rpb24gdXBkYXRlUGFnaW5hdGlvbihzdGF0ZSA9IHtcbiAgICBpc0ZldGNoaW5nOiBmYWxzZSxcbiAgICBuZXh0UGFnZVVybDogbnVsbCxcbiAgICBwYWdlQ291bnQ6IDAsXG4gICAgaWRzOiBbXVxuICB9LCBhY3Rpb24pIHtcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICBjYXNlIHJlcXVlc3RUeXBlOlxuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHtcbiAgICAgICAgICBpc0ZldGNoaW5nOiB0cnVlXG4gICAgICAgIH0pXG4gICAgICBjYXNlIHN1Y2Nlc3NUeXBlOlxuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHtcbiAgICAgICAgICBpc0ZldGNoaW5nOiBmYWxzZSxcbiAgICAgICAgICBpZHM6IF8udW5pb24oc3RhdGUuaWRzLCBhY3Rpb24ucmVzcG9uc2UucmVzdWx0KSxcbiAgICAgICAgICBuZXh0UGFnZVVybDogYWN0aW9uLnJlc3BvbnNlLm5leHRQYWdlVXJsLFxuICAgICAgICAgIHBhZ2VDb3VudDogc3RhdGUucGFnZUNvdW50ICsgMVxuICAgICAgICB9KVxuICAgICAgY2FzZSBmYWlsdXJlVHlwZTpcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLCB7XG4gICAgICAgICAgaXNGZXRjaGluZzogZmFsc2VcbiAgICAgICAgfSlcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBzdGF0ZVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVQYWdpbmF0aW9uQnlLZXkoc3RhdGUgPSB7fSwgYWN0aW9uKSB7XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgY2FzZSByZXF1ZXN0VHlwZTpcbiAgICAgIGNhc2Ugc3VjY2Vzc1R5cGU6XG4gICAgICBjYXNlIGZhaWx1cmVUeXBlOlxuICAgICAgICBjb25zdCBrZXkgPSBtYXBBY3Rpb25Ub0tleShhY3Rpb24pXG5cbiAgICAgICAgaWYgKHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBrZXkgdG8gYmUgYSBzdHJpbmcuJylcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUsIHtcbiAgICAgICAgICBba2V5XTogdXBkYXRlUGFnaW5hdGlvbihzdGF0ZVtrZXldLCBhY3Rpb24pXG4gICAgICAgIH0pXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gc3RhdGVcbiAgICB9XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
