import React, { Component } from 'react';
import { connect } from 'react-redux';
import { fetchBook } from 'actions/index';
import Loading from 'components/Loading';
import Button from 'elements/Button';
import _ from 'lodash';
import Body from 'side-effects/Body';
class BookInfo extends Component {
    constructor(props) {
        super(props);
        this.bookId = props.params.id;
    }
    static fetchData({ store, params }) {
        return store.dispatch(fetchBook(params.id));
    }
    componentDidMount() {
        this.props.fetchBook(this.bookId);
    }
    render() {
        let bookInfo = this.props.bookInfo ? this.props.bookInfo : {};
        return (React.createElement("article", {className: "book-info content-container"}, React.createElement(Body, {className: "book-info"}), _.isEmpty(bookInfo) ? (React.createElement(Loading, null)) : null, React.createElement("header", {className: "book-info-header"}, React.createElement("div", {className: "left-col"}, bookInfo.cover ? (React.createElement("div", {className: "book-cover"}, React.createElement("img", {src: bookInfo.cover}))) : null), React.createElement("div", {className: "right-col"}, React.createElement("h1", {className: "book-name"}, bookInfo.title), React.createElement("div", {className: "book-author"}, React.createElement("strong", null, "作者：", bookInfo.author ? bookInfo.author.map(a => a.name).join(', ') : '')), bookInfo.title ? (React.createElement(Button, {to: `/viewer/book/${bookInfo.id}`, color: "blue"}, "阅读")) : null)), bookInfo.description ? (React.createElement("div", null, React.createElement("h2", null, "内容简介"), React.createElement("p", null, bookInfo.description))) : null));
    }
}
export default connect((state, ownProps) => ({
    bookInfo: state.entities.books[ownProps.params.id]
}), { fetchBook })(BookInfo);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnRhaW5lcnMvQm9va0luZm8udHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJPQUFPLEtBQUssRUFBRSxFQUFFLFNBQVMsRUFBRSxNQUFNLE9BQU87T0FFakMsRUFBRSxPQUFPLEVBQUUsTUFBTSxhQUFhO09BQzlCLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZTtPQUNsQyxPQUFPLE1BQU0sb0JBQW9CO09BR2pDLE1BQU0sTUFBTSxpQkFBaUI7T0FFN0IsQ0FBQyxNQUFNLFFBQVE7T0FDZixJQUFJLE1BQU0sbUJBQW1CO0FBRXBDLHVCQUF1QixTQUFTO0lBUTlCLFlBQVksS0FBSztRQUNmLE1BQU0sS0FBSyxDQUFDLENBQUE7UUFDWixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFBO0lBQy9CLENBQUM7SUFQRCxPQUFPLFNBQVMsQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLEVBQUM7UUFDOUIsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQzdDLENBQUM7SUFPRCxpQkFBaUI7UUFDZixJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDbkMsQ0FBQztJQUVELE1BQU07UUFDSixJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBQyxFQUFFLENBQUE7UUFFekQsTUFBTSxDQUFDLENBQ0wscUJBQUMsT0FBTyxJQUFDLFNBQVMsRUFBQyw2QkFBNkIsR0FDOUMsb0JBQUMsSUFBSSxHQUFDLFNBQVMsRUFBQyxXQUFXLEVBQUcsRUFFNUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBQyxDQUNsQixvQkFBQyxPQUFPLE9BQUcsQ0FDWixHQUFDLElBQ0gsRUFDRCxxQkFBQyxNQUFNLElBQUMsU0FBUyxFQUFDLGtCQUFrQixHQUNsQyxxQkFBQyxHQUFHLElBQUMsU0FBUyxFQUFDLFVBQVUsR0FFckIsUUFBUSxDQUFDLEtBQUssR0FBQyxDQUNiLHFCQUFDLEdBQUcsSUFBQyxTQUFTLEVBQUMsWUFBWSxHQUN6QixxQkFBQyxHQUFHLElBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxLQUFNLEVBQUcsQ0FDeEIsQ0FDUCxHQUFDLElBQ0gsQ0FDRyxFQUNOLHFCQUFDLEdBQUcsSUFBQyxTQUFTLEVBQUMsV0FBVyxHQUN4QixxQkFBQyxFQUFFLElBQUMsU0FBUyxFQUFDLFdBQVcsR0FBRSxRQUFRLENBQUMsS0FBTSxDQUFLLEVBQy9DLHFCQUFDLEdBQUcsSUFBQyxTQUFTLEVBQUMsYUFBYSxHQUMxQixxQkFBQyxNQUFNLGdCQUFLLFFBQVEsQ0FBQyxNQUFNLEdBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUMsRUFBRyxDQUFTLENBQ2hGLEVBRUosUUFBUSxDQUFDLEtBQUssR0FBQyxDQUNiLG9CQUFDLE1BQU0sR0FBQyxFQUFFLEVBQUUsZ0JBQWdCLFFBQVEsQ0FBQyxFQUFFLEVBQUcsRUFBQyxLQUFLLEVBQUMsTUFBTSxRQUFZLENBQ3BFLEdBQUMsSUFDSCxDQUVHLENBQ0MsRUFFUCxRQUFRLENBQUMsV0FBVyxHQUFDLENBQ25CLHFCQUFDLEdBQUcsU0FDRixxQkFBQyxFQUFFLGdCQUFVLEVBQ2IscUJBQUMsQ0FBQyxTQUFFLFFBQVEsQ0FBQyxXQUFZLENBQUksQ0FDekIsQ0FDUCxHQUFDLElBQ0gsQ0FDTyxDQUNYLENBQUE7SUFDSCxDQUFDO0FBQ0gsQ0FBQztBQUdELGVBQWUsT0FBTyxDQUNwQixDQUFDLEtBQUssRUFBRSxRQUFhLEtBQUksQ0FBQztJQUN4QixRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7Q0FDbkQsQ0FBQyxFQUNGLEVBQUUsU0FBUyxFQUFTLENBQ3JCLENBQUMsUUFBUSxDQUFDLENBQUEiLCJmaWxlIjoiY29udGFpbmVycy9Cb29rSW5mby5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXInXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnXG5pbXBvcnQgeyBmZXRjaEJvb2sgfSBmcm9tICdhY3Rpb25zL2luZGV4J1xuaW1wb3J0IExvYWRpbmcgZnJvbSAnY29tcG9uZW50cy9Mb2FkaW5nJ1xuaW1wb3J0IEJyYW5kaW5nIGZyb20gJ2NvbXBvbmVudHMvQnJhbmRpbmcnXG5pbXBvcnQgQ29sb3Bob24gZnJvbSAnY29tcG9uZW50cy9Db2xvcGhvbidcbmltcG9ydCBCdXR0b24gZnJvbSAnZWxlbWVudHMvQnV0dG9uJ1xuaW1wb3J0IENvbnRhaW5lciBmcm9tICdlbGVtZW50cy9Db250YWluZXInXG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnXG5pbXBvcnQgQm9keSBmcm9tICdzaWRlLWVmZmVjdHMvQm9keSdcblxuY2xhc3MgQm9va0luZm8gZXh0ZW5kcyBDb21wb25lbnQ8YW55LCBhbnk+IHtcbiAgXG4gIGJvb2tJZDogc3RyaW5nXG5cbiAgc3RhdGljIGZldGNoRGF0YSh7c3RvcmUsIHBhcmFtc30pIHtcbiAgICByZXR1cm4gc3RvcmUuZGlzcGF0Y2goZmV0Y2hCb29rKHBhcmFtcy5pZCkpXG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKVxuICAgIHRoaXMuYm9va0lkID0gcHJvcHMucGFyYW1zLmlkXG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnByb3BzLmZldGNoQm9vayh0aGlzLmJvb2tJZClcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBsZXQgYm9va0luZm8gPSB0aGlzLnByb3BzLmJvb2tJbmZvP3RoaXMucHJvcHMuYm9va0luZm86e31cblxuICAgIHJldHVybiAoXG4gICAgICA8YXJ0aWNsZSBjbGFzc05hbWU9XCJib29rLWluZm8gY29udGVudC1jb250YWluZXJcIj5cbiAgICAgICAgPEJvZHkgY2xhc3NOYW1lPVwiYm9vay1pbmZvXCIgLz5cbiAgICAgICAge1xuICAgICAgICAgIF8uaXNFbXB0eShib29rSW5mbyk/KFxuICAgICAgICAgICAgPExvYWRpbmcgLz5cbiAgICAgICAgICApOm51bGxcbiAgICAgICAgfVxuICAgICAgICA8aGVhZGVyIGNsYXNzTmFtZT1cImJvb2staW5mby1oZWFkZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxlZnQtY29sXCI+XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGJvb2tJbmZvLmNvdmVyPyhcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJvb2stY292ZXJcIj5cbiAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPXtib29rSW5mby5jb3Zlcn0gLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgKTpudWxsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyaWdodC1jb2xcIj5cbiAgICAgICAgICAgIDxoMSBjbGFzc05hbWU9XCJib29rLW5hbWVcIj57Ym9va0luZm8udGl0bGV9PC9oMT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYm9vay1hdXRob3JcIj5cbiAgICAgICAgICAgICAgPHN0cm9uZz7kvZzogIXvvJp7Ym9va0luZm8uYXV0aG9yP2Jvb2tJbmZvLmF1dGhvci5tYXAoYSA9PiBhLm5hbWUpLmpvaW4oJywgJyk6Jyd9PC9zdHJvbmc+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgYm9va0luZm8udGl0bGU/KFxuICAgICAgICAgICAgICAgIDxCdXR0b24gdG89e2Avdmlld2VyL2Jvb2svJHtib29rSW5mby5pZH1gfSBjb2xvcj1cImJsdWVcIj7pmIXor7s8L0J1dHRvbj5cbiAgICAgICAgICAgICAgKTpudWxsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB7Lyo8cD48YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPXtgaHR0cDovL2Jvb2suZG91YmFuLmNvbS9zdWJqZWN0LyR7Ym9va0luZm8uYm9va19pZH1gfT7lnKjosYbnk6Pmn6XnnIs8L2E+PC9wPiovfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2hlYWRlcj5cbiAgICAgICAge1xuICAgICAgICAgIGJvb2tJbmZvLmRlc2NyaXB0aW9uPyhcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxoMj7lhoXlrrnnroDku4s8L2gyPlxuICAgICAgICAgICAgICA8cD57Ym9va0luZm8uZGVzY3JpcHRpb259PC9wPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKTpudWxsXG4gICAgICAgIH1cbiAgICAgIDwvYXJ0aWNsZT5cbiAgICApXG4gIH1cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxuICAoc3RhdGUsIG93blByb3BzOiBhbnkpID0+KHtcbiAgICBib29rSW5mbzogc3RhdGUuZW50aXRpZXMuYm9va3Nbb3duUHJvcHMucGFyYW1zLmlkXVxuICB9KSxcbiAgeyBmZXRjaEJvb2sgfSBhcyBhbnlcbikoQm9va0luZm8pXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
