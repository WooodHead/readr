import React, { Component } from 'react';
import { connect } from 'react-redux';
import { searchBooks, handleNotification } from 'actions/index';
import Input from 'elements/Input';
import Button from 'elements/Button';
import SelectizeInput from 'elements/SelectizeInput';
import Notification from 'components/Notification';
import apis from 'utils/apis';
class AddCollection extends Component {
    constructor(props) {
        super(props);
        this.defaultState = {
            bookResults: [],
            collectedBooks: [],
            collectionName: '',
            collectionDesc: ''
        };
        this.state = Object.assign({}, this.defaultState);
    }
    // getCurrentSearchResults() {
    //   let query = this.state.booksToAdd
    //   let books = this.props.books
    //
    //   return this.props.bookSearchResults?this.props.bookSearchResults[query].ids.map((id, index) => {
    //     console.log(id);
    //     return books[id]
    //   }):[]
    // }
    addCollection(e) {
        e.preventDefault();
        let name = this.state.collectionName;
        let items = JSON.stringify(this.state.collectedBooks.map(a => a.id));
        let description = this.state.collectionDesc;
        const data = { name, items, description };
        apis.addCollection(data).then(result => {
            this.props.handleNotification('添加成功');
            this.setState(this.defaultState);
        }, error => {
            this.props.handleNotification(error.message);
        });
    }
    searchBooks(e) {
        let query = e.target.value;
        if (query !== '') {
            apis.searchBooks(query).then(response => {
                console.log(response);
                this.setState({
                    bookResults: response
                });
            });
        }
    }
    // searchTags(e) {
    //   let query = e.target.value
    //   if(query !== '') {
    //     apis.searchTags(query).then(response => {
    //       console.log(response)
    //       this.setState({
    //         tagResults: response
    //       })
    //     })
    //   }
    // }
    componentDidMount() {
    }
    render() {
        let notification = this.props.notification;
        return (React.createElement("form", null, React.createElement(Notification, {notification: notification}), React.createElement("h1", {className: "page-title"}, "Add Collection"), React.createElement(Input, {value: this.state.collectionName, onChange: (e) => this.setState({ collectionName: e.target.value }), placeholder: "Name"}), React.createElement(SelectizeInput, {ref: "collectedBooks", onChange: this.searchBooks.bind(this), onValuesChange: (targetIndex, type) => {
            switch (type) {
                case 'ADD':
                    this.setState({
                        collectedBooks: [...this.state.collectedBooks, this.state.bookResults[targetIndex]]
                    });
                    break;
                case 'REMOVE':
                    this.setState({
                        collectedBooks: this.state.collectedBooks.filter((value, index) => (targetIndex !== index ? true : false))
                    });
                    break;
                default:
                    console.error('Undefined type');
            }
        }, options: this.state.bookResults.map(a => ({
            value: a.title,
            subInfo: a.author.map(a => a.name).join(', '),
            thumb: a.cover
        })), values: this.state.collectedBooks.map(book => book.title), placeholder: "Books"}), React.createElement("textarea", {value: this.state.collectionDesc, onChange: (e) => this.setState({ collectionDesc: e.target.value }), placeholder: "Description"}), React.createElement(Button, {onClick: this.addCollection.bind(this)}, "Add")));
    }
}
function mapStateToProps(state) {
    return {
        bookSearchResults: state.pagination.bookSearchResults,
        books: state.entities.books,
        notification: state.components.notification
    };
}
export default connect(mapStateToProps, { searchBooks, handleNotification })(AddCollection);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnRhaW5lcnMvY29uc29sZS9BZGRDb2xsZWN0aW9uLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiT0FBTyxLQUFLLEVBQUUsRUFBRSxTQUFTLEVBQWEsTUFBTSxPQUFPO09BRTVDLEVBQUUsT0FBTyxFQUFFLE1BQU0sYUFBYTtPQUU5QixFQUFFLFdBQVcsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGVBQWU7T0FDeEQsS0FBSyxNQUFNLGdCQUFnQjtPQUMzQixNQUFNLE1BQU0saUJBQWlCO09BQzdCLGNBQWMsTUFBTSx5QkFBeUI7T0FDN0MsWUFBWSxNQUFNLHlCQUF5QjtPQUMzQyxJQUFJLE1BQU0sWUFBWTtBQUc3Qiw0QkFBNEIsU0FBUztJQUluQyxZQUFZLEtBQUs7UUFDZixNQUFNLEtBQUssQ0FBQyxDQUFBO1FBQ1osSUFBSSxDQUFDLFlBQVksR0FBRztZQUNsQixXQUFXLEVBQUUsRUFBRTtZQUNmLGNBQWMsRUFBRSxFQUFFO1lBQ2xCLGNBQWMsRUFBRSxFQUFFO1lBQ2xCLGNBQWMsRUFBRSxFQUFFO1NBQ25CLENBQUE7UUFDRCxJQUFJLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQTtJQUNuRCxDQUFDO0lBRUQsOEJBQThCO0lBQzlCLHNDQUFzQztJQUN0QyxpQ0FBaUM7SUFDakMsRUFBRTtJQUNGLHFHQUFxRztJQUNyRyx1QkFBdUI7SUFDdkIsdUJBQXVCO0lBQ3ZCLFVBQVU7SUFDVixJQUFJO0lBRUosYUFBYSxDQUFDLENBQUM7UUFDYixDQUFDLENBQUMsY0FBYyxFQUFFLENBQUE7UUFDbEIsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUE7UUFDcEMsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENB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ZUFBZSxPQUFPLENBQ3BCLGVBQWUsRUFDZixFQUFFLFdBQVcsRUFBRSxrQkFBa0IsRUFBUyxDQUMzQyxDQUFDLGFBQWEsQ0FBQyxDQUFBIiwiZmlsZSI6ImNvbnRhaW5lcnMvY29uc29sZS9BZGRDb2xsZWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJ1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlcidcbmltcG9ydCB7IHNlYXJjaEJvb2tzLCBoYW5kbGVOb3RpZmljYXRpb24gfSBmcm9tICdhY3Rpb25zL2luZGV4J1xuaW1wb3J0IElucHV0IGZyb20gJ2VsZW1lbnRzL0lucHV0J1xuaW1wb3J0IEJ1dHRvbiBmcm9tICdlbGVtZW50cy9CdXR0b24nXG5pbXBvcnQgU2VsZWN0aXplSW5wdXQgZnJvbSAnZWxlbWVudHMvU2VsZWN0aXplSW5wdXQnXG5pbXBvcnQgTm90aWZpY2F0aW9uIGZyb20gJ2NvbXBvbmVudHMvTm90aWZpY2F0aW9uJ1xuaW1wb3J0IGFwaXMgZnJvbSAndXRpbHMvYXBpcydcblxuXG5jbGFzcyBBZGRDb2xsZWN0aW9uIGV4dGVuZHMgQ29tcG9uZW50PGFueSwgYW55PiB7XG5cbiAgZGVmYXVsdFN0YXRlOiB7fVxuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpXG4gICAgdGhpcy5kZWZhdWx0U3RhdGUgPSB7XG4gICAgICBib29rUmVzdWx0czogW10sXG4gICAgICBjb2xsZWN0ZWRCb29rczogW10sXG4gICAgICBjb2xsZWN0aW9uTmFtZTogJycsXG4gICAgICBjb2xsZWN0aW9uRGVzYzogJydcbiAgICB9XG4gICAgdGhpcy5zdGF0ZSA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuZGVmYXVsdFN0YXRlKVxuICB9XG5cbiAgLy8gZ2V0Q3VycmVudFNlYXJjaFJlc3VsdHMoKSB7XG4gIC8vICAgbGV0IHF1ZXJ5ID0gdGhpcy5zdGF0ZS5ib29rc1RvQWRkXG4gIC8vICAgbGV0IGJvb2tzID0gdGhpcy5wcm9wcy5ib29rc1xuICAvL1xuICAvLyAgIHJldHVybiB0aGlzLnByb3BzLmJvb2tTZWFyY2hSZXN1bHRzP3RoaXMucHJvcHMuYm9va1NlYXJjaFJlc3VsdHNbcXVlcnldLmlkcy5tYXAoKGlkLCBpbmRleCkgPT4ge1xuICAvLyAgICAgY29uc29sZS5sb2coaWQpO1xuICAvLyAgICAgcmV0dXJuIGJvb2tzW2lkXVxuICAvLyAgIH0pOltdXG4gIC8vIH1cblxuICBhZGRDb2xsZWN0aW9uKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBsZXQgbmFtZSA9IHRoaXMuc3RhdGUuY29sbGVjdGlvbk5hbWVcbiAgICBsZXQgaXRlbXMgPSBKU09OLnN0cmluZ2lmeSh0aGlzLnN0YXRlLmNvbGxlY3RlZEJvb2tzLm1hcChhID0+IGEuaWQpKVxuICAgIGxldCBkZXNjcmlwdGlvbiA9IHRoaXMuc3RhdGUuY29sbGVjdGlvbkRlc2NcblxuICAgIGNvbnN0IGRhdGEgPSB7bmFtZSwgaXRlbXMsIGRlc2NyaXB0aW9ufVxuXG4gICAgYXBpcy5hZGRDb2xsZWN0aW9uKGRhdGEpLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgIHRoaXMucHJvcHMuaGFuZGxlTm90aWZpY2F0aW9uKCfmt7vliqDmiJDlip8nKVxuICAgICAgdGhpcy5zZXRTdGF0ZSh0aGlzLmRlZmF1bHRTdGF0ZSlcbiAgICB9LCBlcnJvciA9PiB7XG4gICAgICB0aGlzLnByb3BzLmhhbmRsZU5vdGlmaWNhdGlvbihlcnJvci5tZXNzYWdlKVxuICAgIH0pXG4gIH1cblxuICBzZWFyY2hCb29rcyhlKSB7XG4gICAgbGV0IHF1ZXJ5ID0gZS50YXJnZXQudmFsdWVcblxuICAgIGlmKHF1ZXJ5ICE9PSAnJykge1xuICAgICAgYXBpcy5zZWFyY2hCb29rcyhxdWVyeSkudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKVxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBib29rUmVzdWx0czogcmVzcG9uc2VcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgLy8gc2VhcmNoVGFncyhlKSB7XG4gIC8vICAgbGV0IHF1ZXJ5ID0gZS50YXJnZXQudmFsdWVcblxuICAvLyAgIGlmKHF1ZXJ5ICE9PSAnJykge1xuICAvLyAgICAgYXBpcy5zZWFyY2hUYWdzKHF1ZXJ5KS50aGVuKHJlc3BvbnNlID0+IHtcbiAgLy8gICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpXG4gIC8vICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAvLyAgICAgICAgIHRhZ1Jlc3VsdHM6IHJlc3BvbnNlXG4gIC8vICAgICAgIH0pXG4gIC8vICAgICB9KVxuICAvLyAgIH1cbiAgLy8gfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICB9XG5cbiAgcmVuZGVyKCl7XG4gICAgbGV0IG5vdGlmaWNhdGlvbiA9IHRoaXMucHJvcHMubm90aWZpY2F0aW9uXG5cbiAgICByZXR1cm4gKFxuICAgICAgPGZvcm0+XG4gICAgICAgIDxOb3RpZmljYXRpb24gbm90aWZpY2F0aW9uPXtub3RpZmljYXRpb259IC8+XG4gICAgICAgIDxoMSBjbGFzc05hbWU9XCJwYWdlLXRpdGxlXCI+QWRkIENvbGxlY3Rpb248L2gxPlxuICAgICAgICA8SW5wdXQgdmFsdWU9e3RoaXMuc3RhdGUuY29sbGVjdGlvbk5hbWV9IG9uQ2hhbmdlPXsoZSkgPT4gdGhpcy5zZXRTdGF0ZSh7Y29sbGVjdGlvbk5hbWU6IGUudGFyZ2V0LnZhbHVlfSl9IHBsYWNlaG9sZGVyPVwiTmFtZVwiIC8+XG4gICAgICAgIDxTZWxlY3RpemVJbnB1dFxuICAgICAgICAgIHJlZj1cImNvbGxlY3RlZEJvb2tzXCJcbiAgICAgICAgICBvbkNoYW5nZT17dGhpcy5zZWFyY2hCb29rcy5iaW5kKHRoaXMpfVxuICAgICAgICAgIG9uVmFsdWVzQ2hhbmdlPXsodGFyZ2V0SW5kZXgsIHR5cGUpID0+IHtcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgICBjYXNlICdBREQnOlxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgY29sbGVjdGVkQm9va3M6IFsuLi50aGlzLnN0YXRlLmNvbGxlY3RlZEJvb2tzLCB0aGlzLnN0YXRlLmJvb2tSZXN1bHRzW3RhcmdldEluZGV4XV1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgICAgIGNhc2UgJ1JFTU9WRSc6XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICBjb2xsZWN0ZWRCb29rczogdGhpcy5zdGF0ZS5jb2xsZWN0ZWRCb29rcy5maWx0ZXIoKHZhbHVlLCBpbmRleCkgPT4gKHRhcmdldEluZGV4ICE9PSBpbmRleD90cnVlOmZhbHNlKSlcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICBicmVha1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignVW5kZWZpbmVkIHR5cGUnKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH19XG4gICAgICAgICAgb3B0aW9ucz17dGhpcy5zdGF0ZS5ib29rUmVzdWx0cy5tYXAoYSA9PiAoe1xuICAgICAgICAgICAgdmFsdWU6IGEudGl0bGUsXG4gICAgICAgICAgICBzdWJJbmZvOiBhLmF1dGhvci5tYXAoYSA9PiBhLm5hbWUpLmpvaW4oJywgJyksXG4gICAgICAgICAgICB0aHVtYjogYS5jb3ZlclxuICAgICAgICAgIH0pKX1cbiAgICAgICAgICB2YWx1ZXM9e3RoaXMuc3RhdGUuY29sbGVjdGVkQm9va3MubWFwKGJvb2sgPT4gYm9vay50aXRsZSl9XG4gICAgICAgICAgcGxhY2Vob2xkZXI9XCJCb29rc1wiXG4gICAgICAgIC8+XG4gICAgICAgIHsvKjxTZWxlY3RpemVJbnB1dFxuICAgICAgICAgIHJlZj1cImNvbGxlY3Rpb25UYWdzXCJcbiAgICAgICAgICBvbkNoYW5nZT17dGhpcy5zZWFyY2hUYWdzLmJpbmQodGhpcyl9XG4gICAgICAgICAgb25WYWx1ZXNDaGFuZ2U9eyh0YXJnZXRJbmRleCwgdHlwZSkgPT4ge1xuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICAgIGNhc2UgJ0FERCc6XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uVGFnczogWy4uLnRoaXMuc3RhdGUuY29sbGVjdGlvblRhZ3MsIHRoaXMuc3RhdGUudGFnclJlc3VsdHNbdGFyZ2V0SW5kZXhdXVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICAgICAgY2FzZSAnUkVNT1ZFJzpcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25UYWdzOiB0aGlzLnN0YXRlLmNvbGxlY3Rpb25UYWdzLmZpbHRlcigodmFsdWUsIGluZGV4KSA9PiAodGFyZ2V0SW5kZXggIT09IGluZGV4P3RydWU6ZmFsc2UpKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmRlZmluZWQgdHlwZScpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfX1cbiAgICAgICAgICBvcHRpb25zPXt0aGlzLnN0YXRlLnRhZ1Jlc3VsdHMubWFwKGEgPT4gYS5uYW1lKX1cbiAgICAgICAgICB2YWx1ZXM9e3RoaXMuc3RhdGUuY29sbGVjdGlvblRhZ3MubWFwKGEgPT4gYS5uYW1lKX1cbiAgICAgICAgICBwbGFjZWhvbGRlcj1cIkF1dGhvclwiXG4gICAgICAgICAgYWRkTmV3VmFsdWU9eygpID0+IHtcbiAgICAgICAgICAgIGxldCBuYW1lID0gdGhpcy5yZWZzLmJvb2tBdXRob3Iuc3RhdGUudmFsdWVcblxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgIGlzQWRkQXV0aG9yTW9kYWxWaXNpYmxlOiB0cnVlLFxuICAgICAgICAgICAgICBhdXRob3JOYW1lOiBuYW1lXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH19XG4gICAgICAgIC8+Ki99XG4gICAgICAgIDx0ZXh0YXJlYSB2YWx1ZT17dGhpcy5zdGF0ZS5jb2xsZWN0aW9uRGVzY30gb25DaGFuZ2U9eyhlKSA9PiB0aGlzLnNldFN0YXRlKHtjb2xsZWN0aW9uRGVzYzogKGUudGFyZ2V0IGFzIEhUTUxUZXh0QXJlYUVsZW1lbnQpLnZhbHVlfSl9IHBsYWNlaG9sZGVyPVwiRGVzY3JpcHRpb25cIiAvPlxuICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e3RoaXMuYWRkQ29sbGVjdGlvbi5iaW5kKHRoaXMpfT5BZGQ8L0J1dHRvbj5cbiAgICAgIDwvZm9ybT5cbiAgICApXG4gIH1cbn1cblxuZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKHN0YXRlKSB7XG4gIHJldHVybiB7XG4gICAgYm9va1NlYXJjaFJlc3VsdHM6IHN0YXRlLnBhZ2luYXRpb24uYm9va1NlYXJjaFJlc3VsdHMsXG4gICAgYm9va3M6IHN0YXRlLmVudGl0aWVzLmJvb2tzLFxuICAgIG5vdGlmaWNhdGlvbjogc3RhdGUuY29tcG9uZW50cy5ub3RpZmljYXRpb25cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxuICBtYXBTdGF0ZVRvUHJvcHMsXG4gIHsgc2VhcmNoQm9va3MsIGhhbmRsZU5vdGlmaWNhdGlvbiB9IGFzIGFueVxuKShBZGRDb2xsZWN0aW9uKVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
