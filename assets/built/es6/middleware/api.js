import callApi from 'utils/callApi';
import ApiRoots from 'constants/ApiRoots';
export default store => next => action => {
    const CALL_API = action.CALL_API;
    if (typeof CALL_API === 'undefined') {
        return next(action);
    }
    let { endpoint, apiUrl, extendedOptions } = CALL_API;
    const { types, schema } = CALL_API;
    const [requestType, successType, failureType] = types;
    function actionWith(data) {
        const finalAction = Object.assign({}, action, data);
        delete finalAction.CALL_API;
        return finalAction;
    }
    next(actionWith({ type: requestType }));
    if (typeof endpoint === 'function') {
        endpoint = endpoint(store.getState());
    }
    if (typeof apiUrl === 'undefined') {
        apiUrl = ApiRoots.LOCAL;
    }
    const fullUrl = apiUrl + endpoint;
    let options = { fullUrl, schema };
    if (typeof extendedOptions !== 'undefined') {
        options = Object.assign({}, options, extendedOptions);
    }
    return callApi(options).then(response => next(actionWith({
        response,
        type: successType
    })), error => next(actionWith({
        type: failureType,
        error: error.message || 'Oops!'
    })));
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1pZGRsZXdhcmUvYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJPQUFPLE9BQU8sTUFBTSxlQUFlO09BQzVCLFFBQVEsTUFBTSxvQkFBb0I7QUFFekMsZUFBZSxLQUFLLElBQUksSUFBSSxJQUFJLE1BQU07SUFDcEMsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQTtJQUNoQyxFQUFFLENBQUMsQ0FBQyxPQUFPLFFBQVEsS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDckIsQ0FBQztJQUVELElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxHQUFHLFFBQVEsQ0FBQTtJQUNwRCxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQTtJQUNsQyxNQUFNLENBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLENBQUUsR0FBRyxLQUFLLENBQUE7SUFFdkQsb0JBQW9CLElBQUk7UUFDdEIsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQ25ELE9BQU8sV0FBVyxDQUFDLFFBQVEsQ0FBQTtRQUMzQixNQUFNLENBQUMsV0FBVyxDQUFBO0lBQ3BCLENBQUM7SUFFRCxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUMsSUFBSSxFQUFFLFdBQVcsRUFBQyxDQUFDLENBQUMsQ0FBQTtJQUVyQyxFQUFFLENBQUMsQ0FBQyxPQUFPLFFBQVEsS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ25DLFFBQVEsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUE7SUFDdkMsQ0FBQztJQUVELEVBQUUsQ0FBQSxDQUFDLE9BQU8sTUFBTSxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDakMsTUFBTSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUE7SUFDekIsQ0FBQztJQUVELE1BQU0sT0FBTyxHQUFHLE1BQU0sR0FBRyxRQUFRLENBQUE7SUFDakMsSUFBSSxPQUFPLEdBQUcsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLENBQUE7SUFFakMsRUFBRSxDQUFBLENBQUMsT0FBTyxlQUFlLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQztRQUMxQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFLGVBQWUsQ0FBQyxDQUFBO0lBQ3ZELENBQUM7SUFFRCxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDMUIsUUFBUSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDMUIsUUFBUTtRQUNSLElBQUksRUFBRSxXQUFXO0tBQ2xCLENBQUMsQ0FBQyxFQUNILEtBQUssSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQ3ZCLElBQUksRUFBRSxXQUFXO1FBQ2pCLEtBQUssRUFBRSxLQUFLLENBQUMsT0FBTyxJQUFJLE9BQU87S0FDaEMsQ0FBQyxDQUFDLENBQ0osQ0FBQTtBQUNILENBQUMsQ0FBQSIsImZpbGUiOiJtaWRkbGV3YXJlL2FwaS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjYWxsQXBpIGZyb20gJ3V0aWxzL2NhbGxBcGknXG5pbXBvcnQgQXBpUm9vdHMgZnJvbSAnY29uc3RhbnRzL0FwaVJvb3RzJ1xuXG5leHBvcnQgZGVmYXVsdCBzdG9yZSA9PiBuZXh0ID0+IGFjdGlvbiA9PiB7XG4gIGNvbnN0IENBTExfQVBJID0gYWN0aW9uLkNBTExfQVBJXG4gIGlmICh0eXBlb2YgQ0FMTF9BUEkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG5leHQoYWN0aW9uKVxuICB9XG5cbiAgbGV0IHsgZW5kcG9pbnQsIGFwaVVybCwgZXh0ZW5kZWRPcHRpb25zIH0gPSBDQUxMX0FQSVxuICBjb25zdCB7IHR5cGVzLCBzY2hlbWEgfSA9IENBTExfQVBJXG4gIGNvbnN0IFsgcmVxdWVzdFR5cGUsIHN1Y2Nlc3NUeXBlLCBmYWlsdXJlVHlwZSBdID0gdHlwZXNcblxuICBmdW5jdGlvbiBhY3Rpb25XaXRoKGRhdGEpIHtcbiAgICBjb25zdCBmaW5hbEFjdGlvbiA9IE9iamVjdC5hc3NpZ24oe30sIGFjdGlvbiwgZGF0YSlcbiAgICBkZWxldGUgZmluYWxBY3Rpb24uQ0FMTF9BUElcbiAgICByZXR1cm4gZmluYWxBY3Rpb25cbiAgfVxuXG4gIG5leHQoYWN0aW9uV2l0aCh7dHlwZTogcmVxdWVzdFR5cGV9KSlcblxuICBpZiAodHlwZW9mIGVuZHBvaW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZW5kcG9pbnQgPSBlbmRwb2ludChzdG9yZS5nZXRTdGF0ZSgpKVxuICB9XG5cbiAgaWYodHlwZW9mIGFwaVVybCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBhcGlVcmwgPSBBcGlSb290cy5MT0NBTFxuICB9XG5cbiAgY29uc3QgZnVsbFVybCA9IGFwaVVybCArIGVuZHBvaW50XG4gIGxldCBvcHRpb25zID0geyBmdWxsVXJsLCBzY2hlbWEgfVxuXG4gIGlmKHR5cGVvZiBleHRlbmRlZE9wdGlvbnMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIGV4dGVuZGVkT3B0aW9ucylcbiAgfVxuXG4gIHJldHVybiBjYWxsQXBpKG9wdGlvbnMpLnRoZW4oXG4gICAgcmVzcG9uc2UgPT4gbmV4dChhY3Rpb25XaXRoKHtcbiAgICAgIHJlc3BvbnNlLFxuICAgICAgdHlwZTogc3VjY2Vzc1R5cGVcbiAgICB9KSksXG4gICAgZXJyb3IgPT4gbmV4dChhY3Rpb25XaXRoKHtcbiAgICAgIHR5cGU6IGZhaWx1cmVUeXBlLFxuICAgICAgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfHwgJ09vcHMhJ1xuICAgIH0pKVxuICApXG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
