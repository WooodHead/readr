import { createStore, compose, applyMiddleware } from 'redux';
import thunk from 'redux-thunk';
import rootReducer from 'reducers/index';
import api from 'middleware/api';
import modifyResponse from 'middleware/modifyResponse';
import handleInitialState from 'utils/handleInitialState';
import createLogger from 'redux-logger';
const env = process.env.NODE_ENV;
export default function configureStore() {
    let store;
    // if(module.hot) {
    //   module.hot.accept('../reducers', () => {
    //     const nextRootReducer = require('../reducers').default
    //     store.replaceReducer(nextRootReducer)
    //   })
    // }
    // server side
    if (typeof window === 'undefined') {
        store = createStore(rootReducer, {}, applyMiddleware(thunk, api, modifyResponse));
        return store;
    }
    if (env === 'production') {
        store = createStore(rootReducer, handleInitialState(), applyMiddleware(thunk, api, modifyResponse));
    }
    else {
        store = createStore(rootReducer, handleInitialState(), compose(applyMiddleware(thunk, api, modifyResponse, createLogger({ collapsed: true }))));
    }
    return store;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0b3JlL2NvbmZpZ3VyZVN0b3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJPQUFPLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxPQUFPO09BQ3RELEtBQUssTUFBTSxhQUFhO09BQ3hCLFdBQVcsTUFBTSxnQkFBZ0I7T0FDakMsR0FBRyxNQUFNLGdCQUFnQjtPQUN6QixjQUFjLE1BQU0sMkJBQTJCO09BQy9DLGtCQUFrQixNQUFNLDBCQUEwQjtPQUNsRCxZQUFZLE1BQU0sY0FBYztBQU12QyxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQTtBQUVoQztJQUNFLElBQUksS0FBSyxDQUFBO0lBRVQsbUJBQW1CO0lBQ25CLDZDQUE2QztJQUM3Qyw2REFBNkQ7SUFDN0QsNENBQTRDO0lBQzVDLE9BQU87SUFDUCxJQUFJO0lBRUosY0FBYztJQUNkLEVBQUUsQ0FBQSxDQUFDLE9BQU8sTUFBTSxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDakMsS0FBSyxHQUFHLFdBQVcsQ0FDakIsV0FBVyxFQUNYLEVBQUUsRUFDRixlQUFlLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxjQUFjLENBQUMsQ0FDNUMsQ0FBQTtRQUVELE1BQU0sQ0FBQyxLQUFLLENBQUE7SUFDZCxDQUFDO0lBRUQsRUFBRSxDQUFBLENBQUMsR0FBRyxLQUFLLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFDeEIsS0FBSyxHQUFHLFdBQVcsQ0FDakIsV0FBVyxFQUNYLGtCQUFrQixFQUFFLEVBQ3BCLGVBQWUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLGNBQWMsQ0FBQyxDQUM1QyxDQUFBO0lBQ0gsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ04sS0FBSyxHQUFHLFdBQVcsQ0FDakIsV0FBVyxFQUNYLGtCQUFrQixFQUFFLEVBQ3BCLE9BQU8sQ0FDTCxlQUFlLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxjQUFjLEVBQUUsWUFBWSxDQUFDLEVBQUMsU0FBUyxFQUFFLElBQUksRUFBQyxDQUFDLENBQUMsQ0FDN0UsQ0FDRixDQUFBO0lBQ0gsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFLLENBQUE7QUFDZCxDQUFDIiwiZmlsZSI6InN0b3JlL2NvbmZpZ3VyZVN0b3JlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU3RvcmUsIGNvbXBvc2UsIGFwcGx5TWlkZGxld2FyZSB9IGZyb20gJ3JlZHV4J1xuaW1wb3J0IHRodW5rIGZyb20gJ3JlZHV4LXRodW5rJ1xuaW1wb3J0IHJvb3RSZWR1Y2VyIGZyb20gJ3JlZHVjZXJzL2luZGV4J1xuaW1wb3J0IGFwaSBmcm9tICdtaWRkbGV3YXJlL2FwaSdcbmltcG9ydCBtb2RpZnlSZXNwb25zZSBmcm9tICdtaWRkbGV3YXJlL21vZGlmeVJlc3BvbnNlJ1xuaW1wb3J0IGhhbmRsZUluaXRpYWxTdGF0ZSBmcm9tICd1dGlscy9oYW5kbGVJbml0aWFsU3RhdGUnXG5pbXBvcnQgY3JlYXRlTG9nZ2VyIGZyb20gJ3JlZHV4LWxvZ2dlcidcblxuZGVjbGFyZSBsZXQgbW9kdWxlXG5kZWNsYXJlIGxldCByZXF1aXJlXG5kZWNsYXJlIGxldCBwcm9jZXNzXG5cbmNvbnN0IGVudiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbmZpZ3VyZVN0b3JlKCkge1xuICBsZXQgc3RvcmVcbiAgXG4gIC8vIGlmKG1vZHVsZS5ob3QpIHtcbiAgLy8gICBtb2R1bGUuaG90LmFjY2VwdCgnLi4vcmVkdWNlcnMnLCAoKSA9PiB7XG4gIC8vICAgICBjb25zdCBuZXh0Um9vdFJlZHVjZXIgPSByZXF1aXJlKCcuLi9yZWR1Y2VycycpLmRlZmF1bHRcbiAgLy8gICAgIHN0b3JlLnJlcGxhY2VSZWR1Y2VyKG5leHRSb290UmVkdWNlcilcbiAgLy8gICB9KVxuICAvLyB9XG4gIFxuICAvLyBzZXJ2ZXIgc2lkZVxuICBpZih0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAgIHN0b3JlID0gY3JlYXRlU3RvcmUoXG4gICAgICByb290UmVkdWNlcixcbiAgICAgIHt9LFxuICAgICAgYXBwbHlNaWRkbGV3YXJlKHRodW5rLCBhcGksIG1vZGlmeVJlc3BvbnNlKVxuICAgIClcbiAgICBcbiAgICByZXR1cm4gc3RvcmVcbiAgfVxuXG4gIGlmKGVudiA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgc3RvcmUgPSBjcmVhdGVTdG9yZShcbiAgICAgIHJvb3RSZWR1Y2VyLFxuICAgICAgaGFuZGxlSW5pdGlhbFN0YXRlKCksXG4gICAgICBhcHBseU1pZGRsZXdhcmUodGh1bmssIGFwaSwgbW9kaWZ5UmVzcG9uc2UpXG4gICAgKVxuICB9IGVsc2Uge1xuICAgIHN0b3JlID0gY3JlYXRlU3RvcmUoXG4gICAgICByb290UmVkdWNlcixcbiAgICAgIGhhbmRsZUluaXRpYWxTdGF0ZSgpLFxuICAgICAgY29tcG9zZShcbiAgICAgICAgYXBwbHlNaWRkbGV3YXJlKHRodW5rLCBhcGksIG1vZGlmeVJlc3BvbnNlLCBjcmVhdGVMb2dnZXIoe2NvbGxhcHNlZDogdHJ1ZX0pKVxuICAgICAgKVxuICAgIClcbiAgfVxuXG4gIHJldHVybiBzdG9yZVxufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
