import React, { Component } from 'react';
import Icon from '../elements/Icon';
class SelectizeInput extends Component {
    constructor(props) {
        super(props);
        this.state = {
            showOptions: false,
            focus: false,
            value: '',
            expendedOptionIndex: 0
        };
        this.hideOptions = this.hideOptions.bind(this);
        this.focusInput = this.focusInput.bind(this);
        this.showOptions = this.showOptions.bind(this);
    }
    addValue(newValue) {
        this.props.onValuesChange(this.props.values.concat(newValue));
        if (this.props.onOptionsChange) {
            this.props.onOptionsChange(this.props.options.map(option => (option.value === newValue.value
                ? Object.assign({}, option, { disabled: true })
                : option)));
        }
        this.clearInputValue();
        if (typeof this.props.stayFocused === 'undefined' || this.props.stayFocused !== false) {
            this.focusInput();
        }
        this.hideOptions();
    }
    removeValue(index) {
        let newValues = [];
        let removedValue;
        if (index === -1) {
            newValues = this.props.values.slice(0, this.props.values.length - 1);
            removedValue = this.props.values[this.props.values.length - 1].value;
        }
        else {
            newValues = this.props.values
                .filter((v, i) => {
                removedValue = v.value;
                return i !== index;
            });
        }
        if (this.props.onOptionsChange) {
            this.props.onOptionsChange(this.props.options.map(option => (option.value === removedValue
                ? Object.assign({}, option, { disabled: false })
                : option)));
        }
        this.props.onValuesChange(newValues);
    }
    clearInputValue() {
        this.props.onInputChange('');
    }
    handleKeyPress(e) {
        if (e.keyCode === 8 && !this.props.value) {
            this.removeValue(-1);
        }
        // todo
        // if (e.keyCode === 13 && this.state.showOptions) {
        //   this.addValue()
        // }
    }
    focusInput() {
        this.input.focus();
    }
    hideOptions() {
        this.setState({
            showOptions: false
        });
    }
    showOptions(e) {
        e.stopPropagation();
        this.setState({
            showOptions: true
        });
    }
    componentDidMount() {
        window.addEventListener('click', this.hideOptions);
    }
    componentDidUpdate(prevProps, prevState) {
    }
    componentWillUnmount() {
        window.removeEventListener('click', this.hideOptions);
    }
    render() {
        let label = this.props.label ? this.props.label : null;
        let value = this.props.value ? this.props.value : '';
        let values = this.props.values;
        let options = this.props.options ? this.props.options : [];
        let inputWidth = values.length > 0 ? (value.length === 0 ? 16 : value.length * 16) : '100%';
        let placeholder = values.length > 0 ? '' : this.props.placeholder;
        let className = 'selectize-input' + (this.state.focus === true ? ' focus' : '') + (values.length === 0 ? ' empty' : '');
        let addNewValue = this.props.addNewValue ? this.props.addNewValue : undefined;
        return (React.createElement("div", {className: `selectize-input-wrap ${this.props.className ? this.props.className : ''}`.trim()}, label ? (React.createElement("label", {className: "form-label"}, label)) : null, React.createElement("div", {className: className, onClick: e => {
            this.focusInput();
            this.showOptions(e);
        }}, values.map((v, index) => {
            return (React.createElement("span", {key: index, className: "selectize-tag"}, v.name, React.createElement(Icon, {size: 'small', name: "close", onClick: e => {
                this.removeValue(index);
            }})));
        }), React.createElement("input", {style: { width: inputWidth }, ref: ref => { this.input = ref; }, value: value, placeholder: placeholder, onBlur: e => {
            this.setState({ focus: false });
        }, onFocus: e => {
            this.setState({ focus: true });
        }, onChange: e => {
            this.props.onInputChange(e.target.value);
        }, onKeyDown: e => {
            this.handleKeyPress(e);
        }})), (this.state.showOptions) ? (React.createElement("ul", {className: "selectize-query-results"}, options.map((option, index) => {
            if (option.disabled) {
                return React.createElement("li", {key: index, className: "disabled"}, option.name);
            }
            return (React.createElement("li", {key: index, onClick: e => {
                this.addValue(option);
            }}, React.createElement("span", null, option.name)));
        }), addNewValue ? (
        // todo
        React.createElement("li", {className: "add"}, "添加 ", React.createElement("strong", null, this.props.value))) : null)) : null));
    }
}
export default SelectizeInput;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VsZWN0aXplSW5wdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9jb3JlL2Zyb250ZW5kL2VsZW1lbnRzL1NlbGVjdGl6ZUlucHV0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiT0FBTyxLQUFLLEVBQUUsRUFBRSxTQUFTLEVBQUUsTUFBTSxPQUFPO09BQ2pDLElBQUksTUFBTSxrQkFBa0I7QUFpQ25DLDZCQUE2QixTQUFTO0lBSXBDLFlBQVksS0FBSztRQUNmLE1BQU0sS0FBSyxDQUFDLENBQUE7UUFDWixJQUFJLENBQUMsS0FBSyxHQUFHO1lBQ1gsV0FBVyxFQUFFLEtBQUs7WUFDbEIsS0FBSyxFQUFFLEtBQUs7WUFDWixLQUFLLEVBQUUsRUFBRTtZQUNULG1CQUFtQixFQUFFLENBQUM7U0FDdkIsQ0FBQTtRQUNELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDOUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUM1QyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ2hELENBQUM7SUFFRCxRQUFRLENBQUMsUUFBUTtRQUNmLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFBO1FBQzdELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztZQUMvQixJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssS0FBSyxR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