import React, { Component } from 'react';
import { browserHistory } from 'react-router';
class Button extends Component {
    constructor(props) {
        super(props);
    }
    render() {
        let className = this.props.className ? `btn ${this.props.className}` : 'btn';
        let size = this.props.size ? this.props.size : 'medium';
        let isFluid = this.props.isFluid ? this.props.isFluid : false;
        let color = this.props.color ? this.props.color : null;
        if (size === 'small') {
            className += ' btn-small';
        }
        else if (size === 'large') {
            className += ' btn-large';
        }
        else if (size === 'medium') {
            className += ' btn-medium';
        }
        else {
            console.error('Unsupport size!');
        }
        if (color) {
            className += ` btn-${color}`;
        }
        if (isFluid) {
            className = `${className} btn-fluid`;
        }
        let to = this.props.to ? this.props.to : null;
        let onClick = this.props.onClick ? this.props.onClick : null;
        if (to) {
            onClick = () => {
                browserHistory.push(to);
            };
        }
        let props = Object.assign({}, this.props, { className }, { onClick });
        delete props.to;
        delete props.color;
        delete props.size;
        delete props.isFluid;
        return (React.createElement('button', props, this.props.children));
    }
}
export default Button;

//# sourceMappingURL=data:application/json;base64,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Q0FBQSIsImZpbGUiOiJlbGVtZW50cy9CdXR0b24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IExpbmssIGJyb3dzZXJIaXN0b3J5IH0gZnJvbSAncmVhY3Qtcm91dGVyJ1xuXG5jbGFzcyBCdXR0b24gZXh0ZW5kcyBDb21wb25lbnQ8YW55LCBhbnk+e1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKVxuICB9XG5cbiAgcmVuZGVyKCl7XG4gICAgbGV0IGNsYXNzTmFtZTpzdHJpbmcgPSB0aGlzLnByb3BzLmNsYXNzTmFtZT9gYnRuICR7dGhpcy5wcm9wcy5jbGFzc05hbWV9YDonYnRuJ1xuICAgIGxldCBzaXplID0gdGhpcy5wcm9wcy5zaXplP3RoaXMucHJvcHMuc2l6ZTonbWVkaXVtJ1xuICAgIGxldCBpc0ZsdWlkID0gdGhpcy5wcm9wcy5pc0ZsdWlkP3RoaXMucHJvcHMuaXNGbHVpZDpmYWxzZVxuICAgIGxldCBjb2xvciA9IHRoaXMucHJvcHMuY29sb3I/dGhpcy5wcm9wcy5jb2xvcjpudWxsXG5cbiAgICBpZihzaXplID09PSAnc21hbGwnKSB7XG4gICAgICBjbGFzc05hbWUgKz0gJyBidG4tc21hbGwnXG4gICAgfSBlbHNlIGlmIChzaXplID09PSAnbGFyZ2UnKSB7XG4gICAgICBjbGFzc05hbWUgKz0gJyBidG4tbGFyZ2UnXG4gICAgfSBlbHNlIGlmIChzaXplID09PSAnbWVkaXVtJykge1xuICAgICAgY2xhc3NOYW1lICs9ICcgYnRuLW1lZGl1bSdcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5lcnJvcignVW5zdXBwb3J0IHNpemUhJyk7XG4gICAgfVxuXG4gICAgaWYoY29sb3IpIHtcbiAgICAgIGNsYXNzTmFtZSArPSBgIGJ0bi0ke2NvbG9yfWBcbiAgICB9XG5cbiAgICBpZihpc0ZsdWlkKSB7XG4gICAgICBjbGFzc05hbWUgPSBgJHtjbGFzc05hbWV9IGJ0bi1mbHVpZGBcbiAgICB9XG5cbiAgICBsZXQgdG8gPSB0aGlzLnByb3BzLnRvP3RoaXMucHJvcHMudG86bnVsbFxuICAgIGxldCBvbkNsaWNrID0gdGhpcy5wcm9wcy5vbkNsaWNrP3RoaXMucHJvcHMub25DbGljazpudWxsXG5cbiAgICBpZih0bykge1xuICAgICAgb25DbGljayA9ICgpID0+IHtcbiAgICAgICAgYnJvd3Nlckhpc3RvcnkucHVzaCh0bylcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgcHJvcHMgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnByb3BzLCB7Y2xhc3NOYW1lfSwge29uQ2xpY2t9KVxuICAgIGRlbGV0ZSBwcm9wcy50b1xuICAgIGRlbGV0ZSBwcm9wcy5jb2xvclxuICAgIGRlbGV0ZSBwcm9wcy5zaXplXG4gICAgZGVsZXRlIHByb3BzLmlzRmx1aWRcblxuICAgIHJldHVybiAoXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnYnV0dG9uJyxcbiAgICAgICAgcHJvcHMsXG4gICAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICAgIClcbiAgICApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQnV0dG9uXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
