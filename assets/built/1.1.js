webpackJsonp([1],{138:function(e,t,n){"use strict";function r(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t["default"]=e,t}function o(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function l(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},c=n(3),f=o(c),p=n(7),h=n(139),d=o(h),g=n(146),y=r(g),b=n(8),m=n(18),v=o(m),k=n(149),w=o(k),_=n(156),P=o(_),x=n(82),O=o(x),S=n(119),j=o(S),E=n(16),C=o(E),M=n(134),R=o(M),L=function(e,t,n,r){var o,i=arguments.length,s=3>i?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"===("undefined"==typeof Reflect?"undefined":u(Reflect))&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(s=(3>i?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s},N=n(157),H=function(e){function t(e){i(this,t);var n=s(this,Object.getPrototypeOf(t).call(this,e));return n.bookId=e.params.id,n.state={showPanel:!1,isCalcMode:!0,nodeHeights:[],nodes:[],showViewerPreference:!1,fluid:!1,isTouchMode:!1},n.handleViewerClick=n.handleViewerClick.bind(n),n.handelViewerMouseMove=n.handelViewerMouseMove.bind(n),n.handleProgressChange=n.handleProgressChange.bind(n),n.handleResize=n.handleResize.bind(n),n.deboundedHandleResize=v["default"].debounce(n.handleResize,500,{maxWait:1e3}),n}return l(t,e),a(t,[{key:"isViewFluid",value:function(){return C["default"].getScreenInfo().view.width<700}},{key:"isTouchMode",value:function(){return C["default"].getScreenInfo().view.width<700}},{key:"setProgress",value:function(e){j["default"].setProgress(this.bookId,{percentage:e})}},{key:"handelViewerMouseMove",value:function(e){if(!this.state.isCalcMode&&!this.state.isTouchMode){var t=e.pageY-document.body.scrollTop,n=C["default"].getScreenInfo().view.width-e.pageX;this.setState({showPanel:90>t,showPageInfo:100>n})}}},{key:"handleResize",value:function(){this.setState({fluid:this.isViewFluid(),isTouchMode:this.isTouchMode()})}},{key:"handleProgressChange",value:function(e){this.setProgress(e)}},{key:"handleViewerClick",value:function(){this.state.isTouchMode&&this.setState({showPanel:!this.state.showPanel})}},{key:"calcDom",value:function(){var e=this;this.setState({isCalcMode:!0},function(){var t=e.bookPageWithRawHtml.getContentHtml(),n=y.getNodeHeights(t.childNodes);console.log("calc done"),e.setState({nodeHeights:n,isCalcMode:!1})})}},{key:"loadRawBookContent",value:function(){var e=this;this.props.fetchBook(this.bookId).then(function(t){var n=y.markdownToNodeStringList(e.props.rawBookContent);e.setState({nodes:n,fluid:e.isViewFluid(),isTouchMode:e.isTouchMode()})})}},{key:"addEventListeners",value:function(){window.addEventListener("resize",this.deboundedHandleResize)}},{key:"removeEventListeners",value:function(){window.removeEventListener("resize",this.deboundedHandleResize)}},{key:"shouldComponentUpdate",value:function(e,t){return!v["default"].isEqual(this.state,t)}},{key:"componentDidUpdate",value:function(e,t){var n=0!==this.state.nodes.length&&0===t.nodes.length,r=this.state.fluid!==t.fluid;(n||r)&&this.calcDom()}},{key:"componentDidMount",value:function(){this.loadRawBookContent(),this.props.fetchProgress(this.bookId),this.addEventListeners()}},{key:"componentWillUnmount",value:function(){this.removeEventListeners()}},{key:"renderViewPanel",value:function(){var e=this;return(this.state.showPanel||this.state.showViewerPreference)&&f["default"].createElement(w["default"],{title:this.props.book.title,showViewerPreference:this.state.showViewerPreference,onPrefVisibilityChange:function(t){e.setState({showViewerPreference:t})}})}},{key:"renderBook",value:function(){var e=this,t=this.state,n=t.nodes,r=t.nodeHeights,o=t.fluid,i=t.showPageInfo,s=this.props.progress;return 0===n.length?f["default"].createElement("div",{className:"text-loading"},"加载中 ..."):this.state.isCalcMode?f["default"].createElement(P["default"],{nodes:n,ref:function(t){e.bookPageWithRawHtml=t},fluid:o}):f["default"].createElement(d["default"],{nodeHeights:r,nodes:this.state.nodes,pageCount:5,initialProgress:s,pageHeight:900,onProgressChange:this.handleProgressChange,fluid:o,showPageInfo:i})}},{key:"render",value:function(){return f["default"].createElement(R["default"],{bodyClass:"viewer",title:this.props.book.title},f["default"].createElement("div",{onClick:this.handleViewerClick,onMouseMove:this.handelViewerMouseMove},this.renderViewPanel(),this.renderBook()))}}]),t}(c.Component);H=L([(0,O["default"])(N)],H),t["default"]=(0,p.connect)(function(e,t){var n=e.entities.books[t.params.id]||{};return{book:n,rawBookContent:v["default"].get(n,"content.raw",""),progress:v["default"].get(e.payloads,"progress.percentage",0),session:e.session}},{fetchBook:b.fetchBook,fetchProgress:b.fetchProgress,openConfirmModal:b.openConfirmModal})(H)},139:function(e,t,n){"use strict";function r(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t["default"]=e,t}function o(e){return e&&e.__esModule?e:{"default":e}}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function l(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},c=n(3),f=o(c),p=n(140),h=o(p),d=n(142),g=r(d),y=n(18),b=o(y),m=n(80),v=o(m),k=n(82),w=o(k),_=n(143),P=o(_),x=function(e,t,n,r){var o,i=arguments.length,s=3>i?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"===("undefined"==typeof Reflect?"undefined":u(Reflect))&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(s=(3>i?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s},O=n(145),S=function(e){function t(e){i(this,t);var n=s(this,Object.getPrototypeOf(t).call(this,e));return n.state={scrollTop:0,currentPage:1},n.handleScroll=n.handleScroll.bind(n),n.deboundedHandleScroll=b["default"].debounce(n.handleScroll,200,{maxWait:1e3}),n}return l(t,e),a(t,[{key:"handleScroll",value:function(){if(!this.props.isCalcMode){var e=this.calcPages(),t=e.pages,n=e.totalHeight,r=this.props.onProgressChange,o=document.body.scrollTop,i=g.percentageToPage(o/n,t.length);r&&r(o/n),this.setState({currentPage:i})}}},{key:"addEventListeners",value:function(){window.addEventListener("scroll",this.deboundedHandleScroll)}},{key:"removeEventListeners",value:function(){window.removeEventListener("scroll",this.deboundedHandleScroll)}},{key:"calcPages",value:function(){var e=this.props,t=e.nodeHeights,n=e.nodes,r=e.pageHeight,o=g.groupNodesByPage(n,t,r);return{pages:o,totalHeight:o.length*r}}},{key:"componentDidMount",value:function(){var e=this.props,t=e.pageHeight,n=e.initialPage,r=e.initialProgress,o=this.calcPages(),i=o.totalHeight,s=0;r?s=i*r:n&&(s=t*(n-1)),document.body.scrollTop=s,this.addEventListeners()}},{key:"componentWillUnmount",value:function(){this.removeEventListeners()}},{key:"render",value:function(){var e=this,t=this.calcPages(),n=t.pages,r=t.totalHeight,o=this.state.currentPage,i=this.props,s=i.pageCount,l=i.pageHeight,a=i.fluid,u=i.showPageInfo,c=o-1,p=c+s,d=(0,v["default"])({pages:!a,"pages--fluid":a});return f["default"].createElement("div",null,f["default"].createElement("ul",{ref:function(t){e.bookPageListDom=t},styleName:d,style:{height:r}},b["default"].slice(n,c,p).map(function(t,n){return f["default"].createElement(h["default"],{key:n,page:t,pageHeight:l,fluid:a,ref:function(t){e.bookPage=t}})})),f["default"].createElement(P["default"],{visible:u,current:o,total:n.length}))}}]),t}(c.Component);S=x([(0,w["default"])(O)],S),t["default"]=S},140:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},u=n(3),c=r(u),f=n(80),p=r(f),h=n(82),d=r(h),g=function(e,t,n,r){var o,i=arguments.length,s=3>i?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"===("undefined"==typeof Reflect?"undefined":a(Reflect))&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(s=(3>i?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s},y=n(141),b=function(e){function t(){return o(this,t),i(this,Object.getPrototypeOf(t).apply(this,arguments))}return s(t,e),l(t,[{key:"render",value:function(){var e=this,t=this.props,n=t.page,r=n.nodes,o=n.meta,i=t.pageHeight,s=t.fluid,l={position:"absolute",top:i*(o.pageNo-1),height:i||"auto"},a=(0,p["default"])({page:!s,"page--fluid":s});return c["default"].createElement("li",{styleName:a,style:l},c["default"].createElement("div",{style:{marginTop:o.offset},styleName:"content",dangerouslySetInnerHTML:{__html:r.join("")},ref:function(t){e.bookPageDom=t}}),c["default"].createElement("div",{styleName:"page-no"},o.pageNo))}}]),t}(u.Component);b=g([(0,d["default"])(y)],b),t["default"]=b},141:function(e,t){e.exports={content:"content_1mydI",page:"page_1SU4h","page--fluid":"page--fluid_vX8rQ page_1SU4h","page--init":"page--init_8DZFB","page-no":"page-no_1jbV-"}},142:function(e,t){"use strict";function n(e){var t=e.pageIndex,n=e.pageHeight,r=e.nodeHeights,o=0,i=0,s=void 0;if(0!==t){for(var l=0;n*t>=l;)l+=r[i],i++;o=l-r[i-1]-t*n,s=i-1}else s=0;return{offset:o,nodeStartIndex:s}}function r(e){var t=e.pageIndex,r=e.nodes,o=e.pageHeight,i=e.nodeHeights,s=n({pageIndex:t,pageHeight:o,nodeHeights:i}),l=s.offset,a=s.nodeStartIndex,u=a,c=void 0,f=[],p=l+i[a];if(u++,o>p){for(;o>=p&&u!==r.length;)p+=i[u],u++;c=u-1}else c=a;for(var h=a;c>=h&&h<=r.length-1;h++)f.push(r[h]);return{pageNodes:f,offset:l}}function o(e,t,n){var o=[],i=t.reduce(function(e,t){return e+t},0),s=Math.ceil(i/n);if(console.log("todo: group nodes"),0===t.length)return[{nodes:e,meta:{pageNo:1,offset:0}}];for(var l=0;s>l;l++){var a=r({pageIndex:l,nodes:e,nodeHeights:t,pageHeight:n}),u=a.pageNodes,c=a.offset;o.push({nodes:u,meta:{pageNo:l+1,offset:c}})}return o}function i(e,t){return e>1?(console.error("Wrong parameter!"),null):parseInt(e*t)+1}Object.defineProperty(t,"__esModule",{value:!0}),t.groupNodesByPage=o,t.percentageToPage=i},143:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},u=n(3),c=r(u),f=n(82),p=r(f),h=function(e,t,n,r){var o,i=arguments.length,s=3>i?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"===("undefined"==typeof Reflect?"undefined":a(Reflect))&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(s=(3>i?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s},d=n(144),g=function(e){function t(e){return o(this,t),i(this,Object.getPrototypeOf(t).call(this,e))}return s(t,e),l(t,[{key:"render",value:function(){var e=this.props,t=e.current,n=e.total,r=(t/n*100).toFixed(2)+"%";return this.props.visible&&c["default"].createElement("div",{styleName:"loc-info"},c["default"].createElement("div",null,c["default"].createElement("strong",null,t),"/",n),c["default"].createElement("div",{styleName:"sub-info"},r))}}]),t}(u.Component);g=h([(0,p["default"])(d)],g),t["default"]=g},144:function(e,t){e.exports={scrollbar:"scrollbar_3vHlt",button:"button_1vdqU",track:"track_2FLTA","track--past":"track--past_3YKd4 track_2FLTA","loc-info":"loc-info_377Vu","sub-info":"sub-info_3qI5u"}},145:function(e,t){e.exports={pages:"pages_1SNis","pages--fluid":"pages--fluid_39FPe pages_1SNis"}},146:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e){console.log("dom ready, getNodeHeights");var t=[];return Array.prototype.forEach.call(e,function(e,n){"gb-line"!==e.className&&console.error("Unsupported content found!"),t.push(e.clientHeight)}),t}function i(e){console.log("start md");var t=(0,l["default"])(e,{gfm:!0,breaks:!0});console.log("done marked");var n=Array.prototype.map.call((0,u["default"])(t),function(e,t){return 3===e.nodeType&&"\n"===e.nodeValue?null:"P"===e.tagName?'<p class="gb-line">'+e.innerHTML+"</p>":'<div class="gb-line">'+e.outerHTML+"</div>"}).filter(function(e){return e});return console.log("end md"),n}Object.defineProperty(t,"__esModule",{value:!0}),t.getNodeHeights=o,t.markdownToNodeStringList=i;var s=n(147),l=r(s),a=n(148),u=r(a)},147:function(e,t,n){(function(t){(function(){function t(e){this.tokens=[],this.tokens.links={},this.options=e||c.defaults,this.rules=f.normal,this.options.gfm&&(this.options.tables?this.rules=f.tables:this.rules=f.gfm)}function n(e,t){if(this.options=t||c.defaults,this.links=e,this.rules=p.normal,this.renderer=this.options.renderer||new r,this.renderer.options=this.options,!this.links)throw new Error("Tokens array requires a `links` property.");this.options.gfm?this.options.breaks?this.rules=p.breaks:this.rules=p.gfm:this.options.pedantic&&(this.rules=p.pedantic)}function r(e){this.options=e||{}}function o(e){this.tokens=[],this.token=null,this.options=e||c.defaults,this.options.renderer=this.options.renderer||new r,this.renderer=this.options.renderer,this.renderer.options=this.options}function i(e,t){return e.replace(t?/&/g:/&(?!#?\w+;)/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;")}function s(e){return e.replace(/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/g,function(e,t){return t=t.toLowerCase(),"colon"===t?":":"#"===t.charAt(0)?"x"===t.charAt(1)?String.fromCharCode(parseInt(t.substring(2),16)):String.fromCharCode(+t.substring(1)):""})}function l(e,t){return e=e.source,t=t||"",function n(r,o){return r?(o=o.source||o,o=o.replace(/(^|[^\[])\^/g,"$1"),e=e.replace(r,o),n):new RegExp(e,t)}}function a(){}function u(e){for(var t,n,r=1;r<arguments.length;r++){t=arguments[r];for(n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e}function c(e,n,r){if(r||"function"==typeof n){r||(r=n,n=null),n=u({},c.defaults,n||{});var s,l,a=n.highlight,f=0;try{s=t.lex(e,n)}catch(p){return r(p)}l=s.length;var h=function(e){if(e)return n.highlight=a,r(e);var t;try{t=o.parse(s,n)}catch(i){e=i}return n.highlight=a,e?r(e):r(null,t)};if(!a||a.length<3)return h();if(delete n.highlight,!l)return h();for(;f<s.length;f++)!function(e){return"code"!==e.type?--l||h():a(e.text,e.lang,function(t,n){return t?h(t):null==n||n===e.text?--l||h():(e.text=n,e.escaped=!0,void(--l||h()))})}(s[f])}else try{return n&&(n=u({},c.defaults,n)),o.parse(t.lex(e,n),n)}catch(p){if(p.message+="\nPlease report this to https://github.com/chjj/marked.",(n||c.defaults).silent)return"<p>An error occured:</p><pre>"+i(p.message+"",!0)+"</pre>";throw p}}var f={newline:/^\n+/,code:/^( {4}[^\n]+\n*)+/,fences:a,hr:/^( *[-*_]){3,} *(?:\n+|$)/,heading:/^ *(#{1,6}) *([^\n]+?) *#* *(?:\n+|$)/,nptable:a,lheading:/^([^\n]+)\n *(=|-){2,} *(?:\n+|$)/,blockquote:/^( *>[^\n]+(\n(?!def)[^\n]+)*\n*)+/,list:/^( *)(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,html:/^ *(?:comment *(?:\n|\s*$)|closed *(?:\n{2,}|\s*$)|closing *(?:\n{2,}|\s*$))/,def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +["(]([^\n]+)[")])? *(?:\n+|$)/,table:a,paragraph:/^((?:[^\n]+\n?(?!hr|heading|lheading|blockquote|tag|def))+)\n*/,text:/^[^\n]+/};f.bullet=/(?:[*+-]|\d+\.)/,f.item=/^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/,f.item=l(f.item,"gm")(/bull/g,f.bullet)(),f.list=l(f.list)(/bull/g,f.bullet)("hr","\\n+(?=\\1?(?:[-*_] *){3,}(?:\\n+|$))")("def","\\n+(?="+f.def.source+")")(),f.blockquote=l(f.blockquote)("def",f.def)(),f._tag="(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:/|[^\\w\\s@]*@)\\b",f.html=l(f.html)("comment",/<!--[\s\S]*?-->/)("closed",/<(tag)[\s\S]+?<\/\1>/)("closing",/<tag(?:"[^"]*"|'[^']*'|[^'">])*?>/)(/tag/g,f._tag)(),f.paragraph=l(f.paragraph)("hr",f.hr)("heading",f.heading)("lheading",f.lheading)("blockquote",f.blockquote)("tag","<"+f._tag)("def",f.def)(),f.normal=u({},f),f.gfm=u({},f.normal,{fences:/^ *(`{3,}|~{3,})[ \.]*(\S+)? *\n([\s\S]*?)\s*\1 *(?:\n+|$)/,paragraph:/^/,heading:/^ *(#{1,6}) +([^\n]+?) *#* *(?:\n+|$)/}),f.gfm.paragraph=l(f.paragraph)("(?!","(?!"+f.gfm.fences.source.replace("\\1","\\2")+"|"+f.list.source.replace("\\1","\\3")+"|")(),f.tables=u({},f.gfm,{nptable:/^ *(\S.*\|.*)\n *([-:]+ *\|[-| :]*)\n((?:.*\|.*(?:\n|$))*)\n*/,table:/^ *\|(.+)\n *\|( *[-:]+[-| :]*)\n((?: *\|.*(?:\n|$))*)\n*/}),t.rules=f,t.lex=function(e,n){var r=new t(n);return r.lex(e)},t.prototype.lex=function(e){return e=e.replace(/\r\n|\r/g,"\n").replace(/\t/g,"    ").replace(/\u00a0/g," ").replace(/\u2424/g,"\n"),this.token(e,!0)},t.prototype.token=function(e,t,n){for(var r,o,i,s,l,a,u,c,p,e=e.replace(/^ +$/gm,"");e;)if((i=this.rules.newline.exec(e))&&(e=e.substring(i[0].length),i[0].length>1&&this.tokens.push({type:"space"})),i=this.rules.code.exec(e))e=e.substring(i[0].length),i=i[0].replace(/^ {4}/gm,""),this.tokens.push({type:"code",text:this.options.pedantic?i:i.replace(/\n+$/,"")});else if(i=this.rules.fences.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"code",lang:i[2],text:i[3]||""});else if(i=this.rules.heading.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"heading",depth:i[1].length,text:i[2]});else if(t&&(i=this.rules.nptable.exec(e))){for(e=e.substring(i[0].length),a={type:"table",header:i[1].replace(/^ *| *\| *$/g,"").split(/ *\| */),align:i[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:i[3].replace(/\n$/,"").split("\n")},c=0;c<a.align.length;c++)/^ *-+: *$/.test(a.align[c])?a.align[c]="right":/^ *:-+: *$/.test(a.align[c])?a.align[c]="center":/^ *:-+ *$/.test(a.align[c])?a.align[c]="left":a.align[c]=null;for(c=0;c<a.cells.length;c++)a.cells[c]=a.cells[c].split(/ *\| */);this.tokens.push(a)}else if(i=this.rules.lheading.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"heading",depth:"="===i[2]?1:2,text:i[1]});else if(i=this.rules.hr.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"hr"});else if(i=this.rules.blockquote.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"blockquote_start"}),i=i[0].replace(/^ *> ?/gm,""),this.token(i,t,!0),this.tokens.push({type:"blockquote_end"});else if(i=this.rules.list.exec(e)){for(e=e.substring(i[0].length),s=i[2],this.tokens.push({type:"list_start",ordered:s.length>1}),i=i[0].match(this.rules.item),r=!1,p=i.length,c=0;p>c;c++)a=i[c],u=a.length,a=a.replace(/^ *([*+-]|\d+\.) +/,""),~a.indexOf("\n ")&&(u-=a.length,a=this.options.pedantic?a.replace(/^ {1,4}/gm,""):a.replace(new RegExp("^ {1,"+u+"}","gm"),"")),this.options.smartLists&&c!==p-1&&(l=f.bullet.exec(i[c+1])[0],s===l||s.length>1&&l.length>1||(e=i.slice(c+1).join("\n")+e,c=p-1)),o=r||/\n\n(?!\s*$)/.test(a),c!==p-1&&(r="\n"===a.charAt(a.length-1),o||(o=r)),this.tokens.push({type:o?"loose_item_start":"list_item_start"}),this.token(a,!1,n),this.tokens.push({type:"list_item_end"});this.tokens.push({type:"list_end"})}else if(i=this.rules.html.exec(e))e=e.substring(i[0].length),this.tokens.push({type:this.options.sanitize?"paragraph":"html",pre:!this.options.sanitizer&&("pre"===i[1]||"script"===i[1]||"style"===i[1]),text:i[0]});else if(!n&&t&&(i=this.rules.def.exec(e)))e=e.substring(i[0].length),this.tokens.links[i[1].toLowerCase()]={href:i[2],title:i[3]};else if(t&&(i=this.rules.table.exec(e))){for(e=e.substring(i[0].length),a={type:"table",header:i[1].replace(/^ *| *\| *$/g,"").split(/ *\| */),align:i[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:i[3].replace(/(?: *\| *)?\n$/,"").split("\n")},c=0;c<a.align.length;c++)/^ *-+: *$/.test(a.align[c])?a.align[c]="right":/^ *:-+: *$/.test(a.align[c])?a.align[c]="center":/^ *:-+ *$/.test(a.align[c])?a.align[c]="left":a.align[c]=null;for(c=0;c<a.cells.length;c++)a.cells[c]=a.cells[c].replace(/^ *\| *| *\| *$/g,"").split(/ *\| */);this.tokens.push(a)}else if(t&&(i=this.rules.paragraph.exec(e)))e=e.substring(i[0].length),this.tokens.push({type:"paragraph",text:"\n"===i[1].charAt(i[1].length-1)?i[1].slice(0,-1):i[1]});else if(i=this.rules.text.exec(e))e=e.substring(i[0].length),this.tokens.push({type:"text",text:i[0]});else if(e)throw new Error("Infinite loop on byte: "+e.charCodeAt(0));return this.tokens};var p={escape:/^\\([\\`*{}\[\]()#+\-.!_>])/,autolink:/^<([^ >]+(@|:\/)[^ >]+)>/,url:a,tag:/^<!--[\s\S]*?-->|^<\/?\w+(?:"[^"]*"|'[^']*'|[^'">])*?>/,link:/^!?\[(inside)\]\(href\)/,reflink:/^!?\[(inside)\]\s*\[([^\]]*)\]/,nolink:/^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]/,strong:/^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/,em:/^\b_((?:[^_]|__)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,code:/^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/,br:/^ {2,}\n(?!\s*$)/,del:a,text:/^[\s\S]+?(?=[\\<!\[_*`]| {2,}\n|$)/};p._inside=/(?:\[[^\]]*\]|[^\[\]]|\](?=[^\[]*\]))*/,p._href=/\s*<?([\s\S]*?)>?(?:\s+['"]([\s\S]*?)['"])?\s*/,p.link=l(p.link)("inside",p._inside)("href",p._href)(),p.reflink=l(p.reflink)("inside",p._inside)(),p.normal=u({},p),p.pedantic=u({},p.normal,{strong:/^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,em:/^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/}),p.gfm=u({},p.normal,{escape:l(p.escape)("])","~|])")(),url:/^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/,del:/^~~(?=\S)([\s\S]*?\S)~~/,text:l(p.text)("]|","~]|")("|","|https?://|")()}),p.breaks=u({},p.gfm,{br:l(p.br)("{2,}","*")(),text:l(p.gfm.text)("{2,}","*")()}),n.rules=p,n.output=function(e,t,r){var o=new n(t,r);return o.output(e)},n.prototype.output=function(e){for(var t,n,r,o,s="";e;)if(o=this.rules.escape.exec(e))e=e.substring(o[0].length),s+=o[1];else if(o=this.rules.autolink.exec(e))e=e.substring(o[0].length),"@"===o[2]?(n=":"===o[1].charAt(6)?this.mangle(o[1].substring(7)):this.mangle(o[1]),r=this.mangle("mailto:")+n):(n=i(o[1]),r=n),s+=this.renderer.link(r,null,n);else if(this.inLink||!(o=this.rules.url.exec(e))){if(o=this.rules.tag.exec(e))!this.inLink&&/^<a /i.test(o[0])?this.inLink=!0:this.inLink&&/^<\/a>/i.test(o[0])&&(this.inLink=!1),e=e.substring(o[0].length),s+=this.options.sanitize?this.options.sanitizer?this.options.sanitizer(o[0]):i(o[0]):o[0];else if(o=this.rules.link.exec(e))e=e.substring(o[0].length),this.inLink=!0,s+=this.outputLink(o,{href:o[2],title:o[3]}),this.inLink=!1;else if((o=this.rules.reflink.exec(e))||(o=this.rules.nolink.exec(e))){if(e=e.substring(o[0].length),t=(o[2]||o[1]).replace(/\s+/g," "),t=this.links[t.toLowerCase()],!t||!t.href){s+=o[0].charAt(0),e=o[0].substring(1)+e;continue}this.inLink=!0,s+=this.outputLink(o,t),this.inLink=!1}else if(o=this.rules.strong.exec(e))e=e.substring(o[0].length),s+=this.renderer.strong(this.output(o[2]||o[1]));else if(o=this.rules.em.exec(e))e=e.substring(o[0].length),s+=this.renderer.em(this.output(o[2]||o[1]));else if(o=this.rules.code.exec(e))e=e.substring(o[0].length),s+=this.renderer.codespan(i(o[2],!0));else if(o=this.rules.br.exec(e))e=e.substring(o[0].length),s+=this.renderer.br();else if(o=this.rules.del.exec(e))e=e.substring(o[0].length),s+=this.renderer.del(this.output(o[1]));else if(o=this.rules.text.exec(e))e=e.substring(o[0].length),s+=this.renderer.text(i(this.smartypants(o[0])));else if(e)throw new Error("Infinite loop on byte: "+e.charCodeAt(0))}else e=e.substring(o[0].length),n=i(o[1]),r=n,s+=this.renderer.link(r,null,n);return s},n.prototype.outputLink=function(e,t){var n=i(t.href),r=t.title?i(t.title):null;return"!"!==e[0].charAt(0)?this.renderer.link(n,r,this.output(e[1])):this.renderer.image(n,r,i(e[1]))},n.prototype.smartypants=function(e){return this.options.smartypants?e.replace(/---/g,"—").replace(/--/g,"–").replace(/(^|[-\u2014\/(\[{"\s])'/g,"$1‘").replace(/'/g,"’").replace(/(^|[-\u2014\/(\[{\u2018\s])"/g,"$1“").replace(/"/g,"”").replace(/\.{3}/g,"…"):e},n.prototype.mangle=function(e){if(!this.options.mangle)return e;for(var t,n="",r=e.length,o=0;r>o;o++)t=e.charCodeAt(o),Math.random()>.5&&(t="x"+t.toString(16)),n+="&#"+t+";";return n},r.prototype.code=function(e,t,n){if(this.options.highlight){var r=this.options.highlight(e,t);null!=r&&r!==e&&(n=!0,e=r)}return t?'<pre><code class="'+this.options.langPrefix+i(t,!0)+'">'+(n?e:i(e,!0))+"\n</code></pre>\n":"<pre><code>"+(n?e:i(e,!0))+"\n</code></pre>"},r.prototype.blockquote=function(e){return"<blockquote>\n"+e+"</blockquote>\n"},r.prototype.html=function(e){return e},r.prototype.heading=function(e,t,n){return"<h"+t+' id="'+this.options.headerPrefix+n.toLowerCase().replace(/[^\w]+/g,"-")+'">'+e+"</h"+t+">\n"},r.prototype.hr=function(){return this.options.xhtml?"<hr/>\n":"<hr>\n"},r.prototype.list=function(e,t){var n=t?"ol":"ul";return"<"+n+">\n"+e+"</"+n+">\n"},r.prototype.listitem=function(e){return"<li>"+e+"</li>\n"},r.prototype.paragraph=function(e){return"<p>"+e+"</p>\n"},r.prototype.table=function(e,t){return"<table>\n<thead>\n"+e+"</thead>\n<tbody>\n"+t+"</tbody>\n</table>\n"},r.prototype.tablerow=function(e){return"<tr>\n"+e+"</tr>\n"},r.prototype.tablecell=function(e,t){var n=t.header?"th":"td",r=t.align?"<"+n+' style="text-align:'+t.align+'">':"<"+n+">";return r+e+"</"+n+">\n"},r.prototype.strong=function(e){return"<strong>"+e+"</strong>"},r.prototype.em=function(e){return"<em>"+e+"</em>"},r.prototype.codespan=function(e){return"<code>"+e+"</code>"},r.prototype.br=function(){return this.options.xhtml?"<br/>":"<br>"},r.prototype.del=function(e){return"<del>"+e+"</del>"},r.prototype.link=function(e,t,n){if(this.options.sanitize){try{var r=decodeURIComponent(s(e)).replace(/[^\w:]/g,"").toLowerCase()}catch(o){return""}if(0===r.indexOf("javascript:")||0===r.indexOf("vbscript:"))return""}var i='<a href="'+e+'"';return t&&(i+=' title="'+t+'"'),i+=">"+n+"</a>"},r.prototype.image=function(e,t,n){var r='<img src="'+e+'" alt="'+n+'"';return t&&(r+=' title="'+t+'"'),r+=this.options.xhtml?"/>":">"},r.prototype.text=function(e){return e},o.parse=function(e,t,n){var r=new o(t,n);return r.parse(e)},o.prototype.parse=function(e){this.inline=new n(e.links,this.options,this.renderer),this.tokens=e.reverse();for(var t="";this.next();)t+=this.tok();return t},o.prototype.next=function(){return this.token=this.tokens.pop()},o.prototype.peek=function(){return this.tokens[this.tokens.length-1]||0},o.prototype.parseText=function(){for(var e=this.token.text;"text"===this.peek().type;)e+="\n"+this.next().text;return this.inline.output(e)},o.prototype.tok=function(){switch(this.token.type){case"space":return"";case"hr":return this.renderer.hr();case"heading":return this.renderer.heading(this.inline.output(this.token.text),this.token.depth,this.token.text);case"code":return this.renderer.code(this.token.text,this.token.lang,this.token.escaped);case"table":var e,t,n,r,o,i="",s="";for(n="",e=0;e<this.token.header.length;e++)r={header:!0,align:this.token.align[e]},n+=this.renderer.tablecell(this.inline.output(this.token.header[e]),{header:!0,align:this.token.align[e]});for(i+=this.renderer.tablerow(n),e=0;e<this.token.cells.length;e++){for(t=this.token.cells[e],n="",o=0;o<t.length;o++)n+=this.renderer.tablecell(this.inline.output(t[o]),{header:!1,align:this.token.align[o]});s+=this.renderer.tablerow(n)}return this.renderer.table(i,s);case"blockquote_start":for(var s="";"blockquote_end"!==this.next().type;)s+=this.tok();return this.renderer.blockquote(s);case"list_start":for(var s="",l=this.token.ordered;"list_end"!==this.next().type;)s+=this.tok();return this.renderer.list(s,l);case"list_item_start":for(var s="";"list_item_end"!==this.next().type;)s+="text"===this.token.type?this.parseText():this.tok();return this.renderer.listitem(s);case"loose_item_start":for(var s="";"list_item_end"!==this.next().type;)s+=this.tok();return this.renderer.listitem(s);case"html":var a=this.token.pre||this.options.pedantic?this.token.text:this.inline.output(this.token.text);return this.renderer.html(a);case"paragraph":return this.renderer.paragraph(this.inline.output(this.token.text));case"text":return this.renderer.paragraph(this.parseText())}},a.exec=a,c.options=c.setOptions=function(e){return u(c.defaults,e),c},c.defaults={gfm:!0,tables:!0,breaks:!1,pedantic:!1,sanitize:!1,sanitizer:null,mangle:!0,smartLists:!1,silent:!1,highlight:null,langPrefix:"lang-",smartypants:!1,headerPrefix:"",renderer:new r,xhtml:!1},c.Parser=o,c.parser=o.parse,c.Renderer=r,c.Lexer=t,c.lexer=t.lex,c.InlineLexer=n,c.inlineLexer=n.output,c.parse=c,e.exports=c}).call(function(){return this||("undefined"!=typeof window?window:t);
}())}).call(t,function(){return this}())},148:function(e,t,n){e.exports=n(14)(674)},149:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},u=n(3),c=r(u),f=n(4),p=n(78),h=r(p),d=n(88),g=r(d),y=n(150),b=r(y),m=n(82),v=r(m),k=function(e,t,n,r){var o,i=arguments.length,s=3>i?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"===("undefined"==typeof Reflect?"undefined":a(Reflect))&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(s=(3>i?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s},w=n(155),_=function(e){function t(e){o(this,t);var n=i(this,Object.getPrototypeOf(t).call(this,e));return n.state={showViewerPreference:!1},n.handlePrefClick=n.handlePrefClick.bind(n),n}return s(t,e),l(t,[{key:"handlePrefClick",value:function(){this.props.onPrefVisibilityChange(!this.props.showViewerPreference)}},{key:"componentDidMount",value:function(){}},{key:"render",value:function(){var e=this.props,t=e.title,n=e.showViewerPreference;return c["default"].createElement("div",{styleName:"viewer-panel"},c["default"].createElement("div",{styleName:"container"},c["default"].createElement("div",{styleName:"back"},c["default"].createElement(f.Link,{to:"/"},c["default"].createElement(h["default"],{name:"back"}),c["default"].createElement("span",null,"返回"))),c["default"].createElement("span",{styleName:"title"},t),c["default"].createElement("div",{onClick:this.handlePrefClick,styleName:"preference"},c["default"].createElement(h["default"],{name:"preference"})),c["default"].createElement(g["default"],null,n?c["default"].createElement(b["default"],null):null)))}}]),t}(u.Component);_=k([(0,v["default"])(w)],_),t["default"]=_},150:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},u=n(3),c=r(u),f=n(7),p=n(151),h=r(p),d=n(82),g=r(d),y=function(e,t,n,r){var o,i=arguments.length,s=3>i?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"===("undefined"==typeof Reflect?"undefined":a(Reflect))&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(s=(3>i?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s},b=n(154),m=function(e){function t(e){return o(this,t),i(this,Object.getPrototypeOf(t).call(this,e))}return s(t,e),l(t,[{key:"render",value:function(){return c["default"].createElement("div",{styleName:"viewer-preference"},c["default"].createElement("ul",{className:"options"},c["default"].createElement("li",{styleName:"option-font-size"},c["default"].createElement("span",null,"A-"),c["default"].createElement("span",null,"A+")),c["default"].createElement("li",{styleName:"option-scroll"},c["default"].createElement("span",{className:"label"},"滚动模式"),c["default"].createElement(h["default"],{value:!0})),c["default"].createElement("li",{styleName:"option-theme"},c["default"].createElement("span",{style:{background:"#fff"}},"theme1"),c["default"].createElement("span",{style:{background:"#eee"}},"theme2"),c["default"].createElement("span",{style:{background:"#222"}},"theme3"))))}}]),t}(u.Component);m=y([(0,g["default"])(b)],m),t["default"]=(0,f.connect)()(m)},151:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(152),i=r(o);t["default"]=i["default"]},152:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},u=n(3),c=r(u),f=n(82),p=r(f),h=function(e,t,n,r){var o,i=arguments.length,s=3>i?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"===("undefined"==typeof Reflect?"undefined":a(Reflect))&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(s=(3>i?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s},d=n(153),g=function(e){function t(e){return o(this,t),i(this,Object.getPrototypeOf(t).call(this,e))}return s(t,e),l(t,[{key:"componentDidMount",value:function(){}},{key:"render",value:function(){var e=this,t=this.props,n=t.value,r=t.className;"string"==typeof this.props.value&&(n="1"===n||"true"===n);var o=Boolean(n)?"on":"off";return c["default"].createElement("div",{className:r||"",styleName:"switcher-wrap"},this.props.title&&c["default"].createElement("span",null,this.props.title),c["default"].createElement("div",{onClick:function(t){if(e.props.onChange){var n=void 0;if(e.props.options){var r=e.props.options.map(function(e){return e.value}).indexOf(e.props.value);1===r?n=e.props.options[0].value:0===r?n=e.props.options[1].value:(n=e.props.options[0].value,console.error("当前数据有误，将使用默认数据！"))}else"string"==typeof e.props.value?console.error("没有给 options 时必须使用布尔型的 value！"):n=!e.props.value;e.props.onChange(n)}},styleName:"switcher--"+o},c["default"].createElement("div",{styleName:"switcher-button"}),c["default"].createElement("div",{styleName:"switcher-track"})))}}]),t}(u.Component);g=h([(0,p["default"])(d,{allowMultiple:!0})],g),t["default"]=g},153:function(e,t){e.exports={"switcher-wrap":"switcher-wrap_3UMAU",switcher:"switcher_G3n4_","switcher--off":"switcher--off_1EoOU","switcher--on":"switcher--on_2xiwO","switcher-button":"switcher-button_2kHGL","switcher-track":"switcher-track_xvhjg"}},154:function(e,t){e.exports={"viewer-preference":"viewer-preference_1FNJZ",option:"option_19FXW","option-font-size":"option-font-size_18ONG option_19FXW","option-scroll":"option-scroll_3agtO option_19FXW",label:"label_3HLPp",switcher:"switcher_3T9K_","option-theme":"option-theme_38bUg option_19FXW"}},155:function(e,t){e.exports={"viewer-panel":"viewer-panel_aoOv7",container:"container_2cLNI",back:"back_ppxQ_",title:"title_3Nhli",preference:"preference_1wPa6"}},156:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(3),u=r(a),c=n(139),f=r(c),p=function(e){function t(e){return o(this,t),i(this,Object.getPrototypeOf(t).call(this,e))}return s(t,e),l(t,[{key:"getContentHtml",value:function(){return this.bookPageList.bookPage.bookPageDom}},{key:"render",value:function(){var e=this,t=this.props,n=t.fluid,r=t.nodes;return u["default"].createElement(f["default"],{fluid:n,nodes:r,nodeHeights:[],pageCount:1,pageHeight:0,isCalcMode:!0,ref:function(t){e.bookPageList=t}})}}]),t}(a.Component);t["default"]=p},157:function(e,t){}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,